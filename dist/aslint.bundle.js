(function () {
  'use strict';

  Array.prototype.flat||Object.defineProperty(Array.prototype,"flat",{configurable:!0,value:function r(){var t=isNaN(arguments[0])?1:Number(arguments[0]);return t?Array.prototype.reduce.call(this,function(a,e){return Array.isArray(e)?a.push.apply(a,r.call(e,t-1)):a.push(e),a},[]):Array.prototype.slice.call(this)},writable:!0}),Array.prototype.flatMap||Object.defineProperty(Array.prototype,"flatMap",{configurable:!0,value:function(r){return Array.prototype.map.apply(this,arguments).flat()},writable:!0});

  var asyncRunner = false;
  var context = ":root";
  var debugMode = false;
  var description = "";
  var direction = "ltr";
  var includeHidden = true;
  var includeElementReference = false;
  var namespace = "aslint";
  var reportFormat = {
  	json: true
  };
  var rules = {
  };
  var watchDomChanges = false;
  var runnerSettings = {
  	asyncRunner: asyncRunner,
  	context: context,
  	debugMode: debugMode,
  	description: description,
  	direction: direction,
  	includeHidden: includeHidden,
  	includeElementReference: includeElementReference,
  	namespace: namespace,
  	reportFormat: reportFormat,
  	rules: rules,
  	watchDomChanges: watchDomChanges
  };

  var version = "0.0.43";

  class Func {
      static mixin(targetObject, ...sources) {
          const target = targetObject ? targetObject : {};
          const processSources = (src) => {
              if (src) {
                  const copyValue = (key) => {
                      target[key] = src[key];
                  };
                  Object.keys(src).forEach(copyValue);
              }
          };
          sources.forEach(processSources);
          return target;
      }
      static defaults(targetObject, sources) {
          let target = {};
          if (targetObject) {
              target = targetObject;
          }
          if (sources) {
              const processSrc = (key) => {
                  if (typeof target[key] === 'undefined') {
                      target[key] = sources[key];
                  }
              };
              Object.keys(sources).forEach(processSrc);
          }
          return target;
      }
      static namespace(namespace, context) {
          const parts = namespace.split('.');
          const len = parts.length;
          let parent = context || global;
          for (let i = 0; i < len; i += 1) {
              if (parent[parts[i]] === undefined) {
                  parent[parts[i]] = {};
              }
              parent = parent[parts[i]];
          }
          return parent;
      }
  }

  class ObjectUtility {
      static getTypeOf(obj) {
          const defaultType = 'unknown';
          if (arguments.length !== 1) {
              return defaultType;
          }
          return Object.prototype.toString.call(obj).slice(8, -1)
              .toLowerCase();
      }
      static isTypeOf(obj, typeToCheck) {
          if (arguments.length < 2) {
              throw new TypeError('[ObjectUtility.isTypeOf] requires two arguments');
          }
          const type = typeToCheck.toLowerCase();
          return this.getTypeOf(obj) === type;
      }
      static isNumber(value) {
          if (ObjectUtility.getTypeOf(value) === 'number') {
              return Number.isFinite(value);
          }
          if (ObjectUtility.getTypeOf(value) === 'string') {
              return value.trim().length > 0 && Number.isFinite(Number(value));
          }
          return false;
      }
      static isHtmlElement(el) {
          if (el === null) {
              return false;
          }
          try {
              return el instanceof Element || el instanceof HTMLDocument;
          }
          catch (t) {
              return (typeof el === 'object' &&
                  el.nodeType === Node.ELEMENT_NODE &&
                  typeof el.style === 'object' &&
                  typeof el.ownerDocument === 'object');
          }
      }
      static isHostMethod(obj, method) {
          if (!obj) {
              return false;
          }
          const t = typeof obj[method];
          return this.reUnknown.test(t) || (this.reMethod.test(t) && Boolean(obj)) || false;
      }
      static isHostObjectProperty(o, p) {
          const t = typeof o[p];
          return Boolean(this.reMethod.test(t) && o[p]);
      }
      static isRealObjectProperty(o, p) {
          return Boolean(typeof o[p] === 'object' && o[p]);
      }
      static deepMerge(source, target) {
          const mergeKeyValue = (key) => {
              if (source[key] instanceof Object && target[key] instanceof Object) {
                  if (Array.isArray(source[key]) && Array.isArray(target[key])) {
                      source[key] = Array.from(new Set(source[key].concat(target[key])));
                  }
                  else if (Array.isArray(source[key]) === false && Array.isArray(target[key]) === false) {
                      this.deepMerge(source[key], target[key]);
                  }
                  else {
                      source[key] = target[key];
                  }
              }
              else {
                  source[key] = target[key];
              }
          };
          Object.keys(target).forEach(mergeKeyValue);
          return source;
      }
      static extend(destination, source) {
          let property;
          let src;
          const cloneArray = (a) => {
              return Object.assign({}, a);
          };
          for (property in source) {
              if (Object.prototype.hasOwnProperty.call(source, property)) {
                  src = source[property];
                  if (this.isTypeOf(src, 'object')) {
                      destination[property] = destination[property] || {};
                      this.extend(destination[property], src);
                  }
                  else if (Array.isArray(src)) {
                      destination[property] = src.map(cloneArray);
                  }
                  else if (this.getTypeOf(src) === 'date') {
                      destination[property] = new Date(src.valueOf());
                  }
                  else if (this.getTypeOf(src) === 'regexp') {
                      destination[property] = new RegExp(src);
                  }
                  else {
                      destination[property] = source[property];
                  }
              }
          }
          return destination;
      }
      static clone(o) {
          const gdcc = '__getDeepCircularCopy__';
          let result;
          if (o !== Object(o)) {
              return o;
          }
          const set = gdcc in o;
          const cache = o[gdcc];
          if (set && typeof cache === 'function') {
              return cache();
          }
          o[gdcc] = function () {
              return result;
          };
          if (Object.getPrototypeOf(o) === null) {
              console.log(o);
          }
          if (Array.isArray(o)) {
              const cloneArray = (a) => {
                  if (typeof a === 'object') {
                      if (a === null) {
                          return a;
                      }
                      return Object.assign({}, a);
                  }
                  return a;
              };
              result = o.map(cloneArray);
          }
          else if (Object.getPrototypeOf(o).constructor.name.toLowerCase() === 'date') {
              return new Date(o.valueOf());
          }
          else if (Object.getPrototypeOf(o).constructor.name.toLowerCase() === 'regexp') {
              return new RegExp(o);
          }
          else {
              result = {};
              for (const prop in o) {
                  if (prop !== gdcc) {
                      result[prop] = ObjectUtility.clone(o[prop]);
                  }
                  else if (set) {
                      result[prop] = ObjectUtility.clone(cache);
                  }
              }
          }
          if (set) {
              o[gdcc] = cache;
          }
          else {
              delete o[gdcc];
          }
          return result;
      }
      static deleteProperties(obj) {
          let prop;
          for (prop in obj) {
              if (Object.prototype.hasOwnProperty.call(obj, prop)) {
                  delete obj[prop];
              }
          }
          return obj;
      }
      static clearArray(arr) {
          arr.length = 0;
          return arr;
      }
      static isNativeMethod(m) {
          const re = new RegExp('^(function|object)$', 'i');
          const t = typeof m;
          let s;
          if (re.test(t)) {
              s = String(m);
              return s.indexOf('[native code]') !== -1;
          }
          return false;
      }
      static getProperty(objectItem, keyPath) {
          const properties = keyPath.split('.');
          const len = properties.length;
          let obj = objectItem;
          for (let i = 0; i < len; i += 1) {
              if (!obj || !obj.hasOwnProperty(properties[i])) {
                  return undefined;
              }
              obj = obj[properties[i]];
          }
          return obj;
      }
      static setProperty(o, pathValue, value) {
          let obj = o;
          if (this.isTypeOf(o, 'object') === false ||
              (this.isTypeOf(o, 'array') === false && this.isTypeOf(pathValue, 'string') === false)) {
              return null;
          }
          const path = pathValue.split('.');
          const last = path.pop();
          if (this.getProperty(o, pathValue) === undefined) {
              Func.namespace(pathValue, o);
          }
          while (path.length && obj) {
              obj = obj[(path.shift())];
          }
          if (typeof last === 'undefined') {
              return;
          }
          obj[last] = value;
          return obj[last];
      }
  }
  ObjectUtility.reMethod = /^(function|object)$/;
  ObjectUtility.reUnknown = /^unknown$/;

  var busEvent;
  (function (busEvent) {
      busEvent["onApplicationDispose"] = "onApplicationDispose";
      busEvent["onBeforeRuleReport"] = "onBeforeRuleReport";
      busEvent["onBusyIndicatorOff"] = "onBusyIndicatorOff";
      busEvent["onBusyIndicatorOn"] = "onBusyIndicatorOn";
      busEvent["onValidatorComplete"] = "onValidatorComplete";
      busEvent["onValidatorReport"] = "onValidatorReport";
      busEvent["onValidatorReset"] = "onValidatorReset";
      busEvent["onValidatorStarted"] = "onValidatorStarted";
  })(busEvent || (busEvent = {}));

  var BusListenersPool;
  (function (BusListenersPool) {
      BusListenersPool["internal"] = "internal";
      BusListenersPool["external"] = "external";
  })(BusListenersPool || (BusListenersPool = {}));
  class Bus {
      constructor() { }
      static removeAllListeners() {
          return {
              [BusListenersPool.internal]: {},
              [BusListenersPool.external]: {}
          };
      }
      static subscribe(eventName, listener, pool = BusListenersPool.internal) {
          if (ObjectUtility.isTypeOf(listener, 'function') === false) {
              console.warn('[Bus.subscribe] trying to subscribe invalid type of listener: ', ObjectUtility.getTypeOf(listener));
              return;
          }
          if (typeof Bus.listeners[pool][eventName] === 'undefined') {
              Bus.listeners[pool][eventName] = [];
          }
          Bus.listeners[pool][eventName].push(listener);
      }
      static subscribeOnce(eventName, listener) {
          const handler = (...args) => {
              listener.apply(this, args);
              Bus.unsubscribe(eventName, handler);
          };
          Bus.subscribe(eventName, handler);
      }
      static unsubscribe(eventName, listener, pool = BusListenersPool.internal) {
          if (typeof eventName === 'undefined') {
              throw new Error('[Bus.unsubscribe] missing event name');
          }
          const lastIndex = Bus.listeners[pool][eventName] ? Bus.listeners[pool][eventName].length : 0;
          if (listener instanceof Function) {
              for (let i = lastIndex - 1; i >= 0; i -= 1) {
                  if (Bus.listeners[pool][eventName][i] === listener) {
                      Bus.listeners[pool][eventName].splice(i, 1);
                  }
              }
          }
          else {
              delete Bus.listeners[pool][eventName];
          }
      }
      static unsubscribeAll() {
          Bus.listeners = Bus.removeAllListeners();
      }
      static publish(eventName, ...args) {
          let lastIndex;
          if (Object.keys(busEvent).includes(eventName) === false) {
              throw new Error(`[Bus.publish] Trying to publish non exists event: ${eventName}`);
          }
          const triggerEventListenerCallback = (pool) => {
              const eventListener = Bus.listeners[pool];
              lastIndex = eventListener[eventName] ? eventListener[eventName].length : 0;
              for (let i = lastIndex - 1; i >= 0; i -= 1) {
                  if (eventListener[eventName]) {
                      eventListener[eventName][i].apply(this, args);
                  }
              }
          };
          [BusListenersPool.internal, BusListenersPool.external].forEach(triggerEventListenerCallback);
      }
  }
  Bus.listeners = Bus.removeAllListeners();

  class CommonUtility {
      static hasKey(obj, key) {
          const keys = Array.isArray(key) ? key : key.split('.');
          const len = keys.length;
          let o = obj;
          let result = true;
          if (o === null) {
              result = false;
              return result;
          }
          for (let i = 0; i < len; i += 1) {
              if (typeof o !== 'object' || o === null || Object.prototype.hasOwnProperty.call(o, keys[i]) === false) {
                  result = false;
                  break;
              }
              o = o[keys[i]];
          }
          return result;
      }
      static setKey(obj, path, value) {
          const pList = path.split('.');
          const key = pList.pop();
          const createPropertyWithValue = (accumulator, currentValue) => {
              if (typeof accumulator[currentValue] === 'undefined') {
                  Object.defineProperty(accumulator, currentValue, {
                      configurable: true,
                      enumerable: true,
                      value: {},
                      writable: true
                  });
              }
              return accumulator[currentValue];
          };
          if (typeof key === 'undefined') {
              throw new Error('[Common.setKey] Invalid type of key. Should be stringm provided undefined');
          }
          const pointer = pList.reduce(createPropertyWithValue, obj);
          pointer[key] = value;
          return obj;
      }
      static pick(value, ...props) {
          const result = {};
          for (const prop of props) {
              if (prop in value) {
                  result[prop] = value[prop];
              }
              else {
                  const path = prop;
                  if (CommonUtility.hasKey(value, path)) {
                      const deepValue = path.split('.').reduce((prev, current) => {
                          return prev[current];
                      }, value);
                      CommonUtility.setKey(result, path, deepValue);
                  }
              }
          }
          return result;
      }
      static pickArray(values, ...props) {
          return values.map((value) => {
              return this.pick(value, ...props);
          });
      }
      static arrayToMap(objects, key) {
          const getKey = (object) => {
              return typeof object[key] === 'function' ? object[key].call(object) : object[key];
          };
          return new Map(objects.map((object) => {
              return [getKey(object), object];
          }));
      }
      static isHtmlDocument(el) {
          return Boolean(el) && el.nodeType === Node.DOCUMENT_NODE;
      }
      static isNativeMethod(methodName) {
          const regEx = new RegExp('^(function|object)$', 'i');
          const argumentType = typeof methodName;
          let str;
          if (regEx.test(argumentType)) {
              str = String(methodName);
              return str.indexOf('[native code]') !== -1;
          }
          return false;
      }
      static randomRange(minVal = 0, max = 1000000) {
          const min = Math.ceil(minVal);
          return Math.floor(Math.random() * (Math.floor(max) - min)) + min;
      }
      static isEventSupported(event, htmlElement) {
          const TAGNAMES = {
              abort: 'img',
              change: 'input',
              error: 'img',
              load: 'img',
              reset: 'form',
              select: 'input',
              submit: 'form'
          };
          let element = htmlElement || document.createElement(TAGNAMES[event] || 'div');
          const eventName = `on${event}`;
          let isSupported = eventName in document;
          if (isSupported === false) {
              if (ObjectUtility.isHostMethod(element, 'setAttribute') === false) {
                  element = document.createElement('div');
              }
              if (ObjectUtility.isHostMethod(element, 'setAttribute') && ObjectUtility.isHostMethod(element, 'removeAttribute')) {
                  element.setAttribute(eventName, '');
                  isSupported = typeof element[eventName] === 'function';
                  if (typeof element[eventName] !== 'undefined') {
                      const descriptor = Object.getOwnPropertyDescriptor(element, eventName);
                      if (descriptor === null || descriptor === void 0 ? void 0 : descriptor.writable) {
                          Object.defineProperty(element, eventName, {
                              configurable: true,
                              enumerable: true,
                              value: undefined,
                              writable: true
                          });
                      }
                  }
                  element.removeAttribute(eventName);
              }
          }
          return isSupported;
      }
  }

  class Config {
      constructor() {
          this.references = {};
      }
      static getInstance() {
          if (typeof Config.instance === 'undefined') {
              Config.instance = new Config();
          }
          return Config.instance;
      }
      static get excludeContainers() {
          return [];
      }
      static addFilter(filterName, handler) {
          if (typeof this.filters[filterName] === 'undefined') {
              this.filters[filterName] = [];
          }
          if (handler instanceof Function) {
              this.filters[filterName].push(handler);
          }
      }
      static getFilters(filterName) {
          return Array.isArray(this.filters[filterName]) ? this.filters[filterName] : [];
      }
      mixCustomWithDefaultSettings(runnerOptions) {
          Config.runnerOptions = Func.mixin(Config.runnerOptions, runnerOptions);
      }
      dispose() {
          console.log('%c[Config.dispose]', 'color: blue');
          Bus.unsubscribe(busEvent.onApplicationDispose, this.references.dispose);
          Config.runnerOptions = undefined;
      }
      initEvents() {
          this.references.dispose = this.dispose.bind(this);
          Bus.subscribe(busEvent.onApplicationDispose, this.references.dispose);
      }
      removeAllOptions() {
          Config.runnerOptions = undefined;
      }
      set(property, value) {
          if (ObjectUtility.getTypeOf(Config.runnerOptions) !== 'object') {
              console.warn(`[Config.set] Unable to set option on config because Config.options is not an object. Got typeof ${typeof Config.runnerOptions}`);
              return;
          }
          if (property !== 'resultsCallback' && CommonUtility.hasKey(Config.runnerOptions, property) === false) {
              console.warn('[Config.set] Trying to set an unknown config property', property, value);
              return;
          }
          CommonUtility.setKey(Config.runnerOptions, property, value);
      }
      get(property) {
          if (typeof Config.runnerOptions === 'undefined') {
              if (typeof runnerSettings[property] !== 'undefined') {
                  return runnerSettings[property];
              }
              return null;
          }
          return (typeof Config.runnerOptions[property] === 'undefined') ? null : Config.runnerOptions[property];
      }
      init(runnerOptions = {}) {
          Config.runnerOptions = runnerSettings;
          this.mixCustomWithDefaultSettings(runnerOptions);
          this.initEvents();
      }
  }
  Config.filters = {};

  class Global {
      static get context() {
          return (function () {
              if (typeof globalThis === 'object') {
                  return globalThis;
              }
              Object.defineProperty(Object.prototype, '__magic__', {
                  configurable: true,
                  get: function () {
                      return this;
                  }
              });
              __magic__.globalThis = __magic__;
              delete Object.prototype.__magic__;
          }());
      }
  }

  class Console {
      static init(globalContext) {
          const globalAny = globalContext || Global.context;
          const consoleCountData = {};
          const methods = ['assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log', 'msIsIndependentlyComposed', 'profile', 'profileEnd', 'select', 'time', 'timeEnd', 'trace', 'warn'];
          const config = {
              trace: true
          };
          const noop = () => {
              return false;
          };
          if (typeof globalAny.console === 'undefined') {
              globalAny.console = {};
          }
          globalAny.console.config = config;
          if (typeof globalAny.console.count === 'undefined') {
              globalAny.console.count = function countCalls(...args) {
                  const _arguments = Array.from(args);
                  const str = String(_arguments[0]);
                  if (typeof consoleCountData[str] === 'number') {
                      consoleCountData[str] += 1;
                  }
                  else {
                      consoleCountData[str] = 1;
                  }
                  _arguments.shift();
                  _arguments.unshift(`${str}: ${consoleCountData[str]}`);
                  globalAny.console.log(globalAny.console, ..._arguments);
                  return consoleCountData;
              };
          }
          if (typeof globalAny.console.countReset === 'undefined') {
              globalAny.console.countReset = function (str) {
                  const title = String(str);
                  consoleCountData[title] = 0;
                  return consoleCountData;
              };
          }
          for (let i = 0; i < methods.length; i += 1) {
              if (typeof globalAny.console[methods[i]] === 'undefined') {
                  globalAny.console[methods[i]] = noop;
              }
          }
          const wrapper = (methodName) => {
              const originalMethod = globalAny.console[methodName];
              const consoleFn = (args) => {
                  if (globalAny.console.config[methodName]) {
                      originalMethod.apply(globalAny.console, ...args);
                  }
              };
              consoleFn.originalMethod = false;
              globalAny.console[methodName] = consoleFn;
          };
          const processConfig = (key) => {
              wrapper(key);
          };
          Object.keys(globalAny.console.config).forEach(processConfig);
          return globalAny.console;
      }
  }

  class Async {
      constructor() { }
      static run(fn, context, timeout) {
          const callBack = context ? fn.bind(context) : fn;
          return window.setTimeout(callBack, timeout || Async.DEFAULT_TIMEOUT);
      }
      static interval(fn, context, intervalId) {
          const callBack = context ? fn.bind(context) : fn;
          return window.setInterval(callBack, intervalId || Async.DEFAULT_INTERVAL);
      }
      static stopInterval(id) {
          window.clearInterval(id);
      }
  }
  Async.DEFAULT_TIMEOUT = 10;
  Async.DEFAULT_INTERVAL = 10;

  class Time {
      static format(duration) {
          const milliseconds = Math.floor(duration % 1000);
          const seconds = Math.floor(duration / 1000 % 60);
          const minutes = Math.floor(duration / (60 * 1000) % 60);
          const hours = Math.floor(duration / (60 * 60 * 1000) % 60);
          let time = '';
          if (duration < 1) {
              return '< 1 ms';
          }
          if (hours > 0) {
              time += `${hours}h `;
          }
          if (minutes > 0) {
              time += `${minutes}m `;
          }
          if (seconds > 0) {
              time += `${seconds}s `;
          }
          if (milliseconds > 0) {
              time += `${milliseconds}ms`;
          }
          return time;
      }
  }

  /**
   * Take input from [0, n] and return it as [0, 1]
   * @hidden
   */
  function bound01(n, max) {
      if (isOnePointZero(n)) {
          n = '100%';
      }
      var isPercent = isPercentage(n);
      n = max === 360 ? n : Math.min(max, Math.max(0, parseFloat(n)));
      // Automatically convert percentage into number
      if (isPercent) {
          n = parseInt(String(n * max), 10) / 100;
      }
      // Handle floating point rounding errors
      if (Math.abs(n - max) < 0.000001) {
          return 1;
      }
      // Convert into [0, 1] range if it isn't already
      if (max === 360) {
          // If n is a hue given in degrees,
          // wrap around out-of-range values into [0, 360] range
          // then convert into [0, 1].
          n = (n < 0 ? (n % max) + max : n % max) / parseFloat(String(max));
      }
      else {
          // If n not a hue given in degrees
          // Convert into [0, 1] range if it isn't already.
          n = (n % max) / parseFloat(String(max));
      }
      return n;
  }
  /**
   * Force a number between 0 and 1
   * @hidden
   */
  function clamp01(val) {
      return Math.min(1, Math.max(0, val));
  }
  /**
   * Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
   * <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>
   * @hidden
   */
  function isOnePointZero(n) {
      return typeof n === 'string' && n.indexOf('.') !== -1 && parseFloat(n) === 1;
  }
  /**
   * Check to see if string passed in is a percentage
   * @hidden
   */
  function isPercentage(n) {
      return typeof n === 'string' && n.indexOf('%') !== -1;
  }
  /**
   * Return a valid alpha value [0,1] with all invalid values being set to 1
   * @hidden
   */
  function boundAlpha(a) {
      a = parseFloat(a);
      if (isNaN(a) || a < 0 || a > 1) {
          a = 1;
      }
      return a;
  }
  /**
   * Replace a decimal with it's percentage value
   * @hidden
   */
  function convertToPercentage(n) {
      if (n <= 1) {
          return Number(n) * 100 + "%";
      }
      return n;
  }
  /**
   * Force a hex value to have 2 characters
   * @hidden
   */
  function pad2(c) {
      return c.length === 1 ? '0' + c : String(c);
  }

  // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
  // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>
  /**
   * Handle bounds / percentage checking to conform to CSS color spec
   * <http://www.w3.org/TR/css3-color/>
   * *Assumes:* r, g, b in [0, 255] or [0, 1]
   * *Returns:* { r, g, b } in [0, 255]
   */
  function rgbToRgb(r, g, b) {
      return {
          r: bound01(r, 255) * 255,
          g: bound01(g, 255) * 255,
          b: bound01(b, 255) * 255,
      };
  }
  /**
   * Converts an RGB color value to HSL.
   * *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
   * *Returns:* { h, s, l } in [0,1]
   */
  function rgbToHsl(r, g, b) {
      r = bound01(r, 255);
      g = bound01(g, 255);
      b = bound01(b, 255);
      var max = Math.max(r, g, b);
      var min = Math.min(r, g, b);
      var h = 0;
      var s = 0;
      var l = (max + min) / 2;
      if (max === min) {
          s = 0;
          h = 0; // achromatic
      }
      else {
          var d = max - min;
          s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
          switch (max) {
              case r:
                  h = (g - b) / d + (g < b ? 6 : 0);
                  break;
              case g:
                  h = (b - r) / d + 2;
                  break;
              case b:
                  h = (r - g) / d + 4;
                  break;
          }
          h /= 6;
      }
      return { h: h, s: s, l: l };
  }
  function hue2rgb(p, q, t) {
      if (t < 0) {
          t += 1;
      }
      if (t > 1) {
          t -= 1;
      }
      if (t < 1 / 6) {
          return p + (q - p) * (6 * t);
      }
      if (t < 1 / 2) {
          return q;
      }
      if (t < 2 / 3) {
          return p + (q - p) * (2 / 3 - t) * 6;
      }
      return p;
  }
  /**
   * Converts an HSL color value to RGB.
   *
   * *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
   * *Returns:* { r, g, b } in the set [0, 255]
   */
  function hslToRgb(h, s, l) {
      var r;
      var g;
      var b;
      h = bound01(h, 360);
      s = bound01(s, 100);
      l = bound01(l, 100);
      if (s === 0) {
          // achromatic
          g = l;
          b = l;
          r = l;
      }
      else {
          var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
          var p = 2 * l - q;
          r = hue2rgb(p, q, h + 1 / 3);
          g = hue2rgb(p, q, h);
          b = hue2rgb(p, q, h - 1 / 3);
      }
      return { r: r * 255, g: g * 255, b: b * 255 };
  }
  /**
   * Converts an RGB color value to HSV
   *
   * *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
   * *Returns:* { h, s, v } in [0,1]
   */
  function rgbToHsv(r, g, b) {
      r = bound01(r, 255);
      g = bound01(g, 255);
      b = bound01(b, 255);
      var max = Math.max(r, g, b);
      var min = Math.min(r, g, b);
      var h = 0;
      var v = max;
      var d = max - min;
      var s = max === 0 ? 0 : d / max;
      if (max === min) {
          h = 0; // achromatic
      }
      else {
          switch (max) {
              case r:
                  h = (g - b) / d + (g < b ? 6 : 0);
                  break;
              case g:
                  h = (b - r) / d + 2;
                  break;
              case b:
                  h = (r - g) / d + 4;
                  break;
          }
          h /= 6;
      }
      return { h: h, s: s, v: v };
  }
  /**
   * Converts an HSV color value to RGB.
   *
   * *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
   * *Returns:* { r, g, b } in the set [0, 255]
   */
  function hsvToRgb(h, s, v) {
      h = bound01(h, 360) * 6;
      s = bound01(s, 100);
      v = bound01(v, 100);
      var i = Math.floor(h);
      var f = h - i;
      var p = v * (1 - s);
      var q = v * (1 - f * s);
      var t = v * (1 - (1 - f) * s);
      var mod = i % 6;
      var r = [v, q, p, p, t, v][mod];
      var g = [t, v, v, q, p, p][mod];
      var b = [p, p, t, v, v, q][mod];
      return { r: r * 255, g: g * 255, b: b * 255 };
  }
  /**
   * Converts an RGB color to hex
   *
   * Assumes r, g, and b are contained in the set [0, 255]
   * Returns a 3 or 6 character hex
   */
  function rgbToHex(r, g, b, allow3Char) {
      var hex = [
          pad2(Math.round(r).toString(16)),
          pad2(Math.round(g).toString(16)),
          pad2(Math.round(b).toString(16)),
      ];
      // Return a 3 character hex if possible
      if (allow3Char &&
          hex[0].startsWith(hex[0].charAt(1)) &&
          hex[1].startsWith(hex[1].charAt(1)) &&
          hex[2].startsWith(hex[2].charAt(1))) {
          return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
      }
      return hex.join('');
  }
  /**
   * Converts an RGBA color plus alpha transparency to hex
   *
   * Assumes r, g, b are contained in the set [0, 255] and
   * a in [0, 1]. Returns a 4 or 8 character rgba hex
   */
  // eslint-disable-next-line max-params
  function rgbaToHex(r, g, b, a, allow4Char) {
      var hex = [
          pad2(Math.round(r).toString(16)),
          pad2(Math.round(g).toString(16)),
          pad2(Math.round(b).toString(16)),
          pad2(convertDecimalToHex(a)),
      ];
      // Return a 4 character hex if possible
      if (allow4Char &&
          hex[0].startsWith(hex[0].charAt(1)) &&
          hex[1].startsWith(hex[1].charAt(1)) &&
          hex[2].startsWith(hex[2].charAt(1)) &&
          hex[3].startsWith(hex[3].charAt(1))) {
          return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
      }
      return hex.join('');
  }
  /** Converts a decimal to a hex value */
  function convertDecimalToHex(d) {
      return Math.round(parseFloat(d) * 255).toString(16);
  }
  /** Converts a hex value to a decimal */
  function convertHexToDecimal(h) {
      return parseIntFromHex(h) / 255;
  }
  /** Parse a base-16 hex value into a base-10 integer */
  function parseIntFromHex(val) {
      return parseInt(val, 16);
  }
  function numberInputToObject(color) {
      return {
          r: color >> 16,
          g: (color & 0xff00) >> 8,
          b: color & 0xff,
      };
  }

  // https://github.com/bahamas10/css-color-names/blob/master/css-color-names.json
  /**
   * @hidden
   */
  var names = {
      aliceblue: '#f0f8ff',
      antiquewhite: '#faebd7',
      aqua: '#00ffff',
      aquamarine: '#7fffd4',
      azure: '#f0ffff',
      beige: '#f5f5dc',
      bisque: '#ffe4c4',
      black: '#000000',
      blanchedalmond: '#ffebcd',
      blue: '#0000ff',
      blueviolet: '#8a2be2',
      brown: '#a52a2a',
      burlywood: '#deb887',
      cadetblue: '#5f9ea0',
      chartreuse: '#7fff00',
      chocolate: '#d2691e',
      coral: '#ff7f50',
      cornflowerblue: '#6495ed',
      cornsilk: '#fff8dc',
      crimson: '#dc143c',
      cyan: '#00ffff',
      darkblue: '#00008b',
      darkcyan: '#008b8b',
      darkgoldenrod: '#b8860b',
      darkgray: '#a9a9a9',
      darkgreen: '#006400',
      darkgrey: '#a9a9a9',
      darkkhaki: '#bdb76b',
      darkmagenta: '#8b008b',
      darkolivegreen: '#556b2f',
      darkorange: '#ff8c00',
      darkorchid: '#9932cc',
      darkred: '#8b0000',
      darksalmon: '#e9967a',
      darkseagreen: '#8fbc8f',
      darkslateblue: '#483d8b',
      darkslategray: '#2f4f4f',
      darkslategrey: '#2f4f4f',
      darkturquoise: '#00ced1',
      darkviolet: '#9400d3',
      deeppink: '#ff1493',
      deepskyblue: '#00bfff',
      dimgray: '#696969',
      dimgrey: '#696969',
      dodgerblue: '#1e90ff',
      firebrick: '#b22222',
      floralwhite: '#fffaf0',
      forestgreen: '#228b22',
      fuchsia: '#ff00ff',
      gainsboro: '#dcdcdc',
      ghostwhite: '#f8f8ff',
      goldenrod: '#daa520',
      gold: '#ffd700',
      gray: '#808080',
      green: '#008000',
      greenyellow: '#adff2f',
      grey: '#808080',
      honeydew: '#f0fff0',
      hotpink: '#ff69b4',
      indianred: '#cd5c5c',
      indigo: '#4b0082',
      ivory: '#fffff0',
      khaki: '#f0e68c',
      lavenderblush: '#fff0f5',
      lavender: '#e6e6fa',
      lawngreen: '#7cfc00',
      lemonchiffon: '#fffacd',
      lightblue: '#add8e6',
      lightcoral: '#f08080',
      lightcyan: '#e0ffff',
      lightgoldenrodyellow: '#fafad2',
      lightgray: '#d3d3d3',
      lightgreen: '#90ee90',
      lightgrey: '#d3d3d3',
      lightpink: '#ffb6c1',
      lightsalmon: '#ffa07a',
      lightseagreen: '#20b2aa',
      lightskyblue: '#87cefa',
      lightslategray: '#778899',
      lightslategrey: '#778899',
      lightsteelblue: '#b0c4de',
      lightyellow: '#ffffe0',
      lime: '#00ff00',
      limegreen: '#32cd32',
      linen: '#faf0e6',
      magenta: '#ff00ff',
      maroon: '#800000',
      mediumaquamarine: '#66cdaa',
      mediumblue: '#0000cd',
      mediumorchid: '#ba55d3',
      mediumpurple: '#9370db',
      mediumseagreen: '#3cb371',
      mediumslateblue: '#7b68ee',
      mediumspringgreen: '#00fa9a',
      mediumturquoise: '#48d1cc',
      mediumvioletred: '#c71585',
      midnightblue: '#191970',
      mintcream: '#f5fffa',
      mistyrose: '#ffe4e1',
      moccasin: '#ffe4b5',
      navajowhite: '#ffdead',
      navy: '#000080',
      oldlace: '#fdf5e6',
      olive: '#808000',
      olivedrab: '#6b8e23',
      orange: '#ffa500',
      orangered: '#ff4500',
      orchid: '#da70d6',
      palegoldenrod: '#eee8aa',
      palegreen: '#98fb98',
      paleturquoise: '#afeeee',
      palevioletred: '#db7093',
      papayawhip: '#ffefd5',
      peachpuff: '#ffdab9',
      peru: '#cd853f',
      pink: '#ffc0cb',
      plum: '#dda0dd',
      powderblue: '#b0e0e6',
      purple: '#800080',
      rebeccapurple: '#663399',
      red: '#ff0000',
      rosybrown: '#bc8f8f',
      royalblue: '#4169e1',
      saddlebrown: '#8b4513',
      salmon: '#fa8072',
      sandybrown: '#f4a460',
      seagreen: '#2e8b57',
      seashell: '#fff5ee',
      sienna: '#a0522d',
      silver: '#c0c0c0',
      skyblue: '#87ceeb',
      slateblue: '#6a5acd',
      slategray: '#708090',
      slategrey: '#708090',
      snow: '#fffafa',
      springgreen: '#00ff7f',
      steelblue: '#4682b4',
      tan: '#d2b48c',
      teal: '#008080',
      thistle: '#d8bfd8',
      tomato: '#ff6347',
      turquoise: '#40e0d0',
      violet: '#ee82ee',
      wheat: '#f5deb3',
      white: '#ffffff',
      whitesmoke: '#f5f5f5',
      yellow: '#ffff00',
      yellowgreen: '#9acd32',
  };

  /**
   * Given a string or object, convert that input to RGB
   *
   * Possible string inputs:
   * ```
   * "red"
   * "#f00" or "f00"
   * "#ff0000" or "ff0000"
   * "#ff000000" or "ff000000"
   * "rgb 255 0 0" or "rgb (255, 0, 0)"
   * "rgb 1.0 0 0" or "rgb (1, 0, 0)"
   * "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
   * "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
   * "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
   * "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
   * "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
   * ```
   */
  function inputToRGB(color) {
      var rgb = { r: 0, g: 0, b: 0 };
      var a = 1;
      var s = null;
      var v = null;
      var l = null;
      var ok = false;
      var format = false;
      if (typeof color === 'string') {
          color = stringInputToObject(color);
      }
      if (typeof color === 'object') {
          if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
              rgb = rgbToRgb(color.r, color.g, color.b);
              ok = true;
              format = String(color.r).substr(-1) === '%' ? 'prgb' : 'rgb';
          }
          else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
              s = convertToPercentage(color.s);
              v = convertToPercentage(color.v);
              rgb = hsvToRgb(color.h, s, v);
              ok = true;
              format = 'hsv';
          }
          else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
              s = convertToPercentage(color.s);
              l = convertToPercentage(color.l);
              rgb = hslToRgb(color.h, s, l);
              ok = true;
              format = 'hsl';
          }
          if (Object.prototype.hasOwnProperty.call(color, 'a')) {
              a = color.a;
          }
      }
      a = boundAlpha(a);
      return {
          ok: ok,
          format: color.format || format,
          r: Math.min(255, Math.max(rgb.r, 0)),
          g: Math.min(255, Math.max(rgb.g, 0)),
          b: Math.min(255, Math.max(rgb.b, 0)),
          a: a,
      };
  }
  // <http://www.w3.org/TR/css3-values/#integers>
  var CSS_INTEGER = '[-\\+]?\\d+%?';
  // <http://www.w3.org/TR/css3-values/#number-value>
  var CSS_NUMBER = '[-\\+]?\\d*\\.\\d+%?';
  // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.
  var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";
  // Actual matching.
  // Parentheses and commas are optional, but not required.
  // Whitespace can take the place of commas or opening paren
  var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
  var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
  var matchers = {
      CSS_UNIT: new RegExp(CSS_UNIT),
      rgb: new RegExp('rgb' + PERMISSIVE_MATCH3),
      rgba: new RegExp('rgba' + PERMISSIVE_MATCH4),
      hsl: new RegExp('hsl' + PERMISSIVE_MATCH3),
      hsla: new RegExp('hsla' + PERMISSIVE_MATCH4),
      hsv: new RegExp('hsv' + PERMISSIVE_MATCH3),
      hsva: new RegExp('hsva' + PERMISSIVE_MATCH4),
      hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
      hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
      hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
      hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
  };
  /**
   * Permissive string parsing.  Take in a number of formats, and output an object
   * based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`
   */
  function stringInputToObject(color) {
      color = color.trim().toLowerCase();
      if (color.length === 0) {
          return false;
      }
      var named = false;
      if (names[color]) {
          color = names[color];
          named = true;
      }
      else if (color === 'transparent') {
          return { r: 0, g: 0, b: 0, a: 0, format: 'name' };
      }
      // Try to match string input using regular expressions.
      // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
      // Just return an object and let the conversion functions handle that.
      // This way the result will be the same whether the tinycolor is initialized with string or object.
      var match = matchers.rgb.exec(color);
      if (match) {
          return { r: match[1], g: match[2], b: match[3] };
      }
      match = matchers.rgba.exec(color);
      if (match) {
          return { r: match[1], g: match[2], b: match[3], a: match[4] };
      }
      match = matchers.hsl.exec(color);
      if (match) {
          return { h: match[1], s: match[2], l: match[3] };
      }
      match = matchers.hsla.exec(color);
      if (match) {
          return { h: match[1], s: match[2], l: match[3], a: match[4] };
      }
      match = matchers.hsv.exec(color);
      if (match) {
          return { h: match[1], s: match[2], v: match[3] };
      }
      match = matchers.hsva.exec(color);
      if (match) {
          return { h: match[1], s: match[2], v: match[3], a: match[4] };
      }
      match = matchers.hex8.exec(color);
      if (match) {
          return {
              r: parseIntFromHex(match[1]),
              g: parseIntFromHex(match[2]),
              b: parseIntFromHex(match[3]),
              a: convertHexToDecimal(match[4]),
              format: named ? 'name' : 'hex8',
          };
      }
      match = matchers.hex6.exec(color);
      if (match) {
          return {
              r: parseIntFromHex(match[1]),
              g: parseIntFromHex(match[2]),
              b: parseIntFromHex(match[3]),
              format: named ? 'name' : 'hex',
          };
      }
      match = matchers.hex4.exec(color);
      if (match) {
          return {
              r: parseIntFromHex(match[1] + match[1]),
              g: parseIntFromHex(match[2] + match[2]),
              b: parseIntFromHex(match[3] + match[3]),
              a: convertHexToDecimal(match[4] + match[4]),
              format: named ? 'name' : 'hex8',
          };
      }
      match = matchers.hex3.exec(color);
      if (match) {
          return {
              r: parseIntFromHex(match[1] + match[1]),
              g: parseIntFromHex(match[2] + match[2]),
              b: parseIntFromHex(match[3] + match[3]),
              format: named ? 'name' : 'hex',
          };
      }
      return false;
  }
  /**
   * Check to see if it looks like a CSS unit
   * (see `matchers` above for definition).
   */
  function isValidCSSUnit(color) {
      return Boolean(matchers.CSS_UNIT.exec(String(color)));
  }

  var TinyColor = /** @class */ (function () {
      function TinyColor(color, opts) {
          if (color === void 0) { color = ''; }
          if (opts === void 0) { opts = {}; }
          var _a;
          // If input is already a tinycolor, return itself
          if (color instanceof TinyColor) {
              // eslint-disable-next-line no-constructor-return
              return color;
          }
          if (typeof color === 'number') {
              color = numberInputToObject(color);
          }
          this.originalInput = color;
          var rgb = inputToRGB(color);
          this.originalInput = color;
          this.r = rgb.r;
          this.g = rgb.g;
          this.b = rgb.b;
          this.a = rgb.a;
          this.roundA = Math.round(100 * this.a) / 100;
          this.format = (_a = opts.format) !== null && _a !== void 0 ? _a : rgb.format;
          this.gradientType = opts.gradientType;
          // Don't let the range of [0,255] come back in [0,1].
          // Potentially lose a little bit of precision here, but will fix issues where
          // .5 gets interpreted as half of the total, instead of half of 1
          // If it was supposed to be 128, this was already taken care of by `inputToRgb`
          if (this.r < 1) {
              this.r = Math.round(this.r);
          }
          if (this.g < 1) {
              this.g = Math.round(this.g);
          }
          if (this.b < 1) {
              this.b = Math.round(this.b);
          }
          this.isValid = rgb.ok;
      }
      TinyColor.prototype.isDark = function () {
          return this.getBrightness() < 128;
      };
      TinyColor.prototype.isLight = function () {
          return !this.isDark();
      };
      /**
       * Returns the perceived brightness of the color, from 0-255.
       */
      TinyColor.prototype.getBrightness = function () {
          // http://www.w3.org/TR/AERT#color-contrast
          var rgb = this.toRgb();
          return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
      };
      /**
       * Returns the perceived luminance of a color, from 0-1.
       */
      TinyColor.prototype.getLuminance = function () {
          // http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
          var rgb = this.toRgb();
          var R;
          var G;
          var B;
          var RsRGB = rgb.r / 255;
          var GsRGB = rgb.g / 255;
          var BsRGB = rgb.b / 255;
          if (RsRGB <= 0.03928) {
              R = RsRGB / 12.92;
          }
          else {
              // eslint-disable-next-line prefer-exponentiation-operator
              R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
          }
          if (GsRGB <= 0.03928) {
              G = GsRGB / 12.92;
          }
          else {
              // eslint-disable-next-line prefer-exponentiation-operator
              G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
          }
          if (BsRGB <= 0.03928) {
              B = BsRGB / 12.92;
          }
          else {
              // eslint-disable-next-line prefer-exponentiation-operator
              B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
          }
          return 0.2126 * R + 0.7152 * G + 0.0722 * B;
      };
      /**
       * Returns the alpha value of a color, from 0-1.
       */
      TinyColor.prototype.getAlpha = function () {
          return this.a;
      };
      /**
       * Sets the alpha value on the current color.
       *
       * @param alpha - The new alpha value. The accepted range is 0-1.
       */
      TinyColor.prototype.setAlpha = function (alpha) {
          this.a = boundAlpha(alpha);
          this.roundA = Math.round(100 * this.a) / 100;
          return this;
      };
      /**
       * Returns the object as a HSVA object.
       */
      TinyColor.prototype.toHsv = function () {
          var hsv = rgbToHsv(this.r, this.g, this.b);
          return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this.a };
      };
      /**
       * Returns the hsva values interpolated into a string with the following format:
       * "hsva(xxx, xxx, xxx, xx)".
       */
      TinyColor.prototype.toHsvString = function () {
          var hsv = rgbToHsv(this.r, this.g, this.b);
          var h = Math.round(hsv.h * 360);
          var s = Math.round(hsv.s * 100);
          var v = Math.round(hsv.v * 100);
          return this.a === 1 ? "hsv(" + h + ", " + s + "%, " + v + "%)" : "hsva(" + h + ", " + s + "%, " + v + "%, " + this.roundA + ")";
      };
      /**
       * Returns the object as a HSLA object.
       */
      TinyColor.prototype.toHsl = function () {
          var hsl = rgbToHsl(this.r, this.g, this.b);
          return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this.a };
      };
      /**
       * Returns the hsla values interpolated into a string with the following format:
       * "hsla(xxx, xxx, xxx, xx)".
       */
      TinyColor.prototype.toHslString = function () {
          var hsl = rgbToHsl(this.r, this.g, this.b);
          var h = Math.round(hsl.h * 360);
          var s = Math.round(hsl.s * 100);
          var l = Math.round(hsl.l * 100);
          return this.a === 1 ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + this.roundA + ")";
      };
      /**
       * Returns the hex value of the color.
       * @param allow3Char will shorten hex value to 3 char if possible
       */
      TinyColor.prototype.toHex = function (allow3Char) {
          if (allow3Char === void 0) { allow3Char = false; }
          return rgbToHex(this.r, this.g, this.b, allow3Char);
      };
      /**
       * Returns the hex value of the color -with a # appened.
       * @param allow3Char will shorten hex value to 3 char if possible
       */
      TinyColor.prototype.toHexString = function (allow3Char) {
          if (allow3Char === void 0) { allow3Char = false; }
          return '#' + this.toHex(allow3Char);
      };
      /**
       * Returns the hex 8 value of the color.
       * @param allow4Char will shorten hex value to 4 char if possible
       */
      TinyColor.prototype.toHex8 = function (allow4Char) {
          if (allow4Char === void 0) { allow4Char = false; }
          return rgbaToHex(this.r, this.g, this.b, this.a, allow4Char);
      };
      /**
       * Returns the hex 8 value of the color -with a # appened.
       * @param allow4Char will shorten hex value to 4 char if possible
       */
      TinyColor.prototype.toHex8String = function (allow4Char) {
          if (allow4Char === void 0) { allow4Char = false; }
          return '#' + this.toHex8(allow4Char);
      };
      /**
       * Returns the object as a RGBA object.
       */
      TinyColor.prototype.toRgb = function () {
          return {
              r: Math.round(this.r),
              g: Math.round(this.g),
              b: Math.round(this.b),
              a: this.a,
          };
      };
      /**
       * Returns the RGBA values interpolated into a string with the following format:
       * "RGBA(xxx, xxx, xxx, xx)".
       */
      TinyColor.prototype.toRgbString = function () {
          var r = Math.round(this.r);
          var g = Math.round(this.g);
          var b = Math.round(this.b);
          return this.a === 1 ? "rgb(" + r + ", " + g + ", " + b + ")" : "rgba(" + r + ", " + g + ", " + b + ", " + this.roundA + ")";
      };
      /**
       * Returns the object as a RGBA object.
       */
      TinyColor.prototype.toPercentageRgb = function () {
          var fmt = function (x) { return Math.round(bound01(x, 255) * 100) + "%"; };
          return {
              r: fmt(this.r),
              g: fmt(this.g),
              b: fmt(this.b),
              a: this.a,
          };
      };
      /**
       * Returns the RGBA relative values interpolated into a string
       */
      TinyColor.prototype.toPercentageRgbString = function () {
          var rnd = function (x) { return Math.round(bound01(x, 255) * 100); };
          return this.a === 1
              ? "rgb(" + rnd(this.r) + "%, " + rnd(this.g) + "%, " + rnd(this.b) + "%)"
              : "rgba(" + rnd(this.r) + "%, " + rnd(this.g) + "%, " + rnd(this.b) + "%, " + this.roundA + ")";
      };
      /**
       * The 'real' name of the color -if there is one.
       */
      TinyColor.prototype.toName = function () {
          if (this.a === 0) {
              return 'transparent';
          }
          if (this.a < 1) {
              return false;
          }
          var hex = '#' + rgbToHex(this.r, this.g, this.b, false);
          for (var _i = 0, _a = Object.entries(names); _i < _a.length; _i++) {
              var _b = _a[_i], key = _b[0], value = _b[1];
              if (hex === value) {
                  return key;
              }
          }
          return false;
      };
      TinyColor.prototype.toString = function (format) {
          var formatSet = Boolean(format);
          format = format !== null && format !== void 0 ? format : this.format;
          var formattedString = false;
          var hasAlpha = this.a < 1 && this.a >= 0;
          var needsAlphaFormat = !formatSet && hasAlpha && (format.startsWith('hex') || format === 'name');
          if (needsAlphaFormat) {
              // Special case for "transparent", all other non-alpha formats
              // will return rgba when there is transparency.
              if (format === 'name' && this.a === 0) {
                  return this.toName();
              }
              return this.toRgbString();
          }
          if (format === 'rgb') {
              formattedString = this.toRgbString();
          }
          if (format === 'prgb') {
              formattedString = this.toPercentageRgbString();
          }
          if (format === 'hex' || format === 'hex6') {
              formattedString = this.toHexString();
          }
          if (format === 'hex3') {
              formattedString = this.toHexString(true);
          }
          if (format === 'hex4') {
              formattedString = this.toHex8String(true);
          }
          if (format === 'hex8') {
              formattedString = this.toHex8String();
          }
          if (format === 'name') {
              formattedString = this.toName();
          }
          if (format === 'hsl') {
              formattedString = this.toHslString();
          }
          if (format === 'hsv') {
              formattedString = this.toHsvString();
          }
          return formattedString || this.toHexString();
      };
      TinyColor.prototype.toNumber = function () {
          return (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + Math.round(this.b);
      };
      TinyColor.prototype.clone = function () {
          return new TinyColor(this.toString());
      };
      /**
       * Lighten the color a given amount. Providing 100 will always return white.
       * @param amount - valid between 1-100
       */
      TinyColor.prototype.lighten = function (amount) {
          if (amount === void 0) { amount = 10; }
          var hsl = this.toHsl();
          hsl.l += amount / 100;
          hsl.l = clamp01(hsl.l);
          return new TinyColor(hsl);
      };
      /**
       * Brighten the color a given amount, from 0 to 100.
       * @param amount - valid between 1-100
       */
      TinyColor.prototype.brighten = function (amount) {
          if (amount === void 0) { amount = 10; }
          var rgb = this.toRgb();
          rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));
          rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));
          rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));
          return new TinyColor(rgb);
      };
      /**
       * Darken the color a given amount, from 0 to 100.
       * Providing 100 will always return black.
       * @param amount - valid between 1-100
       */
      TinyColor.prototype.darken = function (amount) {
          if (amount === void 0) { amount = 10; }
          var hsl = this.toHsl();
          hsl.l -= amount / 100;
          hsl.l = clamp01(hsl.l);
          return new TinyColor(hsl);
      };
      /**
       * Mix the color with pure white, from 0 to 100.
       * Providing 0 will do nothing, providing 100 will always return white.
       * @param amount - valid between 1-100
       */
      TinyColor.prototype.tint = function (amount) {
          if (amount === void 0) { amount = 10; }
          return this.mix('white', amount);
      };
      /**
       * Mix the color with pure black, from 0 to 100.
       * Providing 0 will do nothing, providing 100 will always return black.
       * @param amount - valid between 1-100
       */
      TinyColor.prototype.shade = function (amount) {
          if (amount === void 0) { amount = 10; }
          return this.mix('black', amount);
      };
      /**
       * Desaturate the color a given amount, from 0 to 100.
       * Providing 100 will is the same as calling greyscale
       * @param amount - valid between 1-100
       */
      TinyColor.prototype.desaturate = function (amount) {
          if (amount === void 0) { amount = 10; }
          var hsl = this.toHsl();
          hsl.s -= amount / 100;
          hsl.s = clamp01(hsl.s);
          return new TinyColor(hsl);
      };
      /**
       * Saturate the color a given amount, from 0 to 100.
       * @param amount - valid between 1-100
       */
      TinyColor.prototype.saturate = function (amount) {
          if (amount === void 0) { amount = 10; }
          var hsl = this.toHsl();
          hsl.s += amount / 100;
          hsl.s = clamp01(hsl.s);
          return new TinyColor(hsl);
      };
      /**
       * Completely desaturates a color into greyscale.
       * Same as calling `desaturate(100)`
       */
      TinyColor.prototype.greyscale = function () {
          return this.desaturate(100);
      };
      /**
       * Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
       * Values outside of this range will be wrapped into this range.
       */
      TinyColor.prototype.spin = function (amount) {
          var hsl = this.toHsl();
          var hue = (hsl.h + amount) % 360;
          hsl.h = hue < 0 ? 360 + hue : hue;
          return new TinyColor(hsl);
      };
      /**
       * Mix the current color a given amount with another color, from 0 to 100.
       * 0 means no mixing (return current color).
       */
      TinyColor.prototype.mix = function (color, amount) {
          if (amount === void 0) { amount = 50; }
          var rgb1 = this.toRgb();
          var rgb2 = new TinyColor(color).toRgb();
          var p = amount / 100;
          var rgba = {
              r: (rgb2.r - rgb1.r) * p + rgb1.r,
              g: (rgb2.g - rgb1.g) * p + rgb1.g,
              b: (rgb2.b - rgb1.b) * p + rgb1.b,
              a: (rgb2.a - rgb1.a) * p + rgb1.a,
          };
          return new TinyColor(rgba);
      };
      TinyColor.prototype.analogous = function (results, slices) {
          if (results === void 0) { results = 6; }
          if (slices === void 0) { slices = 30; }
          var hsl = this.toHsl();
          var part = 360 / slices;
          var ret = [this];
          for (hsl.h = (hsl.h - ((part * results) >> 1) + 720) % 360; --results;) {
              hsl.h = (hsl.h + part) % 360;
              ret.push(new TinyColor(hsl));
          }
          return ret;
      };
      /**
       * taken from https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js
       */
      TinyColor.prototype.complement = function () {
          var hsl = this.toHsl();
          hsl.h = (hsl.h + 180) % 360;
          return new TinyColor(hsl);
      };
      TinyColor.prototype.monochromatic = function (results) {
          if (results === void 0) { results = 6; }
          var hsv = this.toHsv();
          var h = hsv.h;
          var s = hsv.s;
          var v = hsv.v;
          var res = [];
          var modification = 1 / results;
          while (results--) {
              res.push(new TinyColor({ h: h, s: s, v: v }));
              v = (v + modification) % 1;
          }
          return res;
      };
      TinyColor.prototype.splitcomplement = function () {
          var hsl = this.toHsl();
          var h = hsl.h;
          return [
              this,
              new TinyColor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l }),
              new TinyColor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l }),
          ];
      };
      /**
       * Compute how the color would appear on a background
       */
      TinyColor.prototype.onBackground = function (background) {
          var fg = this.toRgb();
          var bg = new TinyColor(background).toRgb();
          return new TinyColor({
              r: bg.r + (fg.r - bg.r) * fg.a,
              g: bg.g + (fg.g - bg.g) * fg.a,
              b: bg.b + (fg.b - bg.b) * fg.a,
          });
      };
      /**
       * Alias for `polyad(3)`
       */
      TinyColor.prototype.triad = function () {
          return this.polyad(3);
      };
      /**
       * Alias for `polyad(4)`
       */
      TinyColor.prototype.tetrad = function () {
          return this.polyad(4);
      };
      /**
       * Get polyad colors, like (for 1, 2, 3, 4, 5, 6, 7, 8, etc...)
       * monad, dyad, triad, tetrad, pentad, hexad, heptad, octad, etc...
       */
      TinyColor.prototype.polyad = function (n) {
          var hsl = this.toHsl();
          var h = hsl.h;
          var result = [this];
          var increment = 360 / n;
          for (var i = 1; i < n; i++) {
              result.push(new TinyColor({ h: (h + i * increment) % 360, s: hsl.s, l: hsl.l }));
          }
          return result;
      };
      /**
       * compare color vs current color
       */
      TinyColor.prototype.equals = function (color) {
          return this.toRgbString() === new TinyColor(color).toRgbString();
      };
      return TinyColor;
  }());

  // Readability Functions
  // ---------------------
  // <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)
  /**
   * AKA `contrast`
   *
   * Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)
   */
  function readability(color1, color2) {
      var c1 = new TinyColor(color1);
      var c2 = new TinyColor(color2);
      return ((Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) /
          (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05));
  }
  /**
   * Ensure that foreground and background color combinations meet WCAG2 guidelines.
   * The third argument is an object.
   *      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';
   *      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.
   * If the entire object is absent, isReadable defaults to {level:"AA",size:"small"}.
   *
   * Example
   * ```ts
   * new TinyColor().isReadable('#000', '#111') => false
   * new TinyColor().isReadable('#000', '#111', { level: 'AA', size: 'large' }) => false
   * ```
   */
  function isReadable(color1, color2, wcag2) {
      var _a, _b;
      if (wcag2 === void 0) { wcag2 = { level: 'AA', size: 'small' }; }
      var readabilityLevel = readability(color1, color2);
      switch (((_a = wcag2.level) !== null && _a !== void 0 ? _a : 'AA') + ((_b = wcag2.size) !== null && _b !== void 0 ? _b : 'small')) {
          case 'AAsmall':
          case 'AAAlarge':
              return readabilityLevel >= 4.5;
          case 'AAlarge':
              return readabilityLevel >= 3;
          case 'AAAsmall':
              return readabilityLevel >= 7;
          default:
              return false;
      }
  }

  const NATIVELY_DISABLEABLE = Object.freeze({
      BUTTON: true,
      FIELDSET: true,
      INPUT: true,
      OPTGROUP: true,
      OPTION: true,
      SELECT: true,
      TEXTAREA: true
  });

  var NODE_TYPE;
  (function (NODE_TYPE) {
      NODE_TYPE[NODE_TYPE["ATTRIBUTE_NODE"] = 2] = "ATTRIBUTE_NODE";
      NODE_TYPE[NODE_TYPE["CDATA_SECTION_NODE"] = 4] = "CDATA_SECTION_NODE";
      NODE_TYPE[NODE_TYPE["COMMENT_NODE"] = 8] = "COMMENT_NODE";
      NODE_TYPE[NODE_TYPE["DOCUMENT_FRAGMENT_NODE"] = 11] = "DOCUMENT_FRAGMENT_NODE";
      NODE_TYPE[NODE_TYPE["DOCUMENT_NODE"] = 9] = "DOCUMENT_NODE";
      NODE_TYPE[NODE_TYPE["DOCUMENT_TYPE_NODE"] = 10] = "DOCUMENT_TYPE_NODE";
      NODE_TYPE[NODE_TYPE["ELEMENT_NODE"] = 1] = "ELEMENT_NODE";
      NODE_TYPE[NODE_TYPE["PROCESSING_INSTRUCTION_NODE"] = 7] = "PROCESSING_INSTRUCTION_NODE";
      NODE_TYPE[NODE_TYPE["TEXT_NODE"] = 3] = "TEXT_NODE";
  })(NODE_TYPE || (NODE_TYPE = {}));

  class Env {
      static get isTest() {
          return typeof jest !== 'undefined';
      }
  }

  class Css {
      constructor() { }
      static get floatStyle() {
          return typeof document.documentElement.style.cssFloat === 'string' ? 'cssFloat' : 'styleFloat';
      }
      static getComputedStyle(element, pseudoElt) {
          if (ObjectUtility.isHtmlElement(element)) {
              return document && document.defaultView && document.defaultView.getComputedStyle(element, pseudoElt || null);
          }
          return null;
      }
      static getStyle(element, styleProp, pseudoElt) {
          const isHtmlElement = ObjectUtility.isHtmlElement(element);
          if (isHtmlElement === false) {
              return null;
          }
          if (ObjectUtility.isHostMethod(window, 'getComputedStyle')) {
              return window.getComputedStyle(element, pseudoElt || null).getPropertyValue(styleProp);
          }
          if (ObjectUtility.isRealObjectProperty(document, 'defaultView')) {
              return document && document.defaultView && document.defaultView.getComputedStyle(element, pseudoElt || null).getPropertyValue(styleProp);
          }
          return null;
      }
      static setStyle(element, style, value) {
          let styleProp = style;
          if (styleProp === 'float') {
              styleProp = Css.floatStyle;
          }
          element.style.setProperty(styleProp, value);
      }
      static getSize(element) {
          return element.getBoundingClientRect();
      }
      static getBackgroundColor(element) {
          let node = element;
          const backgroundStyle = Css.getStyle(node, 'background-color');
          if (backgroundStyle === null) {
              console.warn('[Css.getBackgroundColor] CSS style background color is not available for element', element);
              return new TinyColor('transparent');
          }
          let color = new TinyColor(backgroundStyle);
          if (color.toName() !== 'transparent') {
              return color;
          }
          while (CommonUtility.isHtmlDocument(node) === false) {
              const backgroundColorStyle = Css.getStyle(node, 'background-color');
              color = typeof backgroundColorStyle === 'string' ? new TinyColor(backgroundColorStyle) : new TinyColor('transparent');
              if (color.toName() !== 'transparent') {
                  return color;
              }
              node = node.parentNode;
          }
          if (CommonUtility.isHtmlDocument(node)) {
              color = new TinyColor('transparent');
          }
          return color;
      }
      static getElementBackgroundImage(element, includeParents = false) {
          const elementStyles = Css.getComputedStyle(element);
          if (elementStyles === null) {
              return null;
          }
          if (typeof elementStyles.backgroundImage !== 'string' || ['', 'none'].includes(elementStyles.backgroundImage.trim()) === false) {
              return elementStyles.backgroundImage;
          }
          if (includeParents) {
              let currentElement = element.parentElement;
              while (currentElement !== null) {
                  const styles = Css.getComputedStyle(currentElement);
                  if (styles) {
                      if (typeof styles.backgroundImage !== 'string' || ['', 'none'].includes(styles.backgroundImage.trim()) === false) {
                          return styles.backgroundImage;
                      }
                  }
                  currentElement = currentElement.parentElement;
              }
          }
          return null;
      }
      static getActualDPI() {
          if (Env.isTest) {
              return 96;
          }
          if (typeof this.cachedDPI === 'number') {
              return this.cachedDPI;
          }
          const dpiTestElement = document.createElement('div');
          dpiTestElement.style.position = 'fixed';
          dpiTestElement.style.top = '-999999px';
          dpiTestElement.style.left = '-999999px';
          dpiTestElement.style.width = '1in';
          dpiTestElement.style.height = '1in';
          document.body.appendChild(dpiTestElement);
          const elementWidthStyle = Css.getStyle(dpiTestElement, 'width');
          const elementHeightStyle = Css.getStyle(dpiTestElement, 'height');
          if (elementWidthStyle === null || elementHeightStyle === null) {
              this.cachedDPI = 0;
          }
          else {
              this.cachedDPI = (parseInt(elementWidthStyle, 10) + parseInt(elementHeightStyle, 10)) / 2;
          }
          dpiTestElement.remove();
          const clearCachedDPI = () => {
              this.cachedDPI = null;
          };
          Async.run(clearCachedDPI, this, 1000);
          return this.cachedDPI;
      }
      static covertPtToPx(val, considerDPI = false) {
          const dpi = considerDPI ? this.getActualDPI() : 96;
          return typeof val === 'number' || val.endsWith('px') === false ? Math.round((parseInt(val.toString(), 10) * dpi) / 72) : parseInt(val.toString(), 10);
      }
      static covertPxToPt(val, considerDPI = false) {
          const dpi = (considerDPI ? this.getActualDPI() : 96);
          return typeof val === 'number' || val.endsWith('pt') === false ? Math.round((parseInt(val.toString(), 10) * 72) / dpi) : parseInt(val.toString(), 10);
      }
      static isLargeText(element) {
          const elementFontSize = Css.getStyle(element, 'font-size');
          if (elementFontSize === null) {
              return false;
          }
          const elementFontWeight = Css.getStyle(element, 'font-weight');
          const fontSizePt = Css.covertPxToPt(elementFontSize, true);
          const isFontBold = elementFontWeight !== null && (elementFontWeight === 'bold' || parseInt(elementFontWeight, 10) >= 700);
          return isFontBold && fontSizePt >= 14 || fontSizePt >= 18;
      }
      static isCssTextTransformUsed(element) {
          return Css.getStyle(element, 'text-transform') === 'uppercase' || typeof element.style === 'object' && element.style.textTransform.toLowerCase() === 'uppercase';
      }
  }
  Css.cachedDPI = null;

  const SP = ' ';
  const TAB = '\t';
  const CR = '\r';
  const LF = '\n';
  const CR_LF = '\r\n';
  const FF = '\f';
  const ZERO_WIDTH_SPACE = '\v' +
      '\f' +
      '\u200B\u200C\u200D\u200E\u200F\u000b\u2028\u2029\uFEFF\u202D';
  const OTHER_SPACE = '\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000';
  const ALL_SPACES = SP + TAB + CR + LF + CR_LF + ZERO_WIDTH_SPACE + OTHER_SPACE;
  const leftReg = new RegExp(`^[${ALL_SPACES}]+`);
  const rightReg = new RegExp(`[${ALL_SPACES}]+$`);
  const zeroReg = new RegExp(`[${ZERO_WIDTH_SPACE}]+`, 'g');
  const otherReg = new RegExp(`[${OTHER_SPACE}]+`, 'g');
  const space = new RegExp(`^[${SP + TAB + LF + FF + CR}]+$`);
  class TextUtility {
      static trim(text) {
          if (TextUtility.isNativeTrimAvailable) {
              return text.trim();
          }
          return text.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
      }
      static truncateWords(str, numberOfChars) {
          const amount = numberOfChars ? numberOfChars : 50;
          const cut = str.indexOf(' ', amount);
          if (cut === -1) {
              return str;
          }
          return `${str.substring(0, cut)} [...]`;
      }
      static truncate(str, numberOfChars) {
          const amount = numberOfChars ? numberOfChars : 50;
          return `${str.substring(0, amount)} [...]`;
      }
      static truncateInTheMiddle(text, startChars, endChars, maxLength) {
          let start;
          let end;
          const charsAtTheBeginning = startChars || 70;
          const charsAtTheEnd = endChars || 70;
          const maximumLength = maxLength || 120;
          const content = text.trim();
          if (content.length > maximumLength) {
              start = content.substring(0, charsAtTheBeginning);
              end = content.substring(content.length - charsAtTheEnd, content.length);
              return `${start} [...] ${end}`;
          }
          return text;
      }
      static isUpperCase(str) {
          if ((/[^\w]/).test(str)) {
              return false;
          }
          if (isNaN(Number(str)) && str.length > 1) {
              return str === str.toUpperCase();
          }
          return false;
      }
      static containsOnlyWhiteSpaces(str) {
          return (/^\s*$/).test(str);
      }
      static containsSpaceCharacter(str) {
          return space.test(str);
      }
      static safeTrim(string) {
          return string
              .replace(leftReg, '')
              .replace(rightReg, '')
              .replace(new RegExp(TAB, 'g'), '')
              .replace(new RegExp(CR_LF, 'g'), LF)
              .replace(new RegExp(CR, 'g'), LF)
              .replace(zeroReg, '')
              .replace(otherReg, '')
              .trim();
      }
      static escape(str) {
          const fromEntityMap = (s) => {
              return this.escapeEntityMap[s];
          };
          return String(str).replace(/[&<>"'`=/]/g, fromEntityMap);
      }
      static unescape(str) {
          const fromEntityMap = (s) => {
              return this.unescapeEntityMap[s];
          };
          return String(str).replace(/&([^;]+);/g, fromEntityMap);
      }
      static convertUnderscoresToDashes(text) {
          return text.replace(/_/g, '-');
      }
      static convertDashesToUnderscores(text) {
          return text.replace(/-/g, '_');
      }
      static replacePlaceholder(text, words, placeholder = '%') {
          const replaceValue = (result, value, i) => {
              return result.replace(`${placeholder}${i}`, String(value));
          };
          return words.reduce(replaceValue, text);
      }
      static areStringsTheSame(str1, str2) {
          return str1.toLocaleUpperCase() === str2.toLocaleUpperCase();
      }
  }
  TextUtility.isNativeTrimAvailable = String.prototype.trim && ObjectUtility.isNativeMethod(String.prototype.trim);
  TextUtility.escapeEntityMap = {
      '"': '&quot;',
      '&': '&amp;',
      '\'': '&#39;',
      '/': '&#x2F;',
      '<': '&lt;',
      '=': '&#x3D;',
      '>': '&gt;',
      '`': '&#x60;'
  };
  TextUtility.unescapeEntityMap = {
      '&#39;': '\'',
      '&#x2F;': '/',
      '&#x3D;': '=',
      '&#x60;': '`',
      '&amp;': '&',
      '&gt;': '>',
      '&lt;': '<',
      '&quot;': '"'
  };

  class DomUtility {
      static isNativelyDisableable(element) {
          return element.nodeName.toUpperCase() in NATIVELY_DISABLEABLE;
      }
      static getSelectedOption(select) {
          const options = select.options;
          const len = options.length - 1;
          for (let i = 0; i < len; i += 1) {
              if (options[i].selected) {
                  return options[i];
              }
          }
          return null;
      }
      static getText(node, filterEmpty = false, safeTrim = false) {
          const element = node;
          const notFound = '';
          const nodeList = [];
          if (ObjectUtility.isHtmlElement(element) === false) {
              return notFound;
          }
          let filterCallback = null;
          if (filterEmpty) {
              if (safeTrim) {
                  filterCallback = {
                      acceptNode: (_node) => {
                          return (TextUtility.safeTrim(_node.nodeValue).length > 0) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;
                      }
                  };
              }
              else {
                  filterCallback = {
                      acceptNode: (_node) => {
                          return (_node.nodeValue.trim().length > 0) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;
                      }
                  };
              }
          }
          const treeWalker = document.createTreeWalker(element, NodeFilter.SHOW_TEXT, filterCallback);
          while (treeWalker.nextNode()) {
              nodeList.push(treeWalker.currentNode.data);
          }
          return nodeList.join('');
      }
      static getTextFromNode(node) {
          let text = '';
          let option;
          switch (node.nodeName.toLowerCase()) {
              case 'img':
              case 'area':
                  if (node.alt && node.alt.length) {
                      text += node.alt;
                  }
                  break;
              case 'input':
              case 'output':
              case 'textarea':
                  if (node.type === 'email' ||
                      node.type === 'number' ||
                      node.type === 'text' ||
                      node.type === 'textarea') {
                      text += node.value;
                  }
                  else if (node.type === 'image' &&
                      typeof node.alt === 'string' &&
                      node.alt.length) {
                      text += node.alt;
                  }
                  break;
              case 'select':
                  option = DomUtility.getSelectedOption(node);
                  text += DomUtility.getText(option);
                  break;
          }
          return text;
      }
      static getTextFromNodes(nodes) {
          const len = nodes ? nodes.length : 0;
          let node;
          let text = '';
          for (let i = 0; i < len; i += 1) {
              node = nodes[i];
              if (node.nodeType === NODE_TYPE.TEXT_NODE) {
                  text += node.data;
              }
              else if (node.nodeType === NODE_TYPE.ELEMENT_NODE) {
                  switch (node.nodeName.toLowerCase()) {
                      case 'img':
                      case 'area':
                      case 'input':
                      case 'output':
                      case 'textarea':
                      case 'select':
                          text += DomUtility.getTextFromNode(node);
                          break;
                      default:
                          if (nodes[i].childNodes) {
                              text += DomUtility.getTextFromNodes(nodes[i].childNodes);
                          }
                          break;
                  }
              }
          }
          return text;
      }
      static testRegExp(re, string) {
          return DomUtility.regExpTest.call(re, string);
      }
      static isWhitespace(str) {
          if (typeof str !== 'string') {
              console.warn(`[DomUtility.isWhitespace] Invalid str type (got: ${typeof str})`);
              return false;
          }
          return !DomUtility.testRegExp(DomUtility.nonSpaceRe, str);
      }
      static isWhitespaceText(node) {
          return node.nodeType === NODE_TYPE.TEXT_NODE && DomUtility.isWhitespace(node.nodeValue);
      }
      static getBodyElement() {
          return document.body ? document.body : document.getElementsByTagName('body')[0];
      }
      static isEmptyElement(element) {
          let node = element.firstChild;
          while (node) {
              if (DomUtility.isWhitespaceText(node) === false) {
                  return false;
              }
              node = node.nextSibling;
          }
          return true;
      }
      static getParentElement(element, nodeName) {
          let parent = element;
          if (typeof nodeName !== 'string') {
              return null;
          }
          while (parent && parent.nodeName) {
              if (parent.nodeName && parent.nodeName.toLowerCase() === nodeName) {
                  return parent;
              }
              parent = parent.parentElement;
          }
          return null;
      }
      static getHighestZindex() {
          const elms = document.getElementsByTagName('*');
          const len = elms.length;
          const zIndexes = [];
          let zIndex;
          for (let i = 0; i < len; i += 1) {
              zIndex = Css.getStyle(elms[i], 'z-index');
              if (zIndex !== null && zIndex !== 'auto') {
                  zIndexes.push(Number(zIndex));
              }
          }
          if (zIndexes.length === 0) {
              return 0;
          }
          return Math.max(...zIndexes);
      }
      static contains(parentNode, childNode) {
          if (ObjectUtility.isHtmlElement(parentNode) === false) {
              return false;
          }
          if (ObjectUtility.isHostMethod(parentNode, 'contains')) {
              return parentNode.contains(childNode);
          }
          return Boolean(parentNode.compareDocumentPosition(childNode) & Node.DOCUMENT_POSITION_FOLLOWING);
      }
      static querySelectorAll(selector, context) {
          let result = context ? context.querySelectorAll(selector) : document.querySelectorAll(selector);
          if (result) {
              result = Array.from(result);
          }
          return result;
      }
      static querySelectorAllExclude(selector, context, excludeContainers, excludeElements) {
          const queryResults = context ? context.querySelectorAll(selector) : document.querySelectorAll(selector);
          let _excludeContainers = [];
          if (Array.isArray(excludeContainers)) {
              _excludeContainers = excludeContainers;
          }
          else if (excludeContainers) {
              _excludeContainers = [excludeContainers];
          }
          let _excludeElements = [];
          if (Array.isArray(excludeElements)) {
              _excludeElements = excludeElements;
          }
          else if (excludeElements) {
              _excludeElements = [excludeElements];
          }
          let result = Array.from(queryResults);
          if (queryResults.length === 0) {
              return result;
          }
          const excludedElements = (node) => {
              const foundedEl = node.proxiedNode || node;
              const findElement = (excludedElement) => {
                  return foundedEl === excludedElement;
              };
              const index = _excludeElements.findIndex(findElement);
              return index === -1;
          };
          const excludeFromContainers = (node) => {
              const foundedEl = node.proxiedNode || node;
              const findElement = (containerFromExclude) => {
                  if (containerFromExclude === null) {
                      return false;
                  }
                  return DomUtility.contains(containerFromExclude, foundedEl);
              };
              const index = _excludeContainers.findIndex(findElement);
              return index === -1;
          };
          const excludeContainersItself = (node) => {
              const foundedEl = node.proxiedNode || node;
              const findElement = (containerFromExclude) => {
                  return foundedEl === containerFromExclude;
              };
              const index = _excludeContainers.findIndex(findElement);
              return index === -1;
          };
          result = result.filter(excludeFromContainers).filter(excludeContainersItself)
              .filter(excludedElements);
          return result;
      }
      static getOuterDimensions(el) {
          const dimensions = {
              height: 0,
              width: 0
          };
          if (document.documentElement && typeof document.documentElement.offsetWidth === 'number') {
              dimensions.height = el.offsetHeight;
              dimensions.width = el.offsetWidth;
          }
          return dimensions;
      }
      static getInnerDimensions(el) {
          const dimensions = {
              height: 0,
              width: 0
          };
          if (document.documentElement && typeof document.documentElement.clientWidth === 'number') {
              dimensions.height = el.clientHeight;
              dimensions.width = el.clientWidth;
          }
          return dimensions;
      }
      static createCSS(content, id, media) {
          if (content === null) {
              throw new Error(`[DomUtility.createCSS] passed content is not a string. Is type ${typeof content}`);
          }
          const head = document.head;
          const style = document.createElement('style');
          if (typeof id === 'string') {
              style.id = id;
          }
          if (typeof media === 'string' && media.length > 0) {
              style.setAttribute('media', media);
          }
          if (typeof style['styleSheet'] === 'object') {
              style['styleSheet'].cssText = content;
          }
          else {
              style.appendChild(document.createTextNode(content));
          }
          head.appendChild(style);
          return style;
      }
      static getInnerHTML(element) {
          return element.innerHTML;
      }
      static getOuterHTML(element) {
          const clone = element.cloneNode(false);
          return clone.outerHTML;
      }
      static getNodeHTML(element) {
          return element.outerHTML;
      }
      static getEscapedNodeHTML(element) {
          return TextUtility.escape(DomUtility.getNodeHTML(element));
      }
      static getEscapedInnerHTML(element) {
          return TextUtility.escape(DomUtility.getInnerHTML(element));
      }
      static getEscapedOuterHTML(element) {
          if (element) {
              return TextUtility.escape(DomUtility.getOuterHTML(element));
          }
          return '';
      }
      static getEscapedOuterTruncatedHTML(element) {
          if (element) {
              const tags = DomUtility.getOuterHTML(element).split('>');
              let html = '';
              if (tags.length === 3) {
                  html = `${tags[0]}>${TextUtility.truncateInTheMiddle(element.innerHTML)}${tags[1]}>`;
              }
              else if (tags.length === 2) {
                  html = TextUtility.truncateInTheMiddle(element.outerHTML);
              }
              return TextUtility.escape(html);
          }
          return '';
      }
      static nodesToText(node) {
          if (node.childNodes.length > 0) {
              return DomUtility.getTextFromNodes(node.childNodes);
          }
          return DomUtility.getTextFromNode(node);
      }
      static getNodeWithTextContent(node, limitTextContent, toUpperCase) {
          const clone = node.cloneNode(false);
          let innerText = node.textContent;
          if (innerText === null) {
              console.warn(`[DomUtility.getNodeWithTextContent] node.textContent got null value`, node);
              return '';
          }
          if (typeof limitTextContent === 'number') {
              innerText = TextUtility.truncateWords(innerText, limitTextContent);
          }
          if (typeof toUpperCase === 'boolean') {
              innerText = innerText.toUpperCase();
          }
          clone.textContent = innerText;
          return TextUtility.escape(clone.outerHTML);
      }
      static empty(node) {
          while (node.firstChild) {
              node.removeChild(node.firstChild);
          }
          return node;
      }
      static remove(node) {
          if (node && node.parentNode) {
              node.parentNode.removeChild(node);
          }
      }
      static removeScript(url) {
          const scripts = document.scripts;
          const len = scripts.length;
          for (let i = 0; i < len; i += 1) {
              const script = scripts[i];
              if (script.src === url && script.parentNode !== null) {
                  script.parentNode.removeChild(scripts[i]);
                  break;
              }
          }
      }
      static getXPath(el) {
          let element = el;
          let parent;
          let sames;
          let elementType;
          let result = '';
          const filterNode = (_node) => {
              if (_node.nodeName === element.nodeName) {
                  sames.push(_node);
              }
          };
          if (element instanceof Node === false) {
              return result;
          }
          parent = el.parentNode;
          while (parent !== null) {
              elementType = element.nodeType;
              sames = [];
              parent.childNodes.forEach(filterNode);
              if (elementType === NODE_TYPE.ELEMENT_NODE) {
                  const nodeName = element.nodeName.toLowerCase();
                  const name = nodeName === 'svg' ? `*[name()='${nodeName}']` : nodeName;
                  result = `/${name}${sames.length > 1 ? `[${[].indexOf.call(sames, element) + 1}]` : ''}${result}`;
              }
              else if (elementType === NODE_TYPE.TEXT_NODE) {
                  result = `/text()${result}`;
              }
              else if (elementType === NODE_TYPE.ATTRIBUTE_NODE) {
                  result = `/@${element.nodeName.toLowerCase()}${result}`;
              }
              else if (elementType === NODE_TYPE.COMMENT_NODE) {
                  result = `/comment()${result}`;
              }
              element = parent;
              parent = element.parentNode;
          }
          return `./${result}`;
      }
      static setScrollPositionToElement(element) {
          if (ObjectUtility.isHostMethod(element, 'scrollIntoView')) {
              element.scrollIntoView();
              return true;
          }
          return false;
      }
      static firstElementChild(context) {
          return context.firstElementChild;
      }
      static isVisibleForAssistiveTechnologies(el) {
          let ariaLabelledByDestination;
          if (ObjectUtility.isHtmlElement(el) === false) {
              return false;
          }
          const clientRect = el.getBoundingClientRect();
          const ariaHidden = el.getAttribute('aria-hidden');
          const ariaLabel = el.getAttribute('aria-label');
          const ariaLabelledBy = el.getAttribute('aria-labelledby');
          const styles = Css.getComputedStyle(el);
          if (styles === null) {
              return false;
          }
          if (styles.display === 'none' || styles.visibility === 'hidden') {
              return false;
          }
          if (ariaHidden && ariaHidden === 'true') {
              return false;
          }
          if (ariaLabel && ariaLabel.length > 0) {
              return true;
          }
          if (ariaLabelledBy) {
              ariaLabelledByDestination = document.getElementById(ariaLabelledBy);
              if (ariaLabelledByDestination === null) {
                  return false;
              }
          }
          return clientRect.width >= 1 || clientRect.height >= 1;
      }
      static getPageSize() {
          const body = DomUtility.getBodyElement();
          const root = DomUtility.getRootElement();
          const pageHeight = Math.max(body.scrollHeight, body.offsetHeight, root.clientHeight, root.scrollHeight, root.offsetHeight);
          const pageWidth = Math.max(body.scrollWidth, body.offsetWidth, root.clientWidth, root.scrollWidth, root.offsetWidth);
          return {
              height: pageHeight,
              width: pageWidth
          };
      }
      static getElementAttribute(element, attribute) {
          return element.attributes.getNamedItem(attribute);
      }
      static isRangeOffPage(range) {
          const rect = range.getBoundingClientRect();
          const pageSize = DomUtility.getPageSize();
          return ((rect.x + rect.width) < 0 || (rect.y + rect.height) < 0 || (rect.x > pageSize.width || rect.y > pageSize.height));
      }
      static isElementOffPage(element) {
          const rect = element.getBoundingClientRect();
          const pageSize = DomUtility.getPageSize();
          return ((rect.x + rect.width) < 0 || (rect.y + rect.height) < 0 || (rect.x > pageSize.width || rect.y > pageSize.height));
      }
      static isAnyPartOfElementRenderedOnPage(element) {
          const rect = element.getBoundingClientRect();
          const pageSize = DomUtility.getPageSize();
          const verticalInView = (rect.top <= pageSize.height) && ((rect.top + rect.height) >= 0);
          const horizontalInView = (rect.left <= pageSize.width) && ((rect.left + rect.width) >= 0);
          return (verticalInView && horizontalInView);
      }
      static isElementInViewport(element) {
          const clientRect = element.getBoundingClientRect();
          return (clientRect.top >= 0 &&
              clientRect.left >= 0 &&
              clientRect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
              clientRect.right <= (window.innerWidth || document.documentElement.clientWidth));
      }
      static isElementHidden(element) {
          if (!(element instanceof element.ownerDocument.defaultView.HTMLElement)) {
              return false;
          }
          const style = window.getComputedStyle(element, null);
          return style.display === 'none' || style.visibility === 'collapse' || style.visibility === 'hidden' || style.opacity === '0' || element.offsetHeight === 0;
      }
      static isElementVisible(element) {
          if (ObjectUtility.isHtmlElement(element) === false) {
              return false;
          }
          const rect = element.getBoundingClientRect();
          const style = window.getComputedStyle(element, null);
          if (typeof element.hidden === 'boolean' && element.hidden === true) {
              return false;
          }
          if (style.display === 'none') {
              return false;
          }
          if (style.visibility === 'collapse' || style.visibility === 'hidden') {
              return false;
          }
          if (!isNaN(parseFloat(style.opacity)) && Number(style.opacity) < 0.1) {
              return false;
          }
          let elementSize = element.offsetWidth + element.offsetHeight;
          if (typeof rect === 'object' && typeof rect.height === 'number' && typeof rect.width === 'number') {
              elementSize += rect.height + rect.width;
          }
          if (elementSize === 0) {
              return false;
          }
          if (typeof rect === 'object' && typeof rect.height === 'number' && typeof rect.width === 'number' && rect.width === 1 && rect.height === 1 && style.overflow === 'hidden') {
              return false;
          }
          if (DomUtility.isAnyPartOfElementRenderedOnPage(element) === false) {
              return false;
          }
          return true;
      }
      static getRootElement() {
          return document.documentElement || document.getElementsByTagName('html')[0];
      }
      static isHiddenByParent(element) {
          let result = false;
          const root = DomUtility.getRootElement();
          let parent = element;
          while (parent !== root) {
              if (parent && DomUtility.isElementVisible(parent) === false) {
                  result = true;
                  break;
              }
              if (parent === null || parent.parentElement === null) {
                  break;
              }
              parent = parent.parentElement;
          }
          return result;
      }
      static isHiddenForAT(element) {
          let result = false;
          const root = DomUtility.getRootElement();
          let parent = element;
          let ariaHidden = null;
          while (parent !== root) {
              if (parent === null || parent.parentElement === null) {
                  break;
              }
              ariaHidden = parent.getAttribute('aria-hidden');
              if (parent && typeof ariaHidden === 'string' && ariaHidden === 'true') {
                  result = true;
                  break;
              }
              parent = parent.parentElement;
          }
          return result;
      }
      static getTextFromDescendantContent(node) {
          const onlyTextNodes = (previousValue, currentValue, _currentIndex, _array) => {
              if (currentValue.nodeType === NODE_TYPE.TEXT_NODE) {
                  previousValue += currentValue.data;
              }
              return previousValue;
          };
          return Array.from(node.childNodes).reduce(onlyTextNodes, '');
      }
      static hasDirectTextDescendant(element) {
          const childs = element.childNodes;
          const len = childs.length;
          let result = false;
          for (let i = 0; i < len; i += 1) {
              if (childs[i].nodeType === NODE_TYPE.TEXT_NODE) {
                  result = true;
                  break;
              }
          }
          return result;
      }
      static isElementDisabled(element) {
          let parent = element;
          if (element.matches('[aria-disabled=true], [aria-disabled=true] *')) {
              return true;
          }
          if (!DomUtility.isNativelyDisableable(element)) {
              return false;
          }
          while (parent && parent.nodeName) {
              if (DomUtility.isNativelyDisableable(parent) && parent.hasAttribute('disabled')) {
                  return true;
              }
              if (parent === null || parent.parentNode === null) {
                  break;
              }
              parent = parent.parentNode;
          }
          return false;
      }
      static canSetFocus(element) {
          return ObjectUtility.isHostMethod(element, 'focus');
      }
      static isFocusableElement(element) {
          const originalFocus = document.activeElement;
          let result = false;
          if (originalFocus === null) {
              return result;
          }
          if (typeof element.focus === 'function') {
              element.focus();
              result = element === document.activeElement;
              originalFocus.focus();
          }
          return result;
      }
      static toJSON(node) {
          const obj = {
              nodeType: node.nodeType
          };
          const attrs = node.attributes;
          let attr;
          let len;
          if (node.nodeName) {
              obj.nodeName = node.nodeName.toLowerCase();
          }
          if (node.nodeValue) {
              obj.nodeValue = node.nodeValue;
          }
          if (attrs) {
              len = attrs.length;
              obj.attributes = [len];
              for (let i = 0; i < len; i += 1) {
                  attr = attrs[i];
                  obj.attributes[i] = [attr.nodeName, attr.value];
              }
          }
          const childNodes = node.childNodes;
          if (childNodes.length > 0) {
              len = childNodes.length;
              obj.childNodes = new Array(len);
              for (let i = 0; i < len; i += 1) {
                  obj.childNodes[i] = DomUtility.toJSON(childNodes[i]);
              }
          }
          return obj;
      }
      static insertAfter(newElement, targetElement) {
          const parent = targetElement.parentNode;
          if (parent === null) {
              console.warn('[DomUtility.insertAfter] Unable to insert element after unavailable targetElement', targetElement);
              return;
          }
          if (parent.lastChild === targetElement) {
              parent.appendChild(newElement);
          }
          else {
              parent.insertBefore(newElement, targetElement.nextSibling);
          }
      }
      static getIFrameDocument(frame) {
          if (ObjectUtility.isHtmlElement(frame) === false) {
              return null;
          }
          if (ObjectUtility.isHostObjectProperty(frame, 'contentWindow')) {
              return frame.contentWindow ? frame.contentWindow.document : null;
          }
          if (ObjectUtility.isHostObjectProperty(frame, 'contentDocument')) {
              return frame.contentDocument;
          }
          return null;
      }
      static htmlDecode(input) {
          const e = document.createElement('textarea');
          e.innerHTML = input;
          return e.childNodes.length === 0 ? '' : e.childNodes[0].nodeValue;
      }
      static ready() {
          const checkReadyState = (resolve) => {
              const onReady = () => {
                  document.removeEventListener('DOMContentLoaded', onReady, true);
                  resolve();
              };
              if (document.readyState !== undefined && document.readyState === 'complete') {
                  resolve();
              }
              else {
                  document.addEventListener('DOMContentLoaded', onReady, true);
              }
          };
          return new Promise(checkReadyState);
      }
      static getElementFromCssSelectorOrXpath(xPathOrCssSelector) {
          const result = {
              element: null,
              error: null
          };
          if (xPathOrCssSelector.trim().length === 0) {
              return result;
          }
          try {
              result.element = document.querySelector(xPathOrCssSelector);
          }
          catch (e) {
              result.element = null;
              result.error = e;
          }
          if (ObjectUtility.isHtmlElement(result.element)) {
              return result;
          }
          try {
              const xPathResult = document.evaluate(xPathOrCssSelector, document, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null);
              let node = xPathResult.iterateNext();
              const nodes = [];
              while (node) {
                  nodes.push(node);
                  node = xPathResult.iterateNext();
              }
              if (nodes.length > 0 && ObjectUtility.isHtmlElement(nodes[0])) {
                  result.element = nodes[0];
                  result.error = null;
              }
          }
          catch (e) {
              result.element = null;
              result.error = e;
          }
          return result;
      }
      static hasElementSemiOpacity(element, styles = null) {
          let elementStyles = styles;
          if (elementStyles === null) {
              elementStyles = Css.getComputedStyle(element);
          }
          if (elementStyles === null) {
              return false;
          }
          return elementStyles.opacity.length > 0 && Number(elementStyles.opacity) < 1;
      }
      static hasElementSemiTransparentBackground(element, styles = null) {
          let elementStyles = styles;
          if (elementStyles === null) {
              elementStyles = Css.getComputedStyle(element);
          }
          if (elementStyles === null) {
              return false;
          }
          const bgColor = new TinyColor(elementStyles.backgroundColor);
          return bgColor.getAlpha() > 0 && bgColor.getAlpha() < 1;
      }
      static getHtmlInfo(root, skipNodeNames = ['script', 'style']) {
          let htmlSize = 0;
          let nodesNum = 0;
          const nodeIterator = document.createNodeIterator(root, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_TEXT, {
              acceptNode(node) {
                  return node.nodeType === Node.ELEMENT_NODE && skipNodeNames.includes(node.nodeName.toLowerCase()) || node.nodeType === Node.TEXT_NODE && node.parentNode && skipNodeNames.includes(node.parentNode.nodeName.toLowerCase()) ? NodeFilter.FILTER_REJECT : NodeFilter.FILTER_ACCEPT;
              }
          });
          let currentNode = nodeIterator.nextNode();
          while (currentNode) {
              if (currentNode.nodeType === Node.ELEMENT_NODE) {
                  htmlSize += currentNode.cloneNode(false).outerHTML.length;
                  nodesNum += 1;
              }
              else if (currentNode.nodeType === Node.TEXT_NODE && typeof currentNode.textContent === 'string') {
                  htmlSize += currentNode.textContent.length;
              }
              currentNode = nodeIterator.nextNode();
          }
          return {
              htmlSize: htmlSize,
              nodesNum: nodesNum
          };
      }
  }
  DomUtility.regExpTest = RegExp.prototype.test;
  DomUtility.nonSpaceRe = /\S/;

  var $aslint;
  (function ($aslint) {
      $aslint["aslint"] = "aslint";
      $aslint["config"] = "config";
  })($aslint || ($aslint = {}));
  var $runnerSettings;
  (function ($runnerSettings) {
      $runnerSettings["asyncRunner"] = "asyncRunner";
      $runnerSettings["context"] = "context";
      $runnerSettings["debugMode"] = "debugMode";
      $runnerSettings["description"] = "description";
      $runnerSettings["direction"] = "direction";
      $runnerSettings["includeElementReference"] = "includeElementReference";
      $runnerSettings["includeHidden"] = "includeHidden";
      $runnerSettings["namespace"] = "namespace";
      $runnerSettings["reportFormat"] = "reportFormat";
      $runnerSettings["resultsCallback"] = "resultsCallback";
      $runnerSettings["rules"] = "rules";
      $runnerSettings["visibleUI"] = "visibleUI";
      $runnerSettings["watchDomChanges"] = "watchDomChanges";
  })($runnerSettings || ($runnerSettings = {}));
  var Directionality;
  (function (Directionality) {
      Directionality["ltr"] = "ltr";
      Directionality["rtl"] = "rtl";
  })(Directionality || (Directionality = {}));
  var ReportFormat;
  (function (ReportFormat) {
      ReportFormat["json"] = "json";
  })(ReportFormat || (ReportFormat = {}));

  var AuditStandards;
  (function (AuditStandards) {
      AuditStandards["wcag"] = "wcag";
      AuditStandards["essential"] = "essential";
      AuditStandards["css"] = "css";
      AuditStandards["html"] = "html";
  })(AuditStandards || (AuditStandards = {}));
  var EssentialVersion;
  (function (EssentialVersion) {
      EssentialVersion["v10"] = "1.0";
  })(EssentialVersion || (EssentialVersion = {}));
  var WcagVersion;
  (function (WcagVersion) {
      WcagVersion["v20"] = "2.0";
      WcagVersion["v21"] = "2.1";
  })(WcagVersion || (WcagVersion = {}));
  var CssVersion;
  (function (CssVersion) {
      CssVersion["v20"] = "2.0";
      CssVersion["v30"] = "3.0";
  })(CssVersion || (CssVersion = {}));
  var HtmlVersion;
  (function (HtmlVersion) {
      HtmlVersion["v5"] = "5.0";
  })(HtmlVersion || (HtmlVersion = {}));
  var WcagLevel;
  (function (WcagLevel) {
      WcagLevel["A"] = "A";
      WcagLevel["AA"] = "AA";
      WcagLevel["AAA"] = "AAA";
  })(WcagLevel || (WcagLevel = {}));
  var WcagTechniques;
  (function (WcagTechniques) {
      WcagTechniques["sufficient"] = "sufficient";
      WcagTechniques["advisory"] = "advisory";
      WcagTechniques["failure"] = "failure";
  })(WcagTechniques || (WcagTechniques = {}));

  var $auditIssue;
  (function ($auditIssue) {
      $auditIssue["error"] = "error";
      $auditIssue["passed"] = "passed";
      $auditIssue["skipped"] = "skipped";
      $auditIssue["warning"] = "warning";
  })($auditIssue || ($auditIssue = {}));
  var $severity;
  (function ($severity) {
      $severity["critical"] = "critical";
      $severity["high"] = "high";
      $severity["info"] = "info";
      $severity["low"] = "low";
  })($severity || ($severity = {}));
  var $auditRuleSkipReason;
  (function ($auditRuleSkipReason) {
      $auditRuleSkipReason["markedAsFalsePositive"] = "markedAsFalsePositive";
      $auditRuleSkipReason["none"] = "none";
      $auditRuleSkipReason["notSelectedForScanning"] = "notSelectedForScanning";
  })($auditRuleSkipReason || ($auditRuleSkipReason = {}));
  var $auditRuleNodeSkipReason;
  (function ($auditRuleNodeSkipReason) {
      $auditRuleNodeSkipReason["excludedFromScanning"] = "excludedFromScanning";
      $auditRuleNodeSkipReason["stylesCantBeDetermined"] = "stylesCantBeDetermined";
      $auditRuleNodeSkipReason["specifiedStylesCantBeDetermined"] = "specifiedStylesCantBeDetermined";
      $auditRuleNodeSkipReason["unableToLoadStyleSheet"] = "unableToLoadStyleSheet";
  })($auditRuleNodeSkipReason || ($auditRuleNodeSkipReason = {}));
  var $accessibilityAuditRules;
  (function ($accessibilityAuditRules) {
      $accessibilityAuditRules["accessible_svg"] = "accessible_svg";
      $accessibilityAuditRules["alt_color_convey_information"] = "alt_color_convey_information";
      $accessibilityAuditRules["alt_text_include_filename"] = "alt_text_include_filename";
      $accessibilityAuditRules["animation"] = "animation";
      $accessibilityAuditRules["applet_missing_alt"] = "applet_missing_alt";
      $accessibilityAuditRules["applet_missing_body"] = "applet_missing_body";
      $accessibilityAuditRules["area_missing_alt"] = "area_missing_alt";
      $accessibilityAuditRules["aria_describedby_association"] = "aria_describedby_association";
      $accessibilityAuditRules["aria_hidden_false"] = "aria_hidden_false";
      $accessibilityAuditRules["aria_labelledby_association"] = "aria_labelledby_association";
      $accessibilityAuditRules["aria_role_dialog"] = "aria_role_dialog";
      $accessibilityAuditRules["audio_alternative"] = "audio_alternative";
      $accessibilityAuditRules["audio_video_captions"] = "audio_video_captions";
      $accessibilityAuditRules["autoplay_audio_video"] = "autoplay_audio_video";
      $accessibilityAuditRules["blink_element"] = "blink_element";
      $accessibilityAuditRules["broken_same_page_link"] = "broken_same_page_link";
      $accessibilityAuditRules["capital_letters_words"] = "capital_letters_words";
      $accessibilityAuditRules["captcha_google"] = "captcha_google";
      $accessibilityAuditRules["click_verb"] = "click_verb";
      $accessibilityAuditRules["color_contrast_aa"] = "color_contrast_aa";
      $accessibilityAuditRules["color_contrast_aaa"] = "color_contrast_aaa";
      $accessibilityAuditRules["color_contrast_state_pseudo_classes_active"] = "color_contrast_state_pseudo_classes_active";
      $accessibilityAuditRules["color_contrast_state_pseudo_classes_focus"] = "color_contrast_state_pseudo_classes_focus";
      $accessibilityAuditRules["color_contrast_state_pseudo_classes_hover"] = "color_contrast_state_pseudo_classes_hover";
      $accessibilityAuditRules["content_editable_missing_attributes"] = "content_editable_missing_attributes";
      $accessibilityAuditRules["contentinfo_landmark_only_one"] = "contentinfo_landmark_only_one";
      $accessibilityAuditRules["css_images_convey_information"] = "css_images_convey_information";
      $accessibilityAuditRules["duplicated_for_attribute"] = "duplicated_for_attribute";
      $accessibilityAuditRules["duplicated_id_attribute"] = "duplicated_id_attribute";
      $accessibilityAuditRules["elements_not_allowed_in_head"] = "elements_not_allowed_in_head";
      $accessibilityAuditRules["empty_button_description"] = "empty_button_description";
      $accessibilityAuditRules["empty_heading"] = "empty_heading";
      $accessibilityAuditRules["empty_label_element"] = "empty_label_element";
      $accessibilityAuditRules["empty_link_element"] = "empty_link_element";
      $accessibilityAuditRules["empty_title_attribute"] = "empty_title_attribute";
      $accessibilityAuditRules["fieldset_no_legend"] = "fieldset_no_legend";
      $accessibilityAuditRules["flash_content"] = "flash_content";
      $accessibilityAuditRules["flickering"] = "flickering";
      $accessibilityAuditRules["font_style_italic"] = "font_style_italic";
      $accessibilityAuditRules["general_alt"] = "general_alt";
      $accessibilityAuditRules["group_elements_name_attribute"] = "group_elements_name_attribute";
      $accessibilityAuditRules["h1_must_be"] = "h1_must_be";
      $accessibilityAuditRules["h1_only_one"] = "h1_only_one";
      $accessibilityAuditRules["headings_hierarchy"] = "headings_hierarchy";
      $accessibilityAuditRules["headings_sibling_unique"] = "headings_sibling_unique";
      $accessibilityAuditRules["hidden_content"] = "hidden_content";
      $accessibilityAuditRules["horizontal_rule"] = "horizontal_rule";
      $accessibilityAuditRules["html_lang_attr"] = "html_lang_attr";
      $accessibilityAuditRules["identify_input_purpose"] = "identify_input_purpose";
      $accessibilityAuditRules["img_adjacent_duplicate_text_link"] = "img_adjacent_duplicate_text_link";
      $accessibilityAuditRules["img_alt_duplicate_text_link"] = "img_alt_duplicate_text_link";
      $accessibilityAuditRules["img_empty_alt_in_link"] = "img_empty_alt_in_link";
      $accessibilityAuditRules["img_empty_alt_with_empty_title"] = "img_empty_alt_with_empty_title";
      $accessibilityAuditRules["incorrect_label_placement"] = "incorrect_label_placement";
      $accessibilityAuditRules["incorrect_technique_for_hiding_content"] = "incorrect_technique_for_hiding_content";
      $accessibilityAuditRules["input_image_missing_alt"] = "input_image_missing_alt";
      $accessibilityAuditRules["invalid_attribute_dir_value"] = "invalid_attribute_dir_value";
      $accessibilityAuditRules["label_duplicated_content_title"] = "label_duplicated_content_title";
      $accessibilityAuditRules["label_implicitly_associated"] = "label_implicitly_associated";
      $accessibilityAuditRules["label_inappropriate_association"] = "label_inappropriate_association";
      $accessibilityAuditRules["label_visually_hidden_only"] = "label_visually_hidden_only";
      $accessibilityAuditRules["legend_first_child_of_fieldset"] = "legend_first_child_of_fieldset";
      $accessibilityAuditRules["link_button_space_key"] = "link_button_space_key";
      $accessibilityAuditRules["link_with_unclear_purpose"] = "link_with_unclear_purpose";
      $accessibilityAuditRules["links_language_destination"] = "links_language_destination";
      $accessibilityAuditRules["links_new_window_mark"] = "links_new_window_mark";
      $accessibilityAuditRules["links_not_visually_evident_without_color_vision"] = "links_not_visually_evident_without_color_vision";
      $accessibilityAuditRules["links_same_content_different_url"] = "links_same_content_different_url";
      $accessibilityAuditRules["main_element_only_one"] = "main_element_only_one";
      $accessibilityAuditRules["main_landmark_must_be_top_level"] = "main_landmark_must_be_top_level";
      $accessibilityAuditRules["meaningful_content_sequence"] = "meaningful_content_sequence";
      $accessibilityAuditRules["minimum_font_size"] = "minimum_font_size";
      $accessibilityAuditRules["missing_alt_attribute"] = "missing_alt_attribute";
      $accessibilityAuditRules["missing_href_on_a"] = "missing_href_on_a";
      $accessibilityAuditRules["missing_label"] = "missing_label";
      $accessibilityAuditRules["missing_submit_button"] = "missing_submit_button";
      $accessibilityAuditRules["misused_aria_on_focusable_element"] = "misused_aria_on_focusable_element";
      $accessibilityAuditRules["misused_input_attribute"] = "misused_input_attribute";
      $accessibilityAuditRules["misused_required_attribute"] = "misused_required_attribute";
      $accessibilityAuditRules["misused_tabindex_attribute"] = "misused_tabindex_attribute";
      $accessibilityAuditRules["motion_actuation"] = "motion_actuation";
      $accessibilityAuditRules["navigation_landmark_restrictions"] = "navigation_landmark_restrictions";
      $accessibilityAuditRules["no_headings"] = "no_headings";
      $accessibilityAuditRules["no_meta_http_equiv_refresh"] = "no_meta_http_equiv_refresh";
      $accessibilityAuditRules["object_general_alt"] = "object_general_alt";
      $accessibilityAuditRules["object_missing_body"] = "object_missing_body";
      $accessibilityAuditRules["obsolete_html_attributes"] = "obsolete_html_attributes";
      $accessibilityAuditRules["obsolete_html_elements"] = "obsolete_html_elements";
      $accessibilityAuditRules["orientation"] = "orientation";
      $accessibilityAuditRules["outline_zero"] = "outline_zero";
      $accessibilityAuditRules["overlay"] = "overlay";
      $accessibilityAuditRules["page_title"] = "page_title";
      $accessibilityAuditRules["position_sticky"] = "position_sticky";
      $accessibilityAuditRules["positive_tabindex"] = "positive_tabindex";
      $accessibilityAuditRules["reflow"] = "reflow";
      $accessibilityAuditRules["role_application"] = "role_application";
      $accessibilityAuditRules["rtl_content"] = "rtl_content";
      $accessibilityAuditRules["select_initial_option"] = "select_initial_option";
      $accessibilityAuditRules["table_caption_summary_identical"] = "table_caption_summary_identical";
      $accessibilityAuditRules["table_missing_description"] = "table_missing_description";
      $accessibilityAuditRules["table_row_and_column_headers"] = "table_row_and_column_headers";
      $accessibilityAuditRules["text_color_convey_information"] = "text_color_convey_information";
      $accessibilityAuditRules["title_for_abbr"] = "title_for_abbr";
      $accessibilityAuditRules["title_iframe"] = "title_iframe";
      $accessibilityAuditRules["unclear_anchor_uri"] = "unclear_anchor_uri";
      $accessibilityAuditRules["unsupported_aria_on_element"] = "unsupported_aria_on_element";
      $accessibilityAuditRules["unsupported_role_on_element"] = "unsupported_role_on_element";
      $accessibilityAuditRules["video_audio_descriptions"] = "video_audio_descriptions";
      $accessibilityAuditRules["zoom_disabled"] = "zoom_disabled";
  })($accessibilityAuditRules || ($accessibilityAuditRules = {}));
  var IssueCategory;
  (function (IssueCategory) {
      IssueCategory["adaptable"] = "adaptable";
      IssueCategory["aria"] = "aria";
      IssueCategory["audio"] = "audio";
      IssueCategory["captcha"] = "captcha";
      IssueCategory["distinguishable"] = "distinguishable";
      IssueCategory["embedded_objects"] = "embedded_objects";
      IssueCategory["forms"] = "forms";
      IssueCategory["headings"] = "headings";
      IssueCategory["images"] = "images";
      IssueCategory["links"] = "links";
      IssueCategory["operable"] = "operable";
      IssueCategory["perceivable"] = "perceivable";
      IssueCategory["robust"] = "robust";
      IssueCategory["tables"] = "tables";
      IssueCategory["uncategorized"] = "uncategorized";
      IssueCategory["understandable"] = "understandable";
      IssueCategory["videos"] = "videos";
  })(IssueCategory || (IssueCategory = {}));

  class ReportUtility {
      static getRuleIssueTypeBySeverity(severity) {
          switch (severity) {
              case $severity.critical:
                  return $auditIssue.error;
              case $severity.high:
                  return $auditIssue.error;
              case $severity.low:
                  return $auditIssue.error;
              case $severity.info:
                  return $auditIssue.warning;
              default:
                  return $auditIssue.passed;
          }
      }
      static getScore(issueCount) {
          const errors = issueCount.error + issueCount.warning / 10;
          const total = issueCount.passed + errors;
          let errorRatio = 0;
          if (total > 0) {
              errorRatio = errors / total;
          }
          return Math.round((1 - errorRatio) * 100);
      }
  }

  var IAslintRuleReportStatusType;
  (function (IAslintRuleReportStatusType) {
      IAslintRuleReportStatusType["error"] = "error";
      IAslintRuleReportStatusType["passed"] = "passed";
      IAslintRuleReportStatusType["skip"] = "skip";
  })(IAslintRuleReportStatusType || (IAslintRuleReportStatusType = {}));

  const wcag$1 = {
      principles: [
          {
              handle: 'Perceivable',
              id: 'WCAG2:perceivable',
              num: '1',
              versions: ['2.0', '2.1'],
              title: 'Information and user interface components must be presentable to users in ways they can perceive.',
              guidelines: [
                  {
                      id: 'WCAG2:text-alternatives',
                      alt_id: ['text-equiv'],
                      num: '1.1',
                      versions: ['2.0', '2.1'],
                      handle: 'Text Alternatives',
                      title: 'Provide text alternatives for any non-text content so that it can be changed into other forms people need, such as large print, braille, speech, symbols or simpler language.',
                      successcriteria: [
                          {
                              id: 'WCAG2:non-text-content',
                              alt_id: ['text-equiv-all'],
                              num: '1.1.1',
                              versions: ['2.0', '2.1'],
                              level: 'A',
                              handle: 'Non-text Content',
                              title: 'All non-text content that is presented to the user has a text alternative that serves the equivalent purpose, except for the situations listed below.',
                              details: [
                                  {
                                      type: 'ulist',
                                      items: [
                                          {
                                              handle: 'Controls, Input',
                                              text: 'If non-text content is a control or accepts user input, then it has a name that describes its purpose. (Refer to Success Criterion 4.1.2 for additional requirements for controls and content that accepts user input.)'
                                          },
                                          {
                                              handle: 'Time-Based Media',
                                              text: 'If non-text content is time-based media, then text alternatives at least provide descriptive identification of the non-text content. (Refer to Guideline 1.2 for additional requirements for media.)'
                                          },
                                          {
                                              handle: 'Test',
                                              text: 'If non-text content is a test or exercise that would be invalid if presented in text, then text alternatives at least provide descriptive identification of the non-text content.'
                                          },
                                          {
                                              handle: 'Sensory',
                                              text: 'If non-text content is primarily intended to create a specific sensory experience, then text alternatives at least provide descriptive identification of the non-text content.'
                                          },
                                          {
                                              handle: 'CAPTCHA',
                                              text: 'If the purpose of non-text content is to confirm that content is being accessed by a person rather than a computer, then text alternatives that identify and describe the purpose of the non-text content are provided, and alternative forms of CAPTCHA using output modes for different types of sensory perception are provided to accommodate different disabilities.'
                                          },
                                          {
                                              handle: 'Decoration, Formatting, Invisible',
                                              text: 'If non-text content is pure decoration, is used only for visual formatting, or is not presented to users, then it is implemented in a way that it can be ignored by assistive technology.'
                                          }
                                      ]
                                  }
                              ],
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              situations: [
                                                  {
                                                      title: 'Situation A: If a short description can serve the same purpose and present the same information as the non-text content:',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:G94',
                                                              title: 'Providing short text alternative for non-text content that serves the same purpose and presents the same information as the non-text content',
                                                              using: [
                                                                  {
                                                                      group: {
                                                                          title: 'Short text alternative techniques for Situation A:',
                                                                          techniques: [
                                                                              {
                                                                                  id: 'TECH:ARIA6',
                                                                                  title: 'Using aria-label to provide labels for objects'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:ARIA10',
                                                                                  title: 'Using aria-labelledby to provide a text alternative for non-text content'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:G196',
                                                                                  title: 'Using a text alternative on one item within a group of images that describes all items in the group'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:FLASH1',
                                                                                  title: 'Setting the name property for a non-text object'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:FLASH5',
                                                                                  title: 'Combining adjacent image and text buttons for the same resource'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:FLASH28',
                                                                                  title: 'Providing text alternatives for ASCII art, emoticons, and leetspeak in Flash'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:H2',
                                                                                  title: 'Combining adjacent image and text links for the same resource'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:H35',
                                                                                  title: 'Providing text alternatives on applet elements'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:H37',
                                                                                  title: 'Using alt attributes on img elements'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:H53',
                                                                                  title: 'Using the body of the object element'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:H86',
                                                                                  title: 'Providing text alternatives for ASCII art, emoticons, and leetspeak'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:PDF1',
                                                                                  title: 'Applying text alternatives to images with the Alt entry in PDF documents'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:SL5',
                                                                                  title: 'Defining a Focusable Image Class for Silverlight'
                                                                              }
                                                                          ]
                                                                      }
                                                                  }
                                                              ]
                                                          }
                                                      ]
                                                  },
                                                  {
                                                      title: 'Situation B: If a short description can not serve the same purpose and present the same information as the non-text content (e.g., a chart or diagram):',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:G95',
                                                              title: 'Providing short text alternatives that provide a brief description of the non-text content',
                                                              using: [
                                                                  {
                                                                      group: {
                                                                          title: 'Short text alternative techniques for Situation B:',
                                                                          techniques: [
                                                                              {
                                                                                  id: 'TECH:ARIA6',
                                                                                  title: 'Using aria-label to provide labels for objects'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:ARIA10',
                                                                                  title: 'Using aria-labelledby to provide a text alternative for non-text content'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:G196',
                                                                                  title: 'Using a text alternative on one item within a group of images that describes all items in the group'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:FLASH1',
                                                                                  title: 'Setting the name property for a non-text object'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:FLASH5',
                                                                                  title: 'Combining adjacent image and text buttons for the same resource'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:FLASH28',
                                                                                  title: 'Providing text alternatives for ASCII art, emoticons, and leetspeak in Flash'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:H2',
                                                                                  title: 'Combining adjacent image and text links for the same resource'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:H35',
                                                                                  title: 'Providing text alternatives on applet elements'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:H37',
                                                                                  title: 'Using alt attributes on img elements'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:H53',
                                                                                  title: 'Using the body of the object element'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:H86',
                                                                                  title: 'Providing text alternatives for ASCII art, emoticons, and leetspeak'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:PDF1',
                                                                                  title: 'Applying text alternatives to images with the Alt entry in PDF documents'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:SL5',
                                                                                  title: 'Defining a Focusable Image Class for Silverlight'
                                                                              }
                                                                          ]
                                                                      }
                                                                  },
                                                                  {
                                                                      group: {
                                                                          title: 'Long text alternative techniques for Situation B:',
                                                                          techniques: [
                                                                              {
                                                                                  id: 'TECH:ARIA15',
                                                                                  title: 'Using aria-describedby to provide descriptions of images'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:G73',
                                                                                  title: 'Providing a long description in another location with a link to it that is immediately adjacent to the non-text content'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:G74',
                                                                                  title: 'Providing a long description in text near the non-text content, with a reference to the location of the long description in the short description'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:G92',
                                                                                  title: 'Providing long description for non-text content that serves the same purpose and presents the same information'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:FLASH2',
                                                                                  title: 'Setting the description property for a non-text object in Flash'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:FLASH11',
                                                                                  title: 'Providing a longer text description of an object'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:H45',
                                                                                  title: 'Using longdesc'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:H53',
                                                                                  title: 'Using the body of the object element'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:SL8',
                                                                                  title: 'Displaying HelpText in Silverlight User Interfaces'
                                                                              }
                                                                          ]
                                                                      }
                                                                  }
                                                              ]
                                                          }
                                                      ]
                                                  },
                                                  {
                                                      title: 'Situation C: If non-text content is a control or accepts user input:',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:G82',
                                                              title: 'Providing a text alternative that identifies the purpose of the non-text content',
                                                              using: [
                                                                  {
                                                                      group: {
                                                                          title: 'Text alternative techniques for controls and input for Situation C:',
                                                                          techniques: [
                                                                              {
                                                                                  id: 'TECH:ARIA6',
                                                                                  title: 'Using aria-label to provide labels for objects'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:ARIA9',
                                                                                  title: 'Using aria-labelledby to concatenate a label from several text nodes'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:FLASH6',
                                                                                  title: 'Creating accessible hotspots using invisible buttons'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:FLASH25',
                                                                                  title: 'Labeling a form control by setting its accessible name'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:FLASH27',
                                                                                  title: 'Providing button labels that describe the purpose of a button'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:FLASH29',
                                                                                  title: 'Setting the label property for form components'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:FLASH30',
                                                                                  title: 'Specifying accessible names for image buttons'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:FLASH32',
                                                                                  title: 'Using auto labeling to associate text labels with form controls'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:H24',
                                                                                  title: 'Providing text alternatives for the area elements of image maps'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:H30',
                                                                                  title: 'Providing link text that describes the purpose of a link for anchor elements'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:H36',
                                                                                  title: 'Using alt attributes on images used as submit buttons'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:H44',
                                                                                  title: 'Using label elements to associate text labels with form controls'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:H65',
                                                                                  title: 'Using the title attribute to identify form controls when the label element cannot be used'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:SL18',
                                                                                  title: 'Providing Text Equivalent for Nontext Silverlight Controls With AutomationProperties.Name'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:SL26',
                                                                                  title: 'Using LabeledBy to Associate Labels and Targets in Silverlight'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:SL30',
                                                                                  title: 'Using Silverlight Control Compositing and AutomationProperties.Name'
                                                                              }
                                                                          ]
                                                                      }
                                                                  }
                                                              ]
                                                          }
                                                      ]
                                                  },
                                                  {
                                                      title: 'Situation D: If non-text content is time-based media (including live video-only and live audio-only); a test or exercise that would be invalid if presented in text; or primarily intended to create a specific sensory experience:',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:text',
                                                              title: 'Providing a descriptive label',
                                                              using: [
                                                                  {
                                                                      group: {
                                                                          title: 'Short text alternative techniques for Situation D:',
                                                                          techniques: [
                                                                              {
                                                                                  id: 'TECH:ARIA6',
                                                                                  title: 'Using aria-label to provide labels for objects'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:ARIA10',
                                                                                  title: 'Using aria-labelledby to provide a text alternative for non-text content'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:G196',
                                                                                  title: 'Using a text alternative on one item within a group of images that describes all items in the group'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:FLASH1',
                                                                                  title: 'Setting the name property for a non-text object'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:FLASH5',
                                                                                  title: 'Combining adjacent image and text buttons for the same resource'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:FLASH28',
                                                                                  title: 'Providing text alternatives for ASCII art, emoticons, and leetspeak in Flash'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:H2',
                                                                                  title: 'Combining adjacent image and text links for the same resource'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:H35',
                                                                                  title: 'Providing text alternatives on applet elements'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:H37',
                                                                                  title: 'Using alt attributes on img elements'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:H53',
                                                                                  title: 'Using the body of the object element'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:H86',
                                                                                  title: 'Providing text alternatives for ASCII art, emoticons, and leetspeak'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:PDF1',
                                                                                  title: 'Applying text alternatives to images with the Alt entry in PDF documents'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:SL5',
                                                                                  title: 'Defining a Focusable Image Class for Silverlight'
                                                                              }
                                                                          ]
                                                                      }
                                                                  }
                                                              ]
                                                          },
                                                          {
                                                              id: 'TECH:ARIA6',
                                                              title: 'Using aria-label to provide labels for objects'
                                                          },
                                                          {
                                                              id: 'TECH:ARIA10',
                                                              title: 'Using aria-labelledby to provide a text alternative for non-text content'
                                                          },
                                                          {
                                                              id: 'TECH:G68',
                                                              title: 'Providing a short text alternative that describes the purpose of live audio-only and live video-only content',
                                                              using: [
                                                                  {
                                                                      group: {
                                                                          title: 'Short text alternative techniques for Situation D:',
                                                                          techniques: [
                                                                              {
                                                                                  id: 'TECH:ARIA6',
                                                                                  title: 'Using aria-label to provide labels for objects'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:ARIA10',
                                                                                  title: 'Using aria-labelledby to provide a text alternative for non-text content'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:G196',
                                                                                  title: 'Using a text alternative on one item within a group of images that describes all items in the group'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:FLASH1',
                                                                                  title: 'Setting the name property for a non-text object'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:FLASH5',
                                                                                  title: 'Combining adjacent image and text buttons for the same resource'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:FLASH28',
                                                                                  title: 'Providing text alternatives for ASCII art, emoticons, and leetspeak in Flash'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:H2',
                                                                                  title: 'Combining adjacent image and text links for the same resource'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:H35',
                                                                                  title: 'Providing text alternatives on applet elements'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:H37',
                                                                                  title: 'Using alt attributes on img elements'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:H53',
                                                                                  title: 'Using the body of the object element'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:H86',
                                                                                  title: 'Providing text alternatives for ASCII art, emoticons, and leetspeak'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:PDF1',
                                                                                  title: 'Applying text alternatives to images with the Alt entry in PDF documents'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:SL5',
                                                                                  title: 'Defining a Focusable Image Class for Silverlight'
                                                                              }
                                                                          ]
                                                                      }
                                                                  }
                                                              ]
                                                          },
                                                          {
                                                              id: 'TECH:G100',
                                                              title: 'Providing a short text alternative which is the accepted name or a descriptive name of the non-text content',
                                                              using: [
                                                                  {
                                                                      group: {
                                                                          title: 'Short text alternative techniques for Situation D:',
                                                                          techniques: [
                                                                              {
                                                                                  id: 'TECH:ARIA6',
                                                                                  title: 'Using aria-label to provide labels for objects'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:ARIA10',
                                                                                  title: 'Using aria-labelledby to provide a text alternative for non-text content'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:G196',
                                                                                  title: 'Using a text alternative on one item within a group of images that describes all items in the group'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:FLASH1',
                                                                                  title: 'Setting the name property for a non-text object'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:FLASH5',
                                                                                  title: 'Combining adjacent image and text buttons for the same resource'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:FLASH28',
                                                                                  title: 'Providing text alternatives for ASCII art, emoticons, and leetspeak in Flash'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:H2',
                                                                                  title: 'Combining adjacent image and text links for the same resource'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:H35',
                                                                                  title: 'Providing text alternatives on applet elements'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:H37',
                                                                                  title: 'Using alt attributes on img elements'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:H53',
                                                                                  title: 'Using the body of the object element'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:H86',
                                                                                  title: 'Providing text alternatives for ASCII art, emoticons, and leetspeak'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:PDF1',
                                                                                  title: 'Applying text alternatives to images with the Alt entry in PDF documents'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:SL5',
                                                                                  title: 'Defining a Focusable Image Class for Silverlight'
                                                                              }
                                                                          ]
                                                                      }
                                                                  }
                                                              ]
                                                          }
                                                      ]
                                                  },
                                                  {
                                                      title: 'Situation E: If non-text content is a CAPTCHA:',
                                                      techniques: [
                                                          {
                                                              and: [
                                                                  {
                                                                      id: 'TECH:G143',
                                                                      title: 'Providing a text alternative that describes the purpose of the CAPTCHA'
                                                                  },
                                                                  {
                                                                      id: 'TECH:G144',
                                                                      title: 'Ensuring that the Web Page contains another CAPTCHA serving the same purpose using a different modality'
                                                                  }
                                                              ]
                                                          }
                                                      ]
                                                  },
                                                  {
                                                      title: 'Situation F: If the non-text content should be ignored by assistive technology:',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:text',
                                                              title: 'Implementing or marking the non-text content so that it will be ignored by assistive technology',
                                                              using: [
                                                                  {
                                                                      group: {
                                                                          title: 'Techniques to indicate that text alternatives are not required for Situation F:',
                                                                          techniques: [
                                                                              {
                                                                                  id: 'TECH:C9',
                                                                                  title: 'Using CSS to include decorative images'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:FLASH3',
                                                                                  title: 'Marking objects in Flash so that they can be ignored by AT'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:H67',
                                                                                  title: 'Using null alt text and no title attribute on img elements for images that AT should ignore'
                                                                              },
                                                                              {
                                                                                  id: 'TECH:PDF4',
                                                                                  title: 'Hiding decorative images with the Artifact tag in PDF documents'
                                                                              }
                                                                          ]
                                                                      }
                                                                  }
                                                              ]
                                                          }
                                                      ]
                                                  }
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      advisory: [
                                          {
                                              id: 'TECH:H46',
                                              title: 'Using noembed with embed'
                                          },
                                          {
                                              id: 'TECH:C18',
                                              title: 'Using CSS margin and padding rules instead of spacer images for layout design'
                                          },
                                          {
                                              id: 'TECH:SL19',
                                              title: 'Providing User Instructions With AutomationProperties.HelpText in Silverlight'
                                          }
                                      ]
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:F3',
                                              title: 'Failure of Success Criterion 1.1.1 due to using CSS to include images that convey important information'
                                          },
                                          {
                                              id: 'TECH:F13',
                                              title: 'Failure of Success Criterion 1.1.1 and 1.4.1 due to having a text alternative that does not include information that is conveyed by color differences in the image'
                                          },
                                          {
                                              id: 'TECH:F20',
                                              title: 'Failure of Success Criterion 1.1.1 and 4.1.2 due to not updating text alternatives when changes to non-text content occur'
                                          },
                                          {
                                              id: 'TECH:F30',
                                              title: 'Failure of Success Criterion 1.1.1 and 1.2.1 due to using text alternatives that are not alternatives (e.g., filenames or placeholder text)'
                                          },
                                          {
                                              id: 'TECH:F38',
                                              title: 'Failure of Success Criterion 1.1.1 due to not marking up decorative images in HTML in a way that allows assistive technology to ignore them'
                                          },
                                          {
                                              id: 'TECH:F39',
                                              title: 'Failure of Success Criterion 1.1.1 due to providing a text alternative that is not null (e.g., alt="spacer" or alt="image") for images that should be ignored by assistive technology'
                                          },
                                          {
                                              id: 'TECH:F65',
                                              title: 'Failure of Success Criterion 1.1.1 due to omitting the alt attribute or text alternative on img elements, area elements, and input elements of type "image"'
                                          },
                                          {
                                              id: 'TECH:F67',
                                              title: 'Failure of Success Criterion 1.1.1 and 1.2.1 due to providing long descriptions for non-text content that does not serve the same purpose or does not present the same information'
                                          },
                                          {
                                              id: 'TECH:F71',
                                              title: 'Failure of Success Criterion 1.1.1 due to using text look-alikes to represent text without providing a text alternative'
                                          },
                                          {
                                              id: 'TECH:F72',
                                              title: 'Failure of Success Criterion 1.1.1 due to using ASCII art without providing a text alternative'
                                          }
                                      ]
                                  }
                              ]
                          }
                      ],
                      techniques: []
                  },
                  {
                      id: 'WCAG2:time-based-media',
                      alt_id: ['media-equiv'],
                      num: '1.2',
                      versions: ['2.0', '2.1'],
                      handle: 'Time-based Media',
                      title: 'Provide alternatives for time-based media.',
                      successcriteria: [
                          {
                              id: 'WCAG2:audio-only-and-video-only-prerecorded',
                              alt_id: ['media-equiv-av-only-alt'],
                              num: '1.2.1',
                              versions: ['2.0', '2.1'],
                              level: 'A',
                              handle: 'Audio-only and Video-only (Prerecorded)',
                              title: 'For prerecorded audio-only and prerecorded video-only media, the following are true, except when the audio or video is a media alternative for text and is clearly labeled as such:',
                              details: [
                                  {
                                      type: 'ulist',
                                      items: [
                                          {
                                              handle: 'Prerecorded Audio-only',
                                              text: 'An alternative for time-based media is provided that presents equivalent information for prerecorded audio-only content.'
                                          },
                                          {
                                              handle: 'Prerecorded Video-only',
                                              text: 'Either an alternative for time-based media or an audio track is provided that presents equivalent information for prerecorded video-only content.'
                                          }
                                      ]
                                  }
                              ],
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              situations: [
                                                  {
                                                      title: 'Situation A: If the content is prerecorded audio-only:',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:G158',
                                                              title: 'Providing an alternative for time-based media for audio-only content'
                                                          },
                                                          {
                                                              id: 'TECH:SL17',
                                                              title: 'Providing Static Alternative Content for Silverlight Media Playing in a MediaElement'
                                                          }
                                                      ]
                                                  },
                                                  {
                                                      title: 'Situation B: If the content is prerecorded video-only:',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:G159',
                                                              title: 'Providing an alternative for time-based media for video-only content'
                                                          },
                                                          {
                                                              id: 'TECH:G166',
                                                              title: 'Providing audio that describes the important video content and describing it as such'
                                                          },
                                                          {
                                                              id: 'TECH:SL17',
                                                              title: 'Providing Static Alternative Content for Silverlight Media Playing in a MediaElement'
                                                          }
                                                      ]
                                                  }
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      advisory: [
                                          {
                                              id: 'TECH:H96',
                                              title: 'Using the track element to provide audio descriptions'
                                          }
                                      ]
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:F30',
                                              title: 'Failure of Success Criterion 1.1.1 and 1.2.1 due to using text alternatives that are not alternatives (e.g., filenames or placeholder text)'
                                          },
                                          {
                                              id: 'TECH:F67',
                                              title: 'Failure of Success Criterion 1.1.1 and 1.2.1 due to providing long descriptions for non-text content that does not serve the same purpose or does not present the same information'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:captions-prerecorded',
                              alt_id: ['media-equiv-captions'],
                              num: '1.2.2',
                              versions: ['2.0', '2.1'],
                              level: 'A',
                              handle: 'Captions (Prerecorded)',
                              title: 'Captions are provided for all prerecorded audio content in synchronized media, except when the media is a media alternative for text and is clearly labeled as such.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:G93',
                                              title: 'Providing open (always visible) captions'
                                          },
                                          {
                                              id: 'TECH:G87',
                                              title: 'Providing closed captions'
                                          },
                                          {
                                              id: 'TECH:G87',
                                              title: 'Providing closed captions',
                                              using: [
                                                  {
                                                      id: 'TECH:SM11',
                                                      title: 'Providing captions through synchronized text streams in SMIL 1.0'
                                                  },
                                                  {
                                                      id: 'TECH:SM12',
                                                      title: 'Providing captions through synchronized text streams in SMIL 2.0'
                                                  },
                                                  {
                                                      id: 'TECH:H95',
                                                      title: 'Using the track element to provide captions'
                                                  },
                                                  {
                                                      id: 'TECH:FLASH9',
                                                      title: 'Applying captions to prerecorded synchronized media'
                                                  },
                                                  {
                                                      id: 'TECH:SL16',
                                                      title: 'Providing Script-Embedded Text Captions for MediaElement Content'
                                                  },
                                                  {
                                                      id: 'TECH:SL28',
                                                      title: 'Using Separate Text-Format Text Captions for MediaElement Content'
                                                  }
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      advisory: []
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:F8',
                                              title: 'Failure of Success Criterion 1.2.2 due to captions omitting some dialogue or important sound effects'
                                          },
                                          {
                                              id: 'TECH:F75',
                                              title: 'Failure of Success Criterion 1.2.2 by providing synchronized media without captions when the synchronized media presents more information than is presented on the page'
                                          },
                                          {
                                              id: 'TECH:F74',
                                              title: 'Failure of Success Criterion 1.2.2 and 1.2.8 due to not labeling a synchronized media alternative to text as an alternative'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:audio-description-or-media-alternative-prerecorded',
                              alt_id: ['media-equiv-audio-desc'],
                              num: '1.2.3',
                              versions: ['2.0', '2.1'],
                              level: 'A',
                              handle: 'Audio Description or Media Alternative (Prerecorded)',
                              title: 'An alternative for time-based media or audio description of the prerecorded video content is provided for synchronized media, except when the media is a media alternative for text and is clearly labeled as such.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:G69',
                                              title: 'Providing an alternative for time based media',
                                              using: [
                                                  {
                                                      id: 'TECH:G58',
                                                      title: 'Placing a link to the alternative for time-based media immediately next to the non-text content'
                                                  },
                                                  {
                                                      id: 'TECH:SL17',
                                                      title: 'Providing Static Alternative Content for Silverlight Media Playing in a MediaElement'
                                                  }
                                              ]
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: 'Linking to the alternative for time-based media using one of the following techniques',
                                              using: [
                                                  {
                                                      id: 'TECH:H53',
                                                      title: 'Using the body of the object element'
                                                  }
                                              ]
                                          },
                                          {
                                              id: 'TECH:G78',
                                              title: 'Providing a second, user-selectable, audio track that includes audio descriptions'
                                          },
                                          {
                                              and: [
                                                  {
                                                      id: 'TECH:G78',
                                                      title: 'Providing a second, user-selectable, audio track that includes audio descriptions'
                                                  },
                                                  {
                                                      id: 'TECH:SL1',
                                                      title: 'Accessing Alternate Audio Tracks in Silverlight Media'
                                                  }
                                              ]
                                          },
                                          {
                                              id: 'TECH:G173',
                                              title: 'Providing a version of a movie with audio descriptions',
                                              using: [
                                                  {
                                                      id: 'TECH:SM6',
                                                      title: 'Providing audio description in SMIL 1.0'
                                                  },
                                                  {
                                                      id: 'TECH:SM7',
                                                      title: 'Providing audio description in SMIL 2.0'
                                                  },
                                                  {
                                                      id: 'TECH:FLASH26',
                                                      title: 'Applying audio descriptions to Flash video'
                                                  },
                                                  {
                                                      id: 'TECH:SL1',
                                                      title: 'Accessing Alternate Audio Tracks in Silverlight Media'
                                                  },
                                                  {
                                                      id: 'TECH:text',
                                                      title: 'Using any player that supports audio and video'
                                                  }
                                              ]
                                          },
                                          {
                                              id: 'TECH:G8',
                                              title: 'Providing a movie with extended audio descriptions',
                                              using: [
                                                  {
                                                      id: 'TECH:SM1',
                                                      title: 'Adding extended audio description in SMIL 1.0'
                                                  },
                                                  {
                                                      id: 'TECH:SM2',
                                                      title: 'Adding extended audio description in SMIL 2.0'
                                                  },
                                                  {
                                                      id: 'TECH:FLASH26',
                                                      title: 'Applying audio descriptions to Flash video'
                                                  },
                                                  {
                                                      id: 'TECH:SL1',
                                                      title: 'Accessing Alternate Audio Tracks in Silverlight Media'
                                                  },
                                                  {
                                                      id: 'TECH:text',
                                                      title: 'Using any player that supports audio and video'
                                                  }
                                              ]
                                          },
                                          {
                                              id: 'TECH:G203',
                                              title: 'Using a static text alternative to describe a talking head video'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: [
                                          {
                                              id: 'TECH:H96',
                                              title: 'Using the track element to provide audio descriptions'
                                          }
                                      ]
                                  },
                                  {
                                      failure: []
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:captions-live',
                              alt_id: ['media-equiv-real-time-captions'],
                              num: '1.2.4',
                              versions: ['2.0', '2.1'],
                              level: 'AA',
                              handle: 'Captions (Live)',
                              title: 'Captions are provided for all live audio content in synchronized media.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              and: [
                                                  {
                                                      id: 'TECH:G9',
                                                      title: 'Creating captions for live synchronized media'
                                                  },
                                                  {
                                                      id: 'TECH:G93',
                                                      title: 'Providing open (always visible) captions'
                                                  }
                                              ]
                                          },
                                          {
                                              and: [
                                                  {
                                                      id: 'TECH:G9',
                                                      title: 'Creating captions for live synchronized media'
                                                  },
                                                  {
                                                      id: 'TECH:G87',
                                                      title: 'Providing closed captions'
                                                  }
                                              ]
                                          },
                                          {
                                              and: [
                                                  {
                                                      id: 'TECH:G9',
                                                      title: 'Creating captions for live synchronized media',
                                                      using: [
                                                          {
                                                              id: 'TECH:SM11',
                                                              title: 'Providing captions through synchronized text streams in SMIL 1.0'
                                                          },
                                                          {
                                                              id: 'TECH:SM12',
                                                              title: 'Providing captions through synchronized text streams in SMIL 2.0'
                                                          }
                                                      ]
                                                  },
                                                  {
                                                      id: 'TECH:G87',
                                                      title: 'Providing closed captions',
                                                      using: [
                                                          {
                                                              id: 'TECH:SM11',
                                                              title: 'Providing captions through synchronized text streams in SMIL 1.0'
                                                          },
                                                          {
                                                              id: 'TECH:SM12',
                                                              title: 'Providing captions through synchronized text streams in SMIL 2.0'
                                                          }
                                                      ]
                                                  }
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      advisory: []
                                  },
                                  {
                                      failure: []
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:audio-description-prerecorded',
                              alt_id: ['media-equiv-audio-desc-only'],
                              num: '1.2.5',
                              versions: ['2.0', '2.1'],
                              level: 'AA',
                              handle: 'Audio Description (Prerecorded)',
                              title: 'Audio description is provided for all prerecorded video content in synchronized media.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:G78',
                                              title: 'Providing a second, user-selectable, audio track that includes audio descriptions'
                                          },
                                          {
                                              and: [
                                                  {
                                                      id: 'TECH:G78',
                                                      title: 'Providing a second, user-selectable, audio track that includes audio descriptions'
                                                  },
                                                  {
                                                      id: 'TECH:SL1',
                                                      title: 'Accessing Alternate Audio Tracks in Silverlight Media'
                                                  }
                                              ]
                                          },
                                          {
                                              id: 'TECH:G173',
                                              title: 'Providing a version of a movie with audio descriptions',
                                              using: [
                                                  {
                                                      id: 'TECH:SM6',
                                                      title: 'Providing audio description in SMIL 1.0'
                                                  },
                                                  {
                                                      id: 'TECH:SM7',
                                                      title: 'Providing audio description in SMIL 2.0'
                                                  },
                                                  {
                                                      id: 'TECH:FLASH26',
                                                      title: 'Applying audio descriptions to Flash video'
                                                  },
                                                  {
                                                      id: 'TECH:text',
                                                      title: 'Using any player that supports audio and video'
                                                  }
                                              ]
                                          },
                                          {
                                              id: 'TECH:G8',
                                              title: 'Providing a movie with extended audio descriptions',
                                              using: [
                                                  {
                                                      id: 'TECH:SM1',
                                                      title: 'Adding extended audio description in SMIL 1.0'
                                                  },
                                                  {
                                                      id: 'TECH:SM2',
                                                      title: 'Adding extended audio description in SMIL 2.0'
                                                  },
                                                  {
                                                      id: 'TECH:FLASH26',
                                                      title: 'Applying audio descriptions to Flash video'
                                                  },
                                                  {
                                                      id: 'TECH:text',
                                                      title: 'Using any player that supports audio and video'
                                                  }
                                              ]
                                          },
                                          {
                                              id: 'TECH:G203',
                                              title: 'Using a static text alternative to describe a talking head video'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: [
                                          {
                                              id: 'TECH:H96',
                                              title: 'Using the track element to provide audio descriptions'
                                          }
                                      ]
                                  },
                                  {
                                      failure: []
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:sign-language-prerecorded',
                              alt_id: ['media-equiv-sign'],
                              num: '1.2.6',
                              versions: ['2.0', '2.1'],
                              level: 'AAA',
                              handle: 'Sign Language (Prerecorded)',
                              title: 'Sign language interpretation is provided for all prerecorded audio content in synchronized media.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:G54',
                                              title: 'Including a sign language interpreter in the video stream'
                                          },
                                          {
                                              id: 'TECH:G81',
                                              title: 'Providing a synchronized video of the sign language interpreter that can be displayed in a different viewport or overlaid on the image by the player',
                                              using: [
                                                  {
                                                      id: 'TECH:SM13',
                                                      title: 'Providing sign language interpretation through synchronized video streams in SMIL 1.0'
                                                  },
                                                  {
                                                      id: 'TECH:SM14',
                                                      title: 'Providing sign language interpretation through synchronized video streams in SMIL 2.0'
                                                  }
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      advisory: []
                                  },
                                  {
                                      failure: []
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:extended-audio-description-prerecorded',
                              alt_id: ['media-equiv-extended-ad'],
                              num: '1.2.7',
                              versions: ['2.0', '2.1'],
                              level: 'AAA',
                              handle: 'Extended Audio Description (Prerecorded)',
                              title: 'Where pauses in foreground audio are insufficient to allow audio descriptions to convey the sense of the video, extended audio description is provided for all prerecorded video content in synchronized media.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:G8',
                                              title: 'Providing a movie with extended audio descriptions',
                                              using: [
                                                  {
                                                      id: 'TECH:SM1',
                                                      title: 'Adding extended audio description in SMIL 1.0'
                                                  },
                                                  {
                                                      id: 'TECH:SM2',
                                                      title: 'Adding extended audio description in SMIL 2.0'
                                                  },
                                                  {
                                                      id: 'TECH:text',
                                                      title: 'Using any player that supports audio and video'
                                                  }
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      advisory: [
                                          {
                                              id: 'TECH:H96',
                                              title: 'Using the track element to provide audio descriptions'
                                          }
                                      ]
                                  },
                                  {
                                      failure: []
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:media-alternative-prerecorded',
                              alt_id: ['media-equiv-text-doc'],
                              num: '1.2.8',
                              versions: ['2.0', '2.1'],
                              level: 'AAA',
                              handle: 'Media Alternative (Prerecorded)',
                              title: 'An alternative for time-based media is provided for all prerecorded synchronized media and for all prerecorded video-only media.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              situations: [
                                                  {
                                                      title: 'Situation A: If the content is prerecorded synchronized media:',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:G69',
                                                              title: 'Providing an alternative for time based media',
                                                              using: [
                                                                  {
                                                                      id: 'TECH:G58',
                                                                      title: 'Placing a link to the alternative for time-based media immediately next to the non-text content'
                                                                  },
                                                                  {
                                                                      id: 'TECH:SL17',
                                                                      title: 'Providing Static Alternative Content for Silverlight Media Playing in a MediaElement'
                                                                  }
                                                              ]
                                                          },
                                                          {
                                                              id: 'TECH:text',
                                                              title: 'Linking to the alternative for time-based media using one of the following techniques',
                                                              using: [
                                                                  {
                                                                      id: 'TECH:H53',
                                                                      title: 'Using the body of the object element'
                                                                  }
                                                              ]
                                                          }
                                                      ]
                                                  },
                                                  {
                                                      title: 'Situation B: If the content is prerecorded video-only:',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:G159',
                                                              title: 'Providing an alternative for time-based media for video-only content'
                                                          }
                                                      ]
                                                  }
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      advisory: [
                                          {
                                              id: 'TECH:H46',
                                              title: 'Using noembed with embed'
                                          }
                                      ]
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:F74',
                                              title: 'Failure of Success Criterion 1.2.2 and 1.2.8 due to not labeling a synchronized media alternative to text as an alternative'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:audio-only-live',
                              alt_id: ['media-equiv-live-audio-only'],
                              num: '1.2.9',
                              versions: ['2.0', '2.1'],
                              level: 'AAA',
                              handle: 'Audio-only (Live)',
                              title: 'An alternative for time-based media that presents equivalent information for live audio-only content is provided.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:G151',
                                              title: 'Providing a link to a text transcript of a prepared statement or script if the script is followed'
                                          },
                                          {
                                              id: 'TECH:G150',
                                              title: 'Providing text based alternatives for live audio-only content'
                                          },
                                          {
                                              id: 'TECH:G157',
                                              title: 'Incorporating a live audio captioning service into a Web page'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: []
                                  },
                                  {
                                      failure: []
                                  }
                              ]
                          }
                      ],
                      techniques: []
                  },
                  {
                      id: 'WCAG2:adaptable',
                      alt_id: ['content-structure-separation'],
                      num: '1.3',
                      versions: ['2.0', '2.1'],
                      handle: 'Adaptable',
                      title: 'Create content that can be presented in different ways (for example simpler layout) without losing information or structure.',
                      successcriteria: [
                          {
                              id: 'WCAG2:info-and-relationships',
                              alt_id: ['content-structure-separation-programmatic'],
                              num: '1.3.1',
                              versions: ['2.0', '2.1'],
                              level: 'A',
                              handle: 'Info and Relationships',
                              title: 'Information, structure, and relationships conveyed through presentation can be programmatically determined or are available in text.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              situations: [
                                                  {
                                                      title: 'Situation A: The technology provides semantic structure to make information and relationships conveyed through presentation programmatically determinable:',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:ARIA11',
                                                              title: 'Using ARIA landmarks to identify regions of a page'
                                                          },
                                                          {
                                                              id: 'TECH:ARIA12',
                                                              title: 'Using role=heading to identify headings'
                                                          },
                                                          {
                                                              id: 'TECH:ARIA13',
                                                              title: 'Using aria-labelledby to name regions and landmarks'
                                                          },
                                                          {
                                                              id: 'TECH:ARIA16',
                                                              title: 'Using aria-labelledby to provide a name for user interface controls'
                                                          },
                                                          {
                                                              id: 'TECH:ARIA17',
                                                              title: 'Using grouping roles to identify related form controls'
                                                          },
                                                          {
                                                              id: 'TECH:ARIA20',
                                                              title: 'Using the region role to identify a region of the page'
                                                          },
                                                          {
                                                              and: [
                                                                  {
                                                                      id: 'TECH:G115',
                                                                      title: 'Using semantic elements to mark up structure'
                                                                  },
                                                                  {
                                                                      id: 'TECH:H49',
                                                                      title: 'Using semantic markup to mark emphasized or special text'
                                                                  }
                                                              ]
                                                          },
                                                          {
                                                              id: 'TECH:G117',
                                                              title: 'Using text to convey information that is conveyed by variations in presentation of text'
                                                          },
                                                          {
                                                              id: 'TECH:G140',
                                                              title: 'Separating information and structure from presentation to enable different presentations'
                                                          },
                                                          {
                                                              id: 'TECH:ARIA24',
                                                              title: 'Semantically identifying a font icon with role="img"'
                                                          },
                                                          {
                                                              id: 'TECH:text',
                                                              title: 'Making information and relationships conveyed through presentation programmatically determinable using the following techniques:',
                                                              using: [
                                                                  {
                                                                      id: 'TECH:G138',
                                                                      title: 'Using semantic markup whenever color cues are used'
                                                                  },
                                                                  {
                                                                      id: 'TECH:H51',
                                                                      title: 'Using table markup to present tabular information'
                                                                  },
                                                                  {
                                                                      id: 'TECH:PDF6',
                                                                      title: 'Using table elements for table markup in PDF Documents'
                                                                  },
                                                                  {
                                                                      id: 'TECH:PDF20',
                                                                      title: 'Using Adobe Acrobat Pro\'s Table Editor to repair mistagged tables'
                                                                  },
                                                                  {
                                                                      id: 'TECH:H39',
                                                                      title: 'Using caption elements to associate data table captions with data tables'
                                                                  },
                                                                  {
                                                                      id: 'TECH:FLASH31',
                                                                      title: 'Specifying caption text for a DataGrid'
                                                                  },
                                                                  {
                                                                      id: 'TECH:H73',
                                                                      title: 'Using the summary attribute of the table element to give an overview of data tables'
                                                                  },
                                                                  {
                                                                      id: 'TECH:FLASH23',
                                                                      title: 'Adding summary information to a DataGrid'
                                                                  },
                                                                  {
                                                                      id: 'TECH:H63',
                                                                      title: 'Using the scope attribute to associate header cells and data cells in data tables'
                                                                  },
                                                                  {
                                                                      id: 'TECH:H43',
                                                                      title: 'Using id and headers attributes to associate data cells with header cells in data tables'
                                                                  },
                                                                  {
                                                                      id: 'TECH:FLASH21',
                                                                      title: 'Using the DataGrid component to associate column headers with cells'
                                                                  },
                                                                  {
                                                                      id: 'TECH:H44',
                                                                      title: 'Using label elements to associate text labels with form controls'
                                                                  },
                                                                  {
                                                                      id: 'TECH:H65',
                                                                      title: 'Using the title attribute to identify form controls when the label element cannot be used'
                                                                  },
                                                                  {
                                                                      id: 'TECH:PDF10',
                                                                      title: 'Providing labels for interactive form controls in PDF documents'
                                                                  },
                                                                  {
                                                                      id: 'TECH:PDF12',
                                                                      title: 'Providing name, role, value information for form fields in PDF documents'
                                                                  },
                                                                  {
                                                                      id: 'TECH:FLASH32',
                                                                      title: 'Using auto labeling to associate text labels with form controls'
                                                                  },
                                                                  {
                                                                      id: 'TECH:FLASH29',
                                                                      title: 'Setting the label property for form components'
                                                                  },
                                                                  {
                                                                      id: 'TECH:FLASH25',
                                                                      title: 'Labeling a form control by setting its accessible name'
                                                                  },
                                                                  {
                                                                      id: 'TECH:H71',
                                                                      title: 'Providing a description for groups of form controls using fieldset and legend elements'
                                                                  },
                                                                  {
                                                                      id: 'TECH:SL20',
                                                                      title: 'Relying on Silverlight AutomationPeer Behavior to Set AutomationProperties.Name'
                                                                  },
                                                                  {
                                                                      id: 'TECH:SL26',
                                                                      title: 'Using LabeledBy to Associate Labels and Targets in Silverlight'
                                                                  },
                                                                  {
                                                                      id: 'TECH:H85',
                                                                      title: 'Using OPTGROUP to group OPTION elements inside a SELECT'
                                                                  },
                                                                  {
                                                                      id: 'TECH:H48',
                                                                      title: 'Using ol, ul and dl for lists or groups of links'
                                                                  },
                                                                  {
                                                                      id: 'TECH:H42',
                                                                      title: 'Using h1-h6 to identify headings'
                                                                  },
                                                                  {
                                                                      id: 'TECH:PDF9',
                                                                      title: 'Providing headings by marking content with heading tags in PDF documents'
                                                                  },
                                                                  {
                                                                      id: 'TECH:SCR21',
                                                                      title: 'Using functions of the Document Object Model (DOM) to add content to a page'
                                                                  },
                                                                  {
                                                                      id: 'TECH:PDF11',
                                                                      title: 'Providing links and link text using the Link annotation and the /Link structure element in PDF documents'
                                                                  },
                                                                  {
                                                                      id: 'TECH:PDF17',
                                                                      title: 'Specifying consistent page numbering for PDF documents'
                                                                  },
                                                                  {
                                                                      id: 'TECH:PDF21',
                                                                      title: 'Using List tags for lists in PDF documents'
                                                                  },
                                                                  {
                                                                      id: 'TECH:H97',
                                                                      title: 'Grouping related links using the nav element'
                                                                  }
                                                              ]
                                                          }
                                                      ]
                                                  },
                                                  {
                                                      title: 'Situation B: The technology in use does NOT provide the semantic structure to make the information and relationships conveyed through presentation programmatically determinable:',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:G117',
                                                              title: 'Using text to convey information that is conveyed by variations in presentation of text'
                                                          },
                                                          {
                                                              id: 'TECH:FLASH8',
                                                              title: 'Adding a group name to the accessible name of a form control'
                                                          },
                                                          {
                                                              id: 'TECH:text',
                                                              title: 'Making information and relationships conveyed through presentation programmatically determinable or available in text using the following techniques:',
                                                              using: [
                                                                  {
                                                                      id: 'TECH:T1',
                                                                      title: 'Using standard text formatting conventions for paragraphs'
                                                                  },
                                                                  {
                                                                      id: 'TECH:T2',
                                                                      title: 'Using standard text formatting conventions for lists'
                                                                  },
                                                                  {
                                                                      id: 'TECH:T3',
                                                                      title: 'Using standard text formatting conventions for headings'
                                                                  }
                                                              ]
                                                          }
                                                      ]
                                                  }
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      advisory: [
                                          {
                                              id: 'TECH:C22',
                                              title: 'Using CSS to control visual presentation of text'
                                          },
                                          {
                                              id: 'TECH:G162',
                                              title: 'Positioning labels to maximize predictability of relationships'
                                          },
                                          {
                                              id: 'TECH:ARIA1',
                                              title: 'Using the aria-describedby property to provide a descriptive label for user interface controls'
                                          },
                                          {
                                              id: 'TECH:ARIA2',
                                              title: 'Identifying a required field with the aria-required property'
                                          },
                                          {
                                              id: 'TECH:G141',
                                              title: 'Organizing a page using headings'
                                          }
                                      ]
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:F2',
                                              title: 'Failure of Success Criterion 1.3.1 due to using changes in text presentation to convey information without using the appropriate markup or text'
                                          },
                                          {
                                              id: 'TECH:F33',
                                              title: 'Failure of Success Criterion 1.3.1 and 1.3.2 due to using white space characters to create multiple columns in plain text content'
                                          },
                                          {
                                              id: 'TECH:F34',
                                              title: 'Failure of Success Criterion 1.3.1 and 1.3.2 due to using white space characters to format tables in plain text content'
                                          },
                                          {
                                              id: 'TECH:F42',
                                              title: 'Failure of Success Criteria 1.3.1, 2.1.1, 2.1.3, or 4.1.2 when emulating links'
                                          },
                                          {
                                              id: 'TECH:F43',
                                              title: 'Failure of Success Criterion 1.3.1 due to using structural markup in a way that does not represent relationships in the content'
                                          },
                                          {
                                              id: 'TECH:F46',
                                              title: 'Failure of Success Criterion 1.3.1 due to using th elements, layout tables'
                                          },
                                          {
                                              id: 'TECH:F48',
                                              title: 'Failure of Success Criterion 1.3.1 due to using the pre element to markup tabular information'
                                          },
                                          {
                                              id: 'TECH:F87',
                                              title: 'Failure of Success Criterion 1.3.1 due to inserting non-decorative content by using :before and :after pseudo-elements and the \'content\' property in CSS'
                                          },
                                          {
                                              id: 'TECH:F90',
                                              title: 'Failure of Success Criterion 1.3.1 for incorrectly associating table headers and content via the headers and id attributes'
                                          },
                                          {
                                              id: 'TECH:F91',
                                              title: 'Failure of Success Criterion 1.3.1 for not correctly marking up table headers'
                                          },
                                          {
                                              id: 'TECH:F92',
                                              title: 'Failure of Success Criterion 1.3.1 due to the use of role presentation on content which conveys semantic information'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:meaningful-sequence',
                              alt_id: ['content-structure-separation-sequence'],
                              num: '1.3.2',
                              versions: ['2.0', '2.1'],
                              level: 'A',
                              handle: 'Meaningful Sequence',
                              title: 'When the sequence in which content is presented affects its meaning, a correct reading sequence can be programmatically determined.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:G57',
                                              title: 'Ordering the content in a meaningful sequence'
                                          },
                                          {
                                              and: [
                                                  {
                                                      id: 'TECH:text1',
                                                      title: 'Marking sequences in the content as meaningful'
                                                  },
                                                  {
                                                      id: 'TECH:G57',
                                                      title: 'Ordering the content in a meaningful sequence',
                                                      using: [
                                                          {
                                                              id: 'TECH:H34',
                                                              title: 'Using a Unicode right-to-left mark (RLM) or left-to-right mark (LRM) to mix text direction inline'
                                                          },
                                                          {
                                                              id: 'TECH:H56',
                                                              title: 'Using the dir attribute on an inline element to resolve problems with nested directional runs'
                                                          },
                                                          {
                                                              id: 'TECH:C6',
                                                              title: 'Positioning content based on structural markup'
                                                          },
                                                          {
                                                              id: 'TECH:C8',
                                                              title: 'Using CSS letter-spacing to control spacing within a word'
                                                          }
                                                      ]
                                                  }
                                              ]
                                          },
                                          {
                                              id: 'TECH:C27',
                                              title: 'Making the DOM order match the visual order'
                                          },
                                          {
                                              id: 'TECH:FLASH15',
                                              title: 'Using the tabIndex property to specify a logical reading order and a logical tab order in Flash'
                                          },
                                          {
                                              id: 'TECH:PDF3',
                                              title: 'Ensuring correct tab and reading order in PDF documents'
                                          },
                                          {
                                              id: 'TECH:SL34',
                                              title: 'Using the Silverlight Default Tab Sequence and Altering Tab Sequences With Properties'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: []
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:F34',
                                              title: 'Failure of Success Criterion 1.3.1 and 1.3.2 due to using white space characters to format tables in plain text content'
                                          },
                                          {
                                              id: 'TECH:F33',
                                              title: 'Failure of Success Criterion 1.3.1 and 1.3.2 due to using white space characters to create multiple columns in plain text content'
                                          },
                                          {
                                              id: 'TECH:F32',
                                              title: 'Failure of Success Criterion 1.3.2 due to using white space characters to control spacing within a word'
                                          },
                                          {
                                              id: 'TECH:F49',
                                              title: 'Failure of Success Criterion 1.3.2 due to using an HTML layout table that does not make sense when linearized'
                                          },
                                          {
                                              id: 'TECH:F1',
                                              title: 'Failure of Success Criterion 1.3.2 due to changing the meaning of content by positioning information with CSS'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:sensory-characteristics',
                              alt_id: ['content-structure-separation-understanding'],
                              num: '1.3.3',
                              versions: ['2.0', '2.1'],
                              level: 'A',
                              handle: 'Sensory Characteristics',
                              title: 'Instructions provided for understanding and operating content do not rely solely on sensory characteristics of components such as shape, color, size, visual location, orientation, or sound.',
                              details: [
                                  {
                                      type: 'note',
                                      handle: 'Note 1',
                                      text: 'For requirements related to color, refer to Guideline 1.4.'
                                  }
                              ],
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:G96',
                                              title: 'Providing textual identification of items that otherwise rely only on sensory information to be understood'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: []
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:F14',
                                              title: 'Failure of Success Criterion 1.3.3 due to identifying content only by its shape or location'
                                          },
                                          {
                                              id: 'TECH:F26',
                                              title: 'Failure of Success Criterion 1.3.3 due to using a graphical symbol alone to convey information'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:orientation',
                              alt_id: [],
                              num: '1.3.4',
                              versions: ['2.1'],
                              level: 'AA',
                              handle: 'Orientation',
                              title: 'Content does not restrict its view and operation to a single display orientation, such as portrait or landscape, unless a specific display orientation is essential.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:text',
                                              title: 'Using CSS to set the orientation to allow both landscape and portrait.'
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: 'Use of show/hide controls to allow access to content in different orientations.'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: []
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:F97',
                                              title: 'Failure due to locking the orientation to landscape or portrait view'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:identify-input-purpose',
                              alt_id: [],
                              num: '1.3.5',
                              versions: ['2.1'],
                              level: 'AA',
                              handle: 'Identify Input Purpose',
                              title: 'The purpose of each input field collecting information about the user can be programmatically determined when:',
                              details: [
                                  {
                                      type: 'ulist',
                                      items: [
                                          {
                                              text: 'The input field serves a purpose identified in the Input Purposes for User Interface Components section; and'
                                          },
                                          {
                                              text: 'The content is implemented using technologies with support for identifying the expected meaning for form input data.'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:identify-purpose',
                              alt_id: [],
                              num: '1.3.6',
                              versions: ['2.1'],
                              level: 'AAA',
                              handle: 'Identify Purpose',
                              title: 'In content implemented using markup languages, the purpose of User Interface Components, icons, and regions can be programmatically determined.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:ARIA11',
                                              title: 'Using ARIA landmarks to identify regions of a page'
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: 'Using microdata to markup user interface components (future link)'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: [
                                          {
                                              id: 'TECH:text',
                                              title: 'Enable user agents to find the version of the content that best fits their needs.'
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: 'Using semantics to identify important features (coga-simplification="simplest").'
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: 'Use of aria-invalid and aria-required.'
                                          }
                                      ]
                                  },
                                  {
                                      failure: []
                                  }
                              ]
                          }
                      ],
                      techniques: []
                  },
                  {
                      id: 'WCAG2:distinguishable',
                      alt_id: ['visual-audio-contrast'],
                      num: '1.4',
                      versions: ['2.0', '2.1'],
                      handle: 'Distinguishable',
                      title: 'Make it easier for users to see and hear content including separating foreground from background.',
                      successcriteria: [
                          {
                              id: 'WCAG2:use-of-color',
                              alt_id: ['visual-audio-contrast-without-color'],
                              num: '1.4.1',
                              versions: ['2.0', '2.1'],
                              level: 'A',
                              handle: 'Use of Color',
                              title: 'Color is not used as the only visual means of conveying information, indicating an action, prompting a response, or distinguishing a visual element.',
                              details: [
                                  {
                                      type: 'note',
                                      handle: 'Note 1',
                                      text: 'This success criterion addresses color perception specifically. Other forms of perception are covered in Guideline 1.3 including programmatic access to color and other visual presentation coding.'
                                  }
                              ],
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              situations: [
                                                  {
                                                      title: 'Situation A: If the color of particular words, backgrounds, or other content is used to indicate information:',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:G14',
                                                              title: 'Ensuring that information conveyed by color differences is also available in text'
                                                          },
                                                          {
                                                              id: 'TECH:G205',
                                                              title: 'Including a text cue for colored form control labels'
                                                          },
                                                          {
                                                              id: 'TECH:G182',
                                                              title: 'Ensuring that additional visual cues are available when text color differences are used to convey information'
                                                          },
                                                          {
                                                              id: 'TECH:G183',
                                                              title: 'Using a contrast ratio of 3:1 with surrounding text and providing additional visual cues on focus for links or controls where color alone is used to identify them'
                                                          }
                                                      ]
                                                  },
                                                  {
                                                      title: 'Situation B: If color is used within an image to convey information:',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:G111',
                                                              title: 'Using color and pattern'
                                                          },
                                                          {
                                                              id: 'TECH:G14',
                                                              title: 'Ensuring that information conveyed by color differences is also available in text'
                                                          }
                                                      ]
                                                  }
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      advisory: [
                                          {
                                              id: 'TECH:C15',
                                              title: 'Using CSS to change the presentation of a user interface component when it receives focus'
                                          }
                                      ]
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:F13',
                                              title: 'Failure of Success Criterion 1.1.1 and 1.4.1 due to having a text alternative that does not include information that is conveyed by color differences in the image'
                                          },
                                          {
                                              id: 'TECH:F73',
                                              title: 'Failure of Success Criterion 1.4.1 due to creating links that are not visually evident without color vision'
                                          },
                                          {
                                              id: 'TECH:F81',
                                              title: 'Failure of Success Criterion 1.4.1 due to identifying required or error fields using color differences only'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:audio-control',
                              alt_id: ['visual-audio-contrast-dis-audio'],
                              num: '1.4.2',
                              versions: ['2.0', '2.1'],
                              level: 'A',
                              handle: 'Audio Control',
                              title: 'If any audio on a Web page plays automatically for more than 3 seconds, either a mechanism is available to pause or stop the audio, or a mechanism is available to control audio volume independently from the overall system volume level.',
                              details: [
                                  {
                                      type: 'note',
                                      handle: 'Note 1',
                                      text: 'Since any content that does not meet this success criterion can interfere with a user\'s ability to use the whole page, all content on the Web page (whether or not it is used to meet other success criteria) must meet this success criterion. See Conformance Requirement 5: Non-Interference.'
                                  }
                              ],
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:G60',
                                              title: 'Playing a sound that turns off automatically within three seconds'
                                          },
                                          {
                                              id: 'TECH:G170',
                                              title: 'Providing a control near the beginning of the Web page that turns off sounds that play automatically'
                                          },
                                          {
                                              id: 'TECH:G171',
                                              title: 'Playing sounds only on user request'
                                          },
                                          {
                                              id: 'TECH:SL24',
                                              title: 'Using AutoPlay to Keep Silverlight Media from Playing Automatically'
                                          },
                                          {
                                              id: 'TECH:FLASH18',
                                              title: 'Providing a control to turn off sounds that play automatically in Flash'
                                          },
                                          {
                                              id: 'TECH:FLASH34',
                                              title: 'Turning off sounds that play automatically when an assistive technology is detected'
                                          },
                                          {
                                              id: 'TECH:SL3',
                                              title: 'Controlling Silverlight MediaElement Audio Volume'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: []
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:F23',
                                              title: 'Failure of 1.4.2 due to playing a sound longer than 3 seconds where there is no mechanism to turn it off'
                                          },
                                          {
                                              id: 'TECH:F93',
                                              title: 'Failure of Success Criterion 1.4.2 for absence of a way to pause or stop an HTML5 media element that autoplays'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:contrast-minimum',
                              alt_id: ['visual-audio-contrast-contrast'],
                              num: '1.4.3',
                              versions: ['2.0', '2.1'],
                              level: 'AA',
                              handle: 'Contrast (Minimum)',
                              title: 'The visual presentation of text and images of text has a contrast ratio of at least 4.5:1, except for the following:',
                              details: [
                                  {
                                      type: 'ulist',
                                      items: [
                                          {
                                              handle: 'Large Text',
                                              text: 'Large-scale text and images of large-scale text have a contrast ratio of at least 3:1;'
                                          },
                                          {
                                              handle: 'Incidental',
                                              text: 'Text or images of text that are part of an inactive user interface component, that are pure decoration, that are not visible to anyone, or that are part of a picture that contains significant other visual content, have no contrast requirement.'
                                          },
                                          {
                                              handle: 'Logotypes',
                                              text: 'Text that is part of a logo or brand name has no contrast requirement.'
                                          }
                                      ]
                                  }
                              ],
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              situations: [
                                                  {
                                                      title: 'Situation A: text is less than 18 point if not bold and less than 14 point if bold',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:G18',
                                                              title: 'Ensuring that a contrast ratio of at least 4.5:1 exists between text (and images of text) and background behind the text'
                                                          },
                                                          {
                                                              id: 'TECH:G148',
                                                              title: 'Not specifying background color, not specifying text color, and not using technology features that change those defaults'
                                                          },
                                                          {
                                                              id: 'TECH:G174',
                                                              title: 'Providing a control with a sufficient contrast ratio that allows users to switch to a presentation that uses sufficient contrast'
                                                          },
                                                          {
                                                              id: 'TECH:SL13',
                                                              title: 'Providing A Style Switcher To Switch To High Contrast'
                                                          }
                                                      ]
                                                  },
                                                  {
                                                      title: 'Situation B: text is at least 18 point if not bold and at least 14 point if bold',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:G145',
                                                              title: 'Ensuring that a contrast ratio of at least 3:1 exists between text (and images of text) and background behind the text'
                                                          },
                                                          {
                                                              id: 'TECH:G148',
                                                              title: 'Not specifying background color, not specifying text color, and not using technology features that change those defaults'
                                                          },
                                                          {
                                                              id: 'TECH:G174',
                                                              title: 'Providing a control with a sufficient contrast ratio that allows users to switch to a presentation that uses sufficient contrast'
                                                          },
                                                          {
                                                              id: 'TECH:SL13',
                                                              title: 'Providing A Style Switcher To Switch To High Contrast'
                                                          }
                                                      ]
                                                  }
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      advisory: [
                                          {
                                              id: 'TECH:G156',
                                              title: 'Using a technology that has commonly-available user agents that can change the foreground and background of blocks of text'
                                          }
                                      ]
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:F24',
                                              title: 'Failure of Success Criterion 1.4.3, 1.4.6 and 1.4.8 due to specifying foreground colors without specifying background colors or vice versa'
                                          },
                                          {
                                              id: 'TECH:F83',
                                              title: 'Failure of Success Criterion 1.4.3 and 1.4.6 due to using background images that do not provide sufficient contrast with foreground text (or images of text)'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:resize-text',
                              alt_id: ['visual-audio-contrast-scale'],
                              num: '1.4.4',
                              versions: ['2.0', '2.1'],
                              level: 'AA',
                              handle: 'Resize text',
                              title: 'Except for captions and images of text, text can be resized without assistive technology up to 200 percent without loss of content or functionality.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:G142',
                                              title: 'Using a technology that has commonly-available user agents that support zoom'
                                          },
                                          {
                                              id: 'TECH:SL22',
                                              title: 'Supporting Browser Zoom in Silverlight'
                                          },
                                          {
                                              id: 'TECH:SL23',
                                              title: 'Using A Style Switcher to Increase Font Size of Silverlight Text Elements'
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: 'Ensuring that text containers resize when the text resizes AND using measurements that are relative to other measurements in the content by using one or more of the following techniques:',
                                              using: [
                                                  {
                                                      id: 'TECH:C28',
                                                      title: 'Specifying the size of text containers using em units'
                                                  },
                                                  {
                                                      id: 'TECH:text',
                                                      title: 'Techniques for relative measurements',
                                                      using: [
                                                          {
                                                              id: 'TECH:C12',
                                                              title: 'Using percent for font sizes'
                                                          },
                                                          {
                                                              id: 'TECH:C13',
                                                              title: 'Using named font sizes'
                                                          },
                                                          {
                                                              id: 'TECH:C14',
                                                              title: 'Using em units for font sizes'
                                                          }
                                                      ]
                                                  },
                                                  {
                                                      id: 'TECH:text',
                                                      title: 'Techniques for text container resizing',
                                                      using: [
                                                          {
                                                              id: 'TECH:SCR34',
                                                              title: 'Calculating size and position in a way that scales with text size'
                                                          },
                                                          {
                                                              id: 'TECH:G146',
                                                              title: 'Using liquid layout'
                                                          }
                                                      ]
                                                  }
                                              ]
                                          },
                                          {
                                              id: 'TECH:G178',
                                              title: 'Providing controls on the Web page that allow users to incrementally change the size of all text on the page up to 200 percent'
                                          },
                                          {
                                              id: 'TECH:G179',
                                              title: 'Ensuring that there is no loss of content or functionality when the text resizes and text containers do not change their width'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: [
                                          {
                                              id: 'TECH:C17',
                                              title: 'Scaling form elements which contain text'
                                          },
                                          {
                                              id: 'TECH:C20',
                                              title: 'Using relative measurements to set column widths so that lines can average 80 characters or less when the browser is resized'
                                          },
                                          {
                                              id: 'TECH:C22',
                                              title: 'Using CSS to control visual presentation of text'
                                          }
                                      ]
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:F69',
                                              title: 'Failure of Success Criterion 1.4.4 when resizing visually rendered text up to 200 percent causes the text, image or controls to be clipped, truncated or obscured'
                                          },
                                          {
                                              id: 'TECH:F80',
                                              title: 'Failure of Success Criterion 1.4.4 when text-based form controls do not resize when visually rendered text is resized up to 200%'
                                          },
                                          {
                                              id: 'TECH:F94',
                                              title: 'Failure of Success Criterion 1.4.4 due to text sized in viewport units'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:images-of-text',
                              alt_id: ['visual-audio-contrast-text-presentation'],
                              num: '1.4.5',
                              versions: ['2.0', '2.1'],
                              level: 'AA',
                              handle: 'Images of Text',
                              title: 'If the technologies being used can achieve the visual presentation, text is used to convey information rather than images of text except for the following:',
                              details: [
                                  {
                                      type: 'ulist',
                                      items: [
                                          {
                                              handle: 'Customizable',
                                              text: 'The image of text can be visually customized to the user\'s requirements;'
                                          },
                                          {
                                              handle: 'Essential',
                                              text: 'A particular presentation of text is essential to the information being conveyed.'
                                          }
                                      ]
                                  },
                                  {
                                      type: 'note',
                                      handle: 'Note 1',
                                      text: 'Logotypes (text that is part of a logo or brand name) are considered essential.'
                                  }
                              ],
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:C22',
                                              title: 'Using CSS to control visual presentation of text'
                                          },
                                          {
                                              id: 'TECH:SL31',
                                              title: 'Using Silverlight Font Properties to Control Text Presentation'
                                          },
                                          {
                                              id: 'TECH:C30',
                                              title: 'Using CSS to replace text with images of text and providing user interface controls to switch'
                                          },
                                          {
                                              id: 'TECH:G140',
                                              title: 'Separating information and structure from presentation to enable different presentations'
                                          },
                                          {
                                              id: 'TECH:PDF7',
                                              title: 'Performing OCR on a scanned PDF document to provide actual text'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: [
                                          {
                                              id: 'TECH:C12',
                                              title: 'Using percent for font sizes'
                                          },
                                          {
                                              id: 'TECH:C13',
                                              title: 'Using named font sizes'
                                          },
                                          {
                                              id: 'TECH:C14',
                                              title: 'Using em units for font sizes'
                                          },
                                          {
                                              id: 'TECH:C8',
                                              title: 'Using CSS letter-spacing to control spacing within a word'
                                          },
                                          {
                                              id: 'TECH:C6',
                                              title: 'Positioning content based on structural markup'
                                          }
                                      ]
                                  },
                                  {
                                      failure: []
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:contrast-enhanced',
                              alt_id: ['visual-audio-contrast7'],
                              num: '1.4.6',
                              versions: ['2.0', '2.1'],
                              level: 'AAA',
                              handle: 'Contrast (Enhanced)',
                              title: 'The visual presentation of text and images of text has a contrast ratio of at least 7:1, except for the following:',
                              details: [
                                  {
                                      type: 'ulist',
                                      items: [
                                          {
                                              handle: 'Large Text',
                                              text: 'Large-scale text and images of large-scale text have a contrast ratio of at least 4.5:1;'
                                          },
                                          {
                                              handle: 'Incidental',
                                              text: 'Text or images of text that are part of an inactive user interface component, that are pure decoration, that are not visible to anyone, or that are part of a picture that contains significant other visual content, have no contrast requirement.'
                                          },
                                          {
                                              handle: 'Logotypes',
                                              text: 'Text that is part of a logo or brand name has no contrast requirement.'
                                          }
                                      ]
                                  }
                              ],
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              situations: [
                                                  {
                                                      title: 'Situation A: text is less than 18 point if not bold and less than 14 point if bold',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:G17',
                                                              title: 'Ensuring that a contrast ratio of at least 7:1 exists between text (and images of text) and background behind the text'
                                                          },
                                                          {
                                                              id: 'TECH:G148',
                                                              title: 'Not specifying background color, not specifying text color, and not using technology features that change those defaults'
                                                          },
                                                          {
                                                              id: 'TECH:G174',
                                                              title: 'Providing a control with a sufficient contrast ratio that allows users to switch to a presentation that uses sufficient contrast'
                                                          },
                                                          {
                                                              id: 'TECH:SL13',
                                                              title: 'Providing A Style Switcher To Switch To High Contrast'
                                                          }
                                                      ]
                                                  },
                                                  {
                                                      title: 'Situation B: text is as least 18 point if not bold and at least 14 point if bold',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:G18',
                                                              title: 'Ensuring that a contrast ratio of at least 4.5:1 exists between text (and images of text) and background behind the text'
                                                          },
                                                          {
                                                              id: 'TECH:G148',
                                                              title: 'Not specifying background color, not specifying text color, and not using technology features that change those defaults'
                                                          },
                                                          {
                                                              id: 'TECH:G174',
                                                              title: 'Providing a control with a sufficient contrast ratio that allows users to switch to a presentation that uses sufficient contrast'
                                                          },
                                                          {
                                                              id: 'TECH:SL13',
                                                              title: 'Providing A Style Switcher To Switch To High Contrast'
                                                          }
                                                      ]
                                                  }
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      advisory: [
                                          {
                                              id: 'TECH:G156',
                                              title: 'Using a technology that has commonly-available user agents that can change the foreground and background of blocks of text'
                                          }
                                      ]
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:F24',
                                              title: 'Failure of Success Criterion 1.4.3, 1.4.6 and 1.4.8 due to specifying foreground colors without specifying background colors or vice versa'
                                          },
                                          {
                                              id: 'TECH:F83',
                                              title: 'Failure of Success Criterion 1.4.3 and 1.4.6 due to using background images that do not provide sufficient contrast with foreground text (or images of text)'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:low-or-no-background-audio',
                              alt_id: ['visual-audio-contrast-noaudio'],
                              num: '1.4.7',
                              versions: ['2.0', '2.1'],
                              level: 'AAA',
                              handle: 'Low or No Background Audio',
                              title: 'For prerecorded audio-only content that (1) contains primarily speech in the foreground, (2) is not an audio CAPTCHA or audio logo, and (3) is not vocalization intended to be primarily musical expression such as singing or rapping, at least one of the following is true:',
                              details: [
                                  {
                                      type: 'ulist',
                                      items: [
                                          {
                                              handle: 'No Background',
                                              text: 'The audio does not contain background sounds.'
                                          },
                                          {
                                              handle: 'Turn Off',
                                              text: 'The background sounds can be turned off.'
                                          },
                                          {
                                              handle: '20 dB',
                                              text: 'The background sounds are at least 20 decibels lower than the foreground speech content, with the exception of occasional sounds that last for only one or two seconds. Per the definition of "decibel," background sound that meets this requirement will be approximately four times quieter than the foreground speech content.'
                                          }
                                      ]
                                  }
                              ],
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:G56',
                                              title: 'Mixing audio files so that non-speech sounds are at least 20 decibels lower than the speech audio content'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: []
                                  },
                                  {
                                      failure: []
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:visual-presentation',
                              alt_id: ['visual-audio-contrast-visual-presentation'],
                              num: '1.4.8',
                              versions: ['2.0', '2.1'],
                              level: 'AAA',
                              handle: 'Visual Presentation',
                              title: 'For the visual presentation of blocks of text, a mechanism is available to achieve the following:',
                              details: [
                                  {
                                      type: 'olist',
                                      items: [
                                          {
                                              handle: '',
                                              text: 'Foreground and background colors can be selected by the user.'
                                          },
                                          {
                                              handle: '',
                                              text: 'Width is no more than 80 characters or glyphs (40 if CJK).'
                                          },
                                          {
                                              handle: '',
                                              text: 'Text is not justified (aligned to both the left and the right margins).'
                                          },
                                          {
                                              handle: '',
                                              text: 'Line spacing (leading) is at least space-and-a-half within paragraphs, and paragraph spacing is at least 1.5 times larger than the line spacing.'
                                          },
                                          {
                                              handle: '',
                                              text: 'Text can be resized without assistive technology up to 200 percent in a way that does not require the user to scroll horizontally to read a line of text on a full-screen window.'
                                          }
                                      ]
                                  }
                              ],
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              situations: [
                                                  {
                                                      title: 'First Requirement: Techniques to ensure foreground and background colors can be selected by the user',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:C23',
                                                              title: 'Specifying text and background colors of secondary content such as banners, features and navigation in CSS while not specifying text and background colors of the main content',
                                                              append: 'OR'
                                                          },
                                                          {
                                                              id: 'TECH:C25',
                                                              title: 'Specifying borders and layout in CSS to delineate areas of a Web page while not specifying text and text-background colors',
                                                              append: 'OR'
                                                          },
                                                          {
                                                              id: 'TECH:G156',
                                                              title: 'Using a technology that has commonly-available user agents that can change the foreground and background of blocks of text',
                                                              append: 'OR'
                                                          },
                                                          {
                                                              id: 'TECH:G148',
                                                              title: 'Not specifying background color, not specifying text color, and not using technology features that change those defaults',
                                                              append: 'OR'
                                                          },
                                                          {
                                                              id: 'TECH:G175',
                                                              title: 'Providing a multi color selection tool on the page for foreground and background colors',
                                                              append: 'OR'
                                                          }
                                                      ]
                                                  },
                                                  {
                                                      title: 'Second Requirement: Techniques to ensure width is no more than 80 characters or glyphs (40 if CJK)',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:G204',
                                                              title: 'Not interfering with the user agent\'s reflow of text as the viewing window is narrowed',
                                                              append: 'OR'
                                                          },
                                                          {
                                                              id: 'TECH:C20',
                                                              title: 'Using relative measurements to set column widths so that lines can average 80 characters or less when the browser is resized'
                                                          }
                                                      ]
                                                  },
                                                  {
                                                      title: 'Third Requirement: Techniques to ensure text is not justified (aligned to both the left and the right margins)',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:C19',
                                                              title: 'Specifying alignment either to the left OR right in CSS',
                                                              append: 'OR'
                                                          },
                                                          {
                                                              id: 'TECH:G172',
                                                              title: 'Providing a mechanism to remove full justification of text',
                                                              append: 'OR'
                                                          },
                                                          {
                                                              id: 'TECH:G169',
                                                              title: 'Aligning text on only one side'
                                                          }
                                                      ]
                                                  },
                                                  {
                                                      title: 'Fourth Requirement: Techniques to ensure line spacing (leading) is at least space-and-a-half within paragraphs, and paragraph spacing is at least 1.5 times larger than the line spacing',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:G188',
                                                              title: 'Providing a button on the page to increase line spaces and paragraph spaces',
                                                              append: 'OR'
                                                          },
                                                          {
                                                              id: 'TECH:C21',
                                                              title: 'Specifying line spacing in CSS'
                                                          }
                                                      ]
                                                  },
                                                  {
                                                      title: 'Fifth Requirement: Techniques to ensure text can be resized without assistive technology up to 200 percent in a way that does not require the user to scroll horizontally to read a line of text on a full-screen window',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:text',
                                                              title: 'Not interfering with the user agent\'s reflow of text as the viewing window is narrowed',
                                                              append: 'OR'
                                                          },
                                                          {
                                                              id: 'TECH:G146',
                                                              title: 'Using liquid layout',
                                                              append: 'AND using measurements that are relative to other measurements in the content by',
                                                              using: [
                                                                  {
                                                                      id: 'TECH:C12',
                                                                      title: 'Using percent for font sizes',
                                                                      append: 'OR'
                                                                  },
                                                                  {
                                                                      id: 'TECH:C13',
                                                                      title: 'Using named font sizes',
                                                                      append: 'OR'
                                                                  },
                                                                  {
                                                                      id: 'TECH:C14',
                                                                      title: 'Using em units for font sizes',
                                                                      append: 'OR'
                                                                  },
                                                                  {
                                                                      id: 'TECH:C24',
                                                                      title: 'Using percentage values in CSS for container sizes',
                                                                      append: 'OR'
                                                                  },
                                                                  {
                                                                      id: 'TECH:FLASH33',
                                                                      title: 'Using relative values for Flash object dimensions',
                                                                      append: 'OR'
                                                                  },
                                                                  {
                                                                      id: 'TECH:SCR34',
                                                                      title: 'Calculating size and position in a way that scales with text size'
                                                                  }
                                                              ]
                                                          },
                                                          {
                                                              id: 'TECH:G206',
                                                              title: 'Providing options within the content to switch to a layout that does not require the user to scroll horizontally to read a line of text'
                                                          }
                                                      ]
                                                  }
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      advisory: []
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:F24',
                                              title: 'Failure of Success Criterion 1.4.3, 1.4.6 and 1.4.8 due to specifying foreground colors without specifying background colors or vice versa'
                                          },
                                          {
                                              id: 'TECH:F88',
                                              title: 'Failure of Success Criterion 1.4.8 due to using text that is justified (aligned to both the left and the right margins)'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:images-of-text-no-exception',
                              alt_id: ['visual-audio-contrast-text-images'],
                              num: '1.4.9',
                              versions: ['2.0', '2.1'],
                              level: 'AAA',
                              handle: 'Images of Text (No Exception)',
                              title: 'Images of text are only used for pure decoration or where a particular presentation of text is essential to the information being conveyed.',
                              details: [
                                  {
                                      type: 'note',
                                      handle: 'Note 1',
                                      text: 'Logotypes (text that is part of a logo or brand name) are considered essential.'
                                  }
                              ],
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:C22',
                                              title: 'Using CSS to control visual presentation of text'
                                          },
                                          {
                                              id: 'TECH:SL31',
                                              title: 'Using Silverlight Font Properties to Control Text Presentation'
                                          },
                                          {
                                              id: 'TECH:C30',
                                              title: 'Using CSS to replace text with images of text and providing user interface controls to switch'
                                          },
                                          {
                                              id: 'TECH:G140',
                                              title: 'Separating information and structure from presentation to enable different presentations'
                                          },
                                          {
                                              id: 'TECH:PDF7',
                                              title: 'Performing OCR on a scanned PDF document to provide actual text'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: [
                                          {
                                              id: 'TECH:C12',
                                              title: 'Using percent for font sizes'
                                          },
                                          {
                                              id: 'TECH:C13',
                                              title: 'Using named font sizes'
                                          },
                                          {
                                              id: 'TECH:C14',
                                              title: 'Using em units for font sizes'
                                          },
                                          {
                                              id: 'TECH:C8',
                                              title: 'Using CSS letter-spacing to control spacing within a word'
                                          },
                                          {
                                              id: 'TECH:C6',
                                              title: 'Positioning content based on structural markup'
                                          }
                                      ]
                                  },
                                  {
                                      failure: []
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:reflow',
                              alt_id: [],
                              num: '1.4.10',
                              versions: ['2.1'],
                              level: 'AA',
                              handle: 'Reflow',
                              title: 'Content can be presented without loss of information or functionality, and without requiring scrolling in two dimensions for:',
                              details: [
                                  {
                                      type: 'ulist',
                                      items: [
                                          {
                                              text: 'Vertical scrolling content at a width equivalent to 320 CSS pixels;'
                                          },
                                          {
                                              text: 'Horizontal scrolling content at a height equivalent to 256 CSS pixels;'
                                          }
                                      ]
                                  },
                                  {
                                      type: 'p',
                                      text: 'Except for parts of the content which require two-dimensional layout for usage or meaning.'
                                  }
                              ],
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:C32',
                                              title: 'Using media queries and grid CSS to reflow columns'
                                          },
                                          {
                                              id: 'TECH:C31',
                                              title: 'Using CSS Flexbox to reflow content'
                                          },
                                          {
                                              id: 'TECH:C33',
                                              title: 'Allowing for Reflow with Long URLs and Strings of Text'
                                          },
                                          {
                                              id: 'TECH:C38',
                                              title: 'Using CSS width, max-width and flexbox to fit labels and inputs'
                                          },
                                          {
                                              id: 'TECH:SCR34',
                                              title: 'Calculating size and position in a way that scales with text size'
                                          },
                                          {
                                              id: 'TECH:G206',
                                              title: 'Providing options within the content to switch to a layout that does not require the user to scroll horizontally to read a line of text'
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: '@@ New: Using PDF/UA when creating PDFs.'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: [
                                          {
                                              id: 'TECH:C34',
                                              title: 'Using media queries to un-fixing sticky headers / footers'
                                          },
                                          {
                                              id: 'TECH:C37',
                                              title: 'Using CSS max-width and height to fit images'
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: '@@ CSS, Reflowing simple data tables.'
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: '@@ CSS, Fitting data cells within the width of the viewport.'
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: '@@ Mechanism to allow mobile view at any time'
                                          }
                                      ]
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:text',
                                              title: '@@ Using fixed sized containers and fixed position content (CSS)'
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: '@@ (HTML) Using preformatted text or excluding preformatting text as an exception to no two dimensional scrolling.'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:non-text-contrast',
                              alt_id: [],
                              num: '1.4.11',
                              versions: ['2.1'],
                              level: 'AA',
                              handle: 'Non-text Contrast',
                              title: 'The visual presentation of the following have a contrast ratio of at least 3:1 against adjacent color(s):',
                              details: [
                                  {
                                      type: 'ulist',
                                      items: [
                                          {
                                              handle: 'User Interface Components',
                                              text: 'Visual information required to identify user interface components and states, except for inactive components or where the appearance of the component is determined by the user agent and not modified by the author;'
                                          },
                                          {
                                              handle: 'Graphical Objects',
                                              text: 'Parts of graphics required to understand the content, except when a particular presentation of graphics is essential to the information being conveyed.'
                                          }
                                      ]
                                  }
                              ],
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              situations: [
                                                  {
                                                      title: 'User Interface Component contrast',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:G195',
                                                              title: 'Using an author-supplied, highly visible focus indicator'
                                                          }
                                                      ]
                                                  },
                                                  {
                                                      title: 'Graphics with sufficient contrast',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:G207',
                                                              title: 'Ensuring that a contrast ratio of 3:1 is provided for icons'
                                                          },
                                                          {
                                                              id: 'TECH:G209',
                                                              title: 'Provide sufficient contrast at the boundaries between adjoining colors'
                                                          }
                                                      ]
                                                  },
                                                  {
                                                      title: 'Text in or over graphics',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:text',
                                                              title: '@@ Include labels and values with the graphic (TBD)'
                                                          },
                                                          {
                                                              id: 'TECH:G18',
                                                              title: 'Ensuring that a contrast ratio of at least 4.5:1 exists between text (and images of text) and background behind the text'
                                                          },
                                                          {
                                                              id: 'TECH:G145',
                                                              title: 'Ensuring that a contrast ratio of at least 3:1 exists between text (and images of text) and background behind the text'
                                                          },
                                                          {
                                                              id: 'TECH:G174',
                                                              title: 'Providing a control with a sufficient contrast ratio that allows users to switch to a presentation that uses sufficient contrast'
                                                          }
                                                      ]
                                                  }
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      advisory: [
                                          {
                                              id: 'TECH:G183',
                                              title: 'Using a contrast ratio of 3:1 with surrounding text and providing additional visual cues on focus for links or controls where color alone is used to identify them'
                                          }
                                      ]
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:F78',
                                              title: 'Failure of Success Criterion 2.4.7 due to styling element outlines and borders in a way that removes or renders non-visible the visual focus indicator'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:text-spacing',
                              alt_id: [],
                              num: '1.4.12',
                              versions: ['2.1'],
                              level: 'AA',
                              handle: 'Text Spacing',
                              title: 'In content implemented using markup languages that support the following text style properties, no loss of content or functionality occurs by setting all of the following and by changing no other style property:',
                              details: [
                                  {
                                      type: 'ulist',
                                      items: [
                                          {
                                              text: 'Line height (line spacing) to at least 1.5 times the font size;'
                                          },
                                          {
                                              text: 'Spacing following paragraphs to at least 2 times the font size;'
                                          },
                                          {
                                              text: 'Letter spacing (tracking) to at least 0.12 times the font size;'
                                          },
                                          {
                                              text: 'Word spacing to at least 0.16 times the font size.'
                                          }
                                      ]
                                  },
                                  {
                                      type: 'p',
                                      text: 'Exception: Human languages and scripts that do not make use of one or more of these text style properties in written text can conform using only the properties that exist for that combination of language and script.'
                                  }
                              ],
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:C36',
                                              title: 'Allowing for text spacing override'
                                          },
                                          {
                                              id: 'TECH:C35',
                                              title: 'Allowing for text spacing without wrapping'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: [
                                          {
                                              id: 'TECH:C8',
                                              title: 'Using CSS letter-spacing to control spacing within a word'
                                          },
                                          {
                                              id: 'TECH:C21',
                                              title: 'Specifying line spacing in CSS'
                                          },
                                          {
                                              id: 'TECH:C28',
                                              title: 'Specifying the size of text containers using em units'
                                          }
                                      ]
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:text',
                                              title: 'Failure of Success Criterion 1.4.12 due to not allowing for spacing override. (Future technique)'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:content-on-hover-or-focus',
                              alt_id: [],
                              num: '1.4.13',
                              versions: ['2.1'],
                              level: 'AA',
                              handle: 'Content on Hover or Focus',
                              title: 'Where receiving and then removing pointer hover or keyboard focus triggers additional content to become visible and then hidden, the following are true:',
                              details: [
                                  {
                                      type: 'ulist',
                                      items: [
                                          {
                                              handle: 'Dismissible',
                                              text: 'A mechanism is available to dismiss the additional content without moving pointer hover or keyboard focus, unless the additional content communicates an input error or does not obscure or replace other content;'
                                          },
                                          {
                                              handle: 'Hoverable',
                                              text: 'If pointer hover can trigger the additional content, then the pointer can be moved over the additional content without the additional content disappearing;'
                                          },
                                          {
                                              handle: 'Persistent',
                                              text: 'The additional content remains visible until the hover or focus trigger is removed, the user dismisses it, or its information is no longer valid.'
                                          }
                                      ]
                                  },
                                  {
                                      type: 'p',
                                      text: 'Exception: The visual presentation of the additional content is controlled by the user agent and is not modified by the author.'
                                  }
                              ],
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:text',
                                              title: '@@ ARIA: Using role="tooltip"'
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: '@@ CSS: Using hover and focus pseudo classes'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: []
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:F95',
                                              title: 'Failure of Success Criterion 1.4.13 due to content shown on hover not being hoverable'
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: '@@ Failure to make content dismissable without moving pointer hover or keyboard focus'
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: '@@ Failure to meet by content on hover or focus not remaining visible until dismissed or invalid'
                                          }
                                      ]
                                  }
                              ]
                          }
                      ],
                      techniques: []
                  }
              ]
          },
          {
              id: 'WCAG2:operable',
              num: '2',
              versions: ['2.0', '2.1'],
              handle: 'Operable',
              title: 'User interface components and navigation must be operable.',
              guidelines: [
                  {
                      id: 'WCAG2:keyboard-accessible',
                      alt_id: ['keyboard-operation'],
                      num: '2.1',
                      versions: ['2.0', '2.1'],
                      handle: 'Keyboard Accessible',
                      title: 'Make all functionality available from a keyboard.',
                      successcriteria: [
                          {
                              id: 'WCAG2:keyboard',
                              alt_id: ['keyboard-operation-keyboard-operable'],
                              num: '2.1.1',
                              versions: ['2.0', '2.1'],
                              level: 'A',
                              handle: 'Keyboard',
                              title: 'All functionality of the content is operable through a keyboard interface without requiring specific timings for individual keystrokes, except where the underlying function requires input that depends on the path of the user\'s movement and not just the endpoints.',
                              details: [
                                  {
                                      type: 'note',
                                      handle: 'Note 1',
                                      text: 'This exception relates to the underlying function, not the input technique. For example, if using handwriting to enter text, the input technique (handwriting) requires path-dependent input but the underlying function (text input) does not.'
                                  },
                                  {
                                      type: 'note',
                                      handle: 'Note 2',
                                      text: 'This does not forbid and should not discourage providing mouse input or other input methods in addition to keyboard operation.'
                                  }
                              ],
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:G202',
                                              title: 'Ensuring keyboard control for all functionality'
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: 'Ensuring keyboard control by using one of the following techniques.',
                                              using: [
                                                  {
                                                      id: 'TECH:H91',
                                                      title: 'Using HTML form controls and links'
                                                  },
                                                  {
                                                      id: 'TECH:PDF3',
                                                      title: 'Ensuring correct tab and reading order in PDF documents'
                                                  },
                                                  {
                                                      id: 'TECH:PDF11',
                                                      title: 'Providing links and link text using the Link annotation and the /Link structure element in PDF documents'
                                                  },
                                                  {
                                                      id: 'TECH:PDF23',
                                                      title: 'Providing interactive form controls in PDF documents'
                                                  },
                                                  {
                                                      id: 'TECH:SL15',
                                                      title: 'Providing Keyboard Shortcuts that Work Across the Entire Silverlight Application'
                                                  }
                                              ]
                                          },
                                          {
                                              id: 'TECH:G90',
                                              title: 'Providing keyboard-triggered event handlers',
                                              using: [
                                                  {
                                                      id: 'TECH:SCR20',
                                                      title: 'Using both keyboard and other device-specific functions'
                                                  },
                                                  {
                                                      id: 'TECH:SCR35',
                                                      title: 'Making actions keyboard accessible by using the onclick event of anchors and buttons'
                                                  },
                                                  {
                                                      id: 'TECH:SCR2',
                                                      title: 'Using redundant keyboard and mouse event handlers'
                                                  },
                                                  {
                                                      id: 'TECH:SL9',
                                                      title: 'Handling Key Events to Enable Keyboard Functionality in Silverlight'
                                                  },
                                                  {
                                                      id: 'TECH:SL14',
                                                      title: 'Providing Custom Control Key Handling for Keyboard Functionality in Silverlight'
                                                  }
                                              ]
                                          },
                                          {
                                              id: 'TECH:FLASH17',
                                              title: 'Providing keyboard access to a Flash object and avoiding a keyboard trap',
                                              using: [
                                                  {
                                                      id: 'TECH:FLASH22',
                                                      title: 'Adding keyboard-accessible actions to static elements'
                                                  },
                                                  {
                                                      id: 'TECH:FLASH16',
                                                      title: 'Making actions keyboard accessible by using the click event on standard components'
                                                  },
                                                  {
                                                      id: 'TECH:FLASH14',
                                                      title: 'Using redundant keyboard and mouse event handlers in Flash'
                                                  }
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      advisory: [
                                          {
                                              id: 'TECH:SCR29',
                                              title: 'Adding keyboard-accessible actions to static HTML elements'
                                          }
                                      ]
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:F54',
                                              title: 'Failure of Success Criterion 2.1.1 due to using only pointing-device-specific event handlers (including gesture) for a function'
                                          },
                                          {
                                              id: 'TECH:F55',
                                              title: 'Failure of Success Criteria 2.1.1, 2.4.7, and 3.2.1 due to using script to remove focus when focus is received'
                                          },
                                          {
                                              id: 'TECH:F42',
                                              title: 'Failure of Success Criteria 1.3.1, 2.1.1, 2.1.3, or 4.1.2 when emulating links'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:no-keyboard-trap',
                              alt_id: ['keyboard-operation-trapping'],
                              num: '2.1.2',
                              versions: ['2.0', '2.1'],
                              level: 'A',
                              handle: 'No Keyboard Trap',
                              title: 'If keyboard focus can be moved to a component of the page using a keyboard interface, then focus can be moved away from that component using only a keyboard interface, and, if it requires more than unmodified arrow or tab keys or other standard exit methods, the user is advised of the method for moving focus away.',
                              details: [
                                  {
                                      type: 'note',
                                      handle: 'Note 1',
                                      text: 'Since any content that does not meet this success criterion can interfere with a user\'s ability to use the whole page, all content on the Web page (whether it is used to meet other success criteria or not) must meet this success criterion. See Conformance Requirement 5: Non-Interference.'
                                  }
                              ],
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:G21',
                                              title: 'Ensuring that users are not trapped in content'
                                          },
                                          {
                                              id: 'TECH:FLASH17',
                                              title: 'Providing keyboard access to a Flash object and avoiding a keyboard trap'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: []
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:F10',
                                              title: 'Failure of Success Criterion 2.1.2 and Conformance Requirement 5 due to combining multiple content formats in a way that traps users inside one format type'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:keyboard-no-exception',
                              alt_id: ['keyboard-operation-all-funcs'],
                              num: '2.1.3',
                              versions: ['2.0', '2.1'],
                              level: 'AAA',
                              handle: 'Keyboard (No Exception)',
                              title: 'All functionality of the content is operable through a keyboard interface without requiring specific timings for individual keystrokes.',
                              techniques: [
                                  {
                                      sufficient: []
                                  },
                                  {
                                      advisory: []
                                  },
                                  {
                                      failure: []
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:character-key-shortcuts',
                              alt_id: [],
                              num: '2.1.4',
                              versions: ['2.1'],
                              level: 'A',
                              handle: 'Character Key Shortcuts',
                              title: 'If a keyboard shortcut is implemented in content using only letter (including upper- and lower-case letters), punctuation, number, or symbol characters, then at least one of the following is true:',
                              details: [
                                  {
                                      type: 'ulist',
                                      items: [
                                          {
                                              handle: 'Turn off',
                                              text: 'A mechanism is available to turn the shortcut off;'
                                          },
                                          {
                                              handle: 'Remap',
                                              text: 'A mechanism is available to remap the shortcut to include one or more non-printable keyboard keys (e.g., Ctrl, Alt);'
                                          },
                                          {
                                              handle: 'Active only on focus',
                                              text: 'The keyboard shortcut for a user interface component is only active when that component has focus.'
                                          }
                                      ]
                                  }
                              ],
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:text',
                                              title: 'Users have a way to turn off single-key shortcuts.'
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: 'A mechanism is provided to allow users to change character-key shortcuts. The remapping mechanism includes non-printing characters. The alternative shortcuts could be longer strings of up to 25 characters that would directly serve as native speech commands for any speech engine.'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: []
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:text',
                                              title: 'Failure of Success Criteria 2.1.4 due to a webpage or web app that includes single-key shortcuts not including a control that allows users to turn the shortcuts off or a control that allows users to change the shortcuts to key combinations that include keys that are not upper or lower-case letters, punctuation, number, or symbol characters.'
                                          }
                                      ]
                                  }
                              ]
                          }
                      ],
                      techniques: []
                  },
                  {
                      id: 'WCAG2:enough-time',
                      alt_id: ['time-limits'],
                      num: '2.2',
                      versions: ['2.0', '2.1'],
                      handle: 'Enough Time',
                      title: 'Provide users enough time to read and use content.',
                      successcriteria: [
                          {
                              id: 'WCAG2:timing-adjustable',
                              alt_id: ['time-limits-required-behaviors'],
                              num: '2.2.1',
                              versions: ['2.0', '2.1'],
                              level: 'A',
                              handle: 'Timing Adjustable',
                              title: 'For each time limit that is set by the content, at least one of the following is true:',
                              details: [
                                  {
                                      type: 'ulist',
                                      items: [
                                          {
                                              handle: 'Turn off',
                                              text: 'The user is allowed to turn off the time limit before encountering it; or'
                                          },
                                          {
                                              handle: 'Adjust',
                                              text: 'The user is allowed to adjust the time limit before encountering it over a wide range that is at least ten times the length of the default setting; or'
                                          },
                                          {
                                              handle: 'Extend',
                                              text: 'The user is warned before time expires and given at least 20 seconds to extend the time limit with a simple action (for example, "press the space bar"), and the user is allowed to extend the time limit at least ten times; or'
                                          },
                                          {
                                              handle: 'Real-time Exception',
                                              text: 'The time limit is a required part of a real-time event (for example, an auction), and no alternative to the time limit is possible; or'
                                          },
                                          {
                                              handle: 'Essential Exception',
                                              text: 'The time limit is essential and extending it would invalidate the activity; or'
                                          },
                                          {
                                              handle: '20 Hour Exception',
                                              text: 'The time limit is longer than 20 hours.'
                                          }
                                      ]
                                  }
                              ],
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              situations: [
                                                  {
                                                      title: 'Situation A: If there are session time limits:',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:G133',
                                                              title: 'Providing a checkbox on the first page of a multipart form that allows users to ask for longer session time limit or no session time limit'
                                                          },
                                                          {
                                                              id: 'TECH:G198',
                                                              title: 'Providing a way for the user to turn the time limit off'
                                                          }
                                                      ]
                                                  },
                                                  {
                                                      title: 'Situation B: If a time limit is controlled by a script on the page:',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:G198',
                                                              title: 'Providing a way for the user to turn the time limit off'
                                                          },
                                                          {
                                                              id: 'TECH:G180',
                                                              title: 'Providing the user with a means to set the time limit to 10 times the default time limit'
                                                          },
                                                          {
                                                              and: [
                                                                  {
                                                                      id: 'TECH:SCR16',
                                                                      title: 'Providing a script that warns the user a time limit is about to expire'
                                                                  },
                                                                  {
                                                                      id: 'TECH:SCR1',
                                                                      title: 'Allowing the user to extend the default time limit'
                                                                  }
                                                              ]
                                                          },
                                                          {
                                                              id: 'TECH:FLASH19',
                                                              title: 'Providing a script that warns the user a time limit is about to expire and provides a way to extend it'
                                                          },
                                                          {
                                                              id: 'TECH:FLASH24',
                                                              title: 'Allowing the user to extend the default time limit'
                                                          },
                                                          {
                                                              id: 'TECH:SL21',
                                                              title: 'Replacing A Silverlight Timed Animation With a Nonanimated Element'
                                                          }
                                                      ]
                                                  },
                                                  {
                                                      title: 'Situation C: If there are time limits on reading:',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:G4',
                                                              title: 'Allowing the content to be paused and restarted from where it was paused'
                                                          },
                                                          {
                                                              id: 'TECH:G198',
                                                              title: 'Providing a way for the user to turn the time limit off'
                                                          },
                                                          {
                                                              id: 'TECH:SCR33',
                                                              title: 'Using script to scroll content, and providing a mechanism to pause it'
                                                          },
                                                          {
                                                              id: 'TECH:SCR36',
                                                              title: 'Providing a mechanism to allow users to display moving, scrolling, or auto-updating text in a static window or area'
                                                          }
                                                      ]
                                                  }
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      advisory: []
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:F40',
                                              title: 'Failure of Success Criterion 2.2.1 and 2.2.4 due to using meta redirect with a time limit'
                                          },
                                          {
                                              id: 'TECH:F41',
                                              title: 'Failure of Success Criterion 2.2.1, 2.2.4, and 3.2.5 due to using meta refresh to reload the page'
                                          },
                                          {
                                              id: 'TECH:F58',
                                              title: 'Failure of Success Criterion 2.2.1 due to using server-side techniques to automatically redirect pages after a time-out'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:pause-stop-hide',
                              alt_id: ['time-limits-pause'],
                              num: '2.2.2',
                              versions: ['2.0', '2.1'],
                              level: 'A',
                              handle: 'Pause, Stop, Hide',
                              title: 'For moving, blinking, scrolling, or auto-updating information, all of the following are true:',
                              details: [
                                  {
                                      type: 'ulist',
                                      items: [
                                          {
                                              handle: 'Moving, blinking, scrolling',
                                              text: 'For any moving, blinking or scrolling information that (1) starts automatically, (2) lasts more than five seconds, and (3) is presented in parallel with other content, there is a mechanism for the user to pause, stop, or hide it unless the movement, blinking, or scrolling is part of an activity where it is essential; and'
                                          },
                                          {
                                              handle: 'Auto-updating',
                                              text: 'For any auto-updating information that (1) starts automatically and (2) is presented in parallel with other content, there is a mechanism for the user to pause, stop, or hide it or to control the frequency of the update unless the auto-updating is part of an activity where it is essential.'
                                          }
                                      ]
                                  },
                                  {
                                      type: 'note',
                                      handle: 'Note 1',
                                      text: 'For requirements related to flickering or flashing content, refer to Guideline 2.3.'
                                  },
                                  {
                                      type: 'note',
                                      handle: 'Note 2',
                                      text: 'Since any content that does not meet this success criterion can interfere with a user\'s ability to use the whole page, all content on the Web page (whether it is used to meet other success criteria or not) must meet this success criterion. See Conformance Requirement 5: Non-Interference.'
                                  },
                                  {
                                      type: 'note',
                                      handle: 'Note 3',
                                      text: 'Content that is updated periodically by software or that is streamed to the user agent is not required to preserve or present information that is generated or received between the initiation of the pause and resuming presentation, as this may not be technically possible, and in many situations could be misleading to do so.'
                                  },
                                  {
                                      type: 'note',
                                      handle: 'Note 4',
                                      text: 'An animation that occurs as part of a preload phase or similar situation can be considered essential if interaction cannot occur during that phase for all users and if not indicating progress could confuse users or cause them to think that content was frozen or broken.'
                                  }
                              ],
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:G4',
                                              title: 'Allowing the content to be paused and restarted from where it was paused'
                                          },
                                          {
                                              id: 'TECH:SL11',
                                              title: 'Pausing or Stopping A Decorative Silverlight Animation'
                                          },
                                          {
                                              id: 'TECH:SL12',
                                              title: 'Pausing, Stopping, or Playing Media in Silverlight MediaElements'
                                          },
                                          {
                                              id: 'TECH:SCR33',
                                              title: 'Using script to scroll content, and providing a mechanism to pause it'
                                          },
                                          {
                                              id: 'TECH:FLASH35',
                                              title: 'Using script to scroll Flash content, and providing a mechanism to pause it'
                                          },
                                          {
                                              id: 'TECH:G11',
                                              title: 'Creating content that blinks for less than 5 seconds'
                                          },
                                          {
                                              id: 'TECH:G187',
                                              title: 'Using a technology to include blinking content that can be turned off via the user agent'
                                          },
                                          {
                                              id: 'TECH:G152',
                                              title: 'Setting animated gif images to stop blinking after n cycles (within 5 seconds)'
                                          },
                                          {
                                              id: 'TECH:SCR22',
                                              title: 'Using scripts to control blinking and stop it in five seconds or less'
                                          },
                                          {
                                              id: 'TECH:FLASH36',
                                              title: 'Using scripts to control blinking and stop it in five seconds or less'
                                          },
                                          {
                                              id: 'TECH:G186',
                                              title: 'Using a control in the Web page that stops moving, blinking, or auto-updating content'
                                          },
                                          {
                                              id: 'TECH:G191',
                                              title: 'Providing a link, button, or other mechanism that reloads the page without any blinking content'
                                          },
                                          {
                                              id: 'TECH:SL24',
                                              title: 'Using AutoPlay to Keep Silverlight Media from Playing Automatically'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: []
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:F16',
                                              title: 'Failure of Success Criterion 2.2.2 due to including scrolling content where movement is not essential to the activity without also including a mechanism to pause and restart the content'
                                          },
                                          {
                                              id: 'TECH:F47',
                                              title: 'Failure of Success Criterion 2.2.2 due to using the blink element'
                                          },
                                          {
                                              id: 'TECH:F4',
                                              title: 'Failure of Success Criterion 2.2.2 due to using text-decoration:blink without a mechanism to stop it in less than five seconds'
                                          },
                                          {
                                              id: 'TECH:F50',
                                              title: 'Failure of Success Criterion 2.2.2 due to a script that causes a blink effect without a mechanism to stop the blinking at 5 seconds or less'
                                          },
                                          {
                                              id: 'TECH:F7',
                                              title: 'Failure of Success Criterion 2.2.2 due to an object or applet, such as Java or Flash, for more than five seconds'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:no-timing',
                              alt_id: ['time-limits-no-exceptions'],
                              num: '2.2.3',
                              versions: ['2.0', '2.1'],
                              level: 'AAA',
                              handle: 'No Timing',
                              title: 'Timing is not an essential part of the event or activity presented by the content, except for non-interactive synchronized media and real-time events.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:G5',
                                              title: 'Allowing users to complete an activity without any time limit'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: []
                                  },
                                  {
                                      failure: []
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:interruptions',
                              alt_id: ['time-limits-postponed'],
                              num: '2.2.4',
                              versions: ['2.0', '2.1'],
                              level: 'AAA',
                              handle: 'Interruptions',
                              title: 'Interruptions can be postponed or suppressed by the user, except interruptions involving an emergency.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:G75',
                                              title: 'Providing a mechanism to postpone any updating of content'
                                          },
                                          {
                                              id: 'TECH:G76',
                                              title: 'Providing a mechanism to request an update of the content instead of updating automatically'
                                          },
                                          {
                                              id: 'TECH:SCR14',
                                              title: 'Using scripts to make nonessential alerts optional'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: []
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:F40',
                                              title: 'Failure of Success Criterion 2.2.1 and 2.2.4 due to using meta redirect with a time limit'
                                          },
                                          {
                                              id: 'TECH:F41',
                                              title: 'Failure of Success Criterion 2.2.1, 2.2.4, and 3.2.5 due to using meta refresh to reload the page'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:re-authenticating',
                              alt_id: ['time-limits-server-timeout'],
                              num: '2.2.5',
                              versions: ['2.0', '2.1'],
                              level: 'AAA',
                              handle: 'Re-authenticating',
                              title: 'When an authenticated session expires, the user can continue the activity without loss of data after re-authenticating.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:text',
                                              title: 'Providing options to continue without loss of data using one of the following techniques:',
                                              using: [
                                                  {
                                                      id: 'TECH:G105',
                                                      title: 'Saving data so that it can be used after a user re-authenticates'
                                                  },
                                                  {
                                                      id: 'TECH:G181',
                                                      title: 'Encoding user data as hidden or encrypted data in a re-authorization page'
                                                  }
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      advisory: []
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:F12',
                                              title: 'Failure of Success Criterion 2.2.5 due to having a session time limit without a mechanism re-authentication'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:timeouts',
                              alt_id: [],
                              num: '2.2.6',
                              versions: ['2.1'],
                              level: 'AAA',
                              handle: 'Timeouts',
                              title: 'Users are warned of the duration of any user inactivity that could cause data loss, unless the data is preserved for more than 20 hours when the user does not take any actions.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:text',
                                              title: 'Setting a session timeout to occur following at least 20 hours of inactivity.'
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: 'Store user data for more than 20 hours.'
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: 'Provide a warning of the duration of user inactivity at the start of a process.'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: []
                                  },
                                  {
                                      failure: []
                                  }
                              ]
                          }
                      ],
                      techniques: []
                  },
                  {
                      id: 'WCAG2:seizures-and-physical-reactions',
                      alt_id: [],
                      num: '2.3',
                      versions: ['2.1'],
                      handle: 'Seizures and Physical Reactions',
                      title: 'Do not design content in a way that is known to cause seizures or physical reactions.',
                      successcriteria: [
                          {
                              id: 'WCAG2:three-flashes-or-below-threshold',
                              alt_id: ['seizure-does-not-violate'],
                              num: '2.3.1',
                              versions: ['2.0', '2.1'],
                              level: 'A',
                              handle: 'Three Flashes or Below Threshold',
                              title: 'Web pages do not contain anything that flashes more than three times in any one second period, or the flash is below the general flash and red flash thresholds.',
                              details: [
                                  {
                                      type: 'note',
                                      handle: 'Note 1',
                                      text: 'Since any content that does not meet this success criterion can interfere with a user\'s ability to use the whole page, all content on the Web page (whether it is used to meet other success criteria or not) must meet this success criterion. See Conformance Requirement 5: Non-Interference.'
                                  }
                              ],
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:G19',
                                              title: 'Ensuring that no component of the content flashes more than three times in any 1-second period'
                                          },
                                          {
                                              id: 'TECH:G176',
                                              title: 'Keeping the flashing area small enough'
                                          },
                                          {
                                              id: 'TECH:G15',
                                              title: 'Using a tool to ensure that content does not violate the general flash threshold or red flash threshold'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: []
                                  },
                                  {
                                      failure: []
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:three-flashes',
                              alt_id: ['seizure-three-times'],
                              num: '2.3.2',
                              versions: ['2.0', '2.1'],
                              level: 'AAA',
                              handle: 'Three Flashes',
                              title: 'Web pages do not contain anything that flashes more than three times in any one second period.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:G19',
                                              title: 'Ensuring that no component of the content flashes more than three times in any 1-second period'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: []
                                  },
                                  {
                                      failure: []
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:animation-from-interactions',
                              alt_id: [],
                              num: '2.3.3',
                              versions: ['2.1'],
                              level: 'AAA',
                              handle: 'Animation from Interactions',
                              title: 'Motion animation triggered by interaction can be disabled, unless the animation is essential to the functionality or the information being conveyed.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:C39',
                                              title: 'Using the CSS reduce-motion query to prevent motion'
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: 'Gx: Allowing users to set a preference that prevents animation.'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: []
                                  },
                                  {
                                      failure: []
                                  }
                              ]
                          }
                      ],
                      techniques: []
                  },
                  {
                      id: 'WCAG2:navigable',
                      alt_id: ['navigation-mechanisms'],
                      num: '2.4',
                      versions: ['2.0', '2.1'],
                      handle: 'Navigable',
                      title: 'Provide ways to help users navigate, find content, and determine where they are.',
                      successcriteria: [
                          {
                              id: 'WCAG2:bypass-blocks',
                              alt_id: ['navigation-mechanisms-skip'],
                              num: '2.4.1',
                              versions: ['2.0', '2.1'],
                              level: 'A',
                              handle: 'Bypass Blocks',
                              title: 'A mechanism is available to bypass blocks of content that are repeated on multiple Web pages.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:text',
                                              title: 'Creating links to skip blocks of repeated material using one of the following techniques:',
                                              using: [
                                                  {
                                                      id: 'TECH:G1',
                                                      title: 'Adding a link at the top of each page that goes directly to the main content area'
                                                  },
                                                  {
                                                      id: 'TECH:G123',
                                                      title: 'Adding a link at the beginning of a block of repeated content to go to the end of the block'
                                                  },
                                                  {
                                                      id: 'TECH:G124',
                                                      title: 'Adding links at the top of the page to each area of the content'
                                                  },
                                                  {
                                                      id: 'TECH:SL25',
                                                      title: 'Using Controls and Programmatic Focus to Bypass Blocks of Content in Silverlight'
                                                  }
                                              ]
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: 'Grouping blocks of repeated material in a way that can be skipped, using one of the following techniques:',
                                              using: [
                                                  {
                                                      id: 'TECH:ARIA11',
                                                      title: 'Using ARIA landmarks to identify regions of a page'
                                                  },
                                                  {
                                                      id: 'TECH:H69',
                                                      title: 'Providing heading elements at the beginning of each section of content'
                                                  },
                                                  {
                                                      id: 'TECH:PDF9',
                                                      title: 'Providing headings by marking content with heading tags in PDF documents'
                                                  },
                                                  {
                                                      and: [
                                                          {
                                                              id: 'TECH:H70',
                                                              title: 'Using frame elements to group blocks of repeated material'
                                                          },
                                                          {
                                                              id: 'TECH:H64',
                                                              title: 'Using the title attribute of the frame and iframe elements'
                                                          }
                                                      ]
                                                  },
                                                  {
                                                      id: 'TECH:SCR28',
                                                      title: 'Using an expandable and collapsible menu to bypass block of content'
                                                  },
                                                  {
                                                      id: 'TECH:SL29',
                                                      title: 'Using Silverlight "List" Controls to Define Blocks that can be Bypassed'
                                                  }
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      advisory: [
                                          {
                                              id: 'TECH:C6',
                                              title: 'Positioning content based on structural markup'
                                          }
                                      ]
                                  },
                                  {
                                      failure: []
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:page-titled',
                              alt_id: ['navigation-mechanisms-title'],
                              num: '2.4.2',
                              versions: ['2.0', '2.1'],
                              level: 'A',
                              handle: 'Page Titled',
                              title: 'Web pages have titles that describe topic or purpose.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:G88',
                                              title: 'Providing descriptive titles for Web pages',
                                              using: [
                                                  {
                                                      id: 'TECH:H25',
                                                      title: 'Providing a title using the title element'
                                                  },
                                                  {
                                                      id: 'TECH:PDF18',
                                                      title: 'Specifying the document title using the Title entry in the document information dictionary of a PDF document'
                                                  }
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      advisory: [
                                          {
                                              id: 'TECH:G127',
                                              title: 'Identifying a Web page\'s relationship to a larger collection of Web pages'
                                          }
                                      ]
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:F25',
                                              title: 'Failure of Success Criterion 2.4.2 due to the title of a Web page not identifying the contents'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:focus-order',
                              alt_id: ['navigation-mechanisms-focus-order'],
                              num: '2.4.3',
                              versions: ['2.0', '2.1'],
                              level: 'A',
                              handle: 'Focus Order',
                              title: 'If a Web page can be navigated sequentially and the navigation sequences affect meaning or operation, focusable components receive focus in an order that preserves meaning and operability.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:G59',
                                              title: 'Placing the interactive elements in an order that follows sequences and relationships within the content'
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: 'Giving focus to elements in an order that follows sequences and relationships within the content using one of the following techniques:',
                                              using: [
                                                  {
                                                      id: 'TECH:H4',
                                                      title: 'Creating a logical tab order through links, form controls, and objects'
                                                  },
                                                  {
                                                      id: 'TECH:FLASH15',
                                                      title: 'Using the tabIndex property to specify a logical reading order and a logical tab order in Flash'
                                                  },
                                                  {
                                                      id: 'TECH:C27',
                                                      title: 'Making the DOM order match the visual order'
                                                  },
                                                  {
                                                      id: 'TECH:PDF3',
                                                      title: 'Ensuring correct tab and reading order in PDF documents'
                                                  },
                                                  {
                                                      id: 'TECH:SL34',
                                                      title: 'Using the Silverlight Default Tab Sequence and Altering Tab Sequences With Properties'
                                                  }
                                              ]
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: 'Changing a Web page dynamically using one of the following techniques:',
                                              using: [
                                                  {
                                                      id: 'TECH:SCR26',
                                                      title: 'Inserting dynamic content into the Document Object Model immediately following its trigger element'
                                                  },
                                                  {
                                                      id: 'TECH:SCR37',
                                                      title: 'Creating Custom Dialogs in a Device Independent Way'
                                                  },
                                                  {
                                                      id: 'TECH:SCR27',
                                                      title: 'Reordering page sections using the Document Object Model'
                                                  }
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      advisory: []
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:F44',
                                              title: 'Failure of Success Criterion 2.4.3 due to using tabindex to create a tab order that does not preserve meaning and operability'
                                          },
                                          {
                                              id: 'TECH:F85',
                                              title: 'Failure of Success Criterion 2.4.3 due to using dialogs or menus that are not adjacent to their trigger control in the sequential navigation order'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:link-purpose-in-context',
                              alt_id: ['navigation-mechanisms-refs'],
                              num: '2.4.4',
                              versions: ['2.0', '2.1'],
                              level: 'A',
                              handle: 'Link Purpose (In Context)',
                              title: 'The purpose of each link can be determined from the link text alone or from the link text together with its programmatically determined link context, except where the purpose of the link would be ambiguous to users in general.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:G91',
                                              title: 'Providing link text that describes the purpose of a link'
                                          },
                                          {
                                              id: 'TECH:H30',
                                              title: 'Providing link text that describes the purpose of a link for anchor elements'
                                          },
                                          {
                                              id: 'TECH:H24',
                                              title: 'Providing text alternatives for the area elements of image maps'
                                          },
                                          {
                                              id: 'TECH:FLASH27',
                                              title: 'Providing button labels that describe the purpose of a button'
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: 'Allowing the user to choose short or long link text using one of the techniques below:',
                                              using: [
                                                  {
                                                      id: 'TECH:G189',
                                                      title: 'Providing a control near the beginning of the Web page that changes the link text'
                                                  },
                                                  {
                                                      id: 'TECH:SCR30',
                                                      title: 'Using scripts to change the link text'
                                                  },
                                                  {
                                                      id: 'TECH:FLASH7',
                                                      title: 'Using scripting to change control labels'
                                                  }
                                              ]
                                          },
                                          {
                                              id: 'TECH:G53',
                                              title: 'Identifying the purpose of a link using link text combined with the text of the enclosing sentence'
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: 'Providing a supplemental description of the purpose of a link using one of the following techniques:',
                                              using: [
                                                  {
                                                      id: 'TECH:H33',
                                                      title: 'Supplementing link text with the title attribute'
                                                  },
                                                  {
                                                      id: 'TECH:C7',
                                                      title: 'Using CSS to hide a portion of the link text'
                                                  }
                                              ]
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: 'Identifying the purpose of a link using link text combined with programmatically determined link context using one of the following techniques:',
                                              using: [
                                                  {
                                                      id: 'TECH:ARIA7',
                                                      title: 'Using aria-labelledby for link purpose'
                                                  },
                                                  {
                                                      id: 'TECH:ARIA8',
                                                      title: 'Using aria-label for link purpose'
                                                  },
                                                  {
                                                      id: 'TECH:H77',
                                                      title: 'Identifying the purpose of a link using link text combined with its enclosing list item'
                                                  },
                                                  {
                                                      id: 'TECH:H78',
                                                      title: 'Identifying the purpose of a link using link text combined with its enclosing paragraph'
                                                  },
                                                  {
                                                      id: 'TECH:H79',
                                                      title: 'Identifying the purpose of a link in a data table using the link text combined with its enclosing table cell and associated table header cells'
                                                  },
                                                  {
                                                      id: 'TECH:H81',
                                                      title: 'Identifying the purpose of a link in a nested list using link text combined with the parent list item under which the list is nested'
                                                  }
                                              ]
                                          },
                                          {
                                              id: 'TECH:G91',
                                              title: 'Providing link text that describes the purpose of a link',
                                              using: [
                                                  {
                                                      id: 'TECH:PDF11',
                                                      title: 'Providing links and link text using the Link annotation and the /Link structure element in PDF documents'
                                                  },
                                                  {
                                                      id: 'TECH:PDF13',
                                                      title: 'Providing replacement text using the /Alt entry for links in PDF documents'
                                                  },
                                                  {
                                                      id: 'TECH:SL18',
                                                      title: 'Providing Text Equivalent for Nontext Silverlight Controls With AutomationProperties.Name'
                                                  }
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      advisory: [
                                          {
                                              id: 'TECH:H2',
                                              title: 'Combining adjacent image and text links for the same resource'
                                          },
                                          {
                                              id: 'TECH:FLASH5',
                                              title: 'Combining adjacent image and text buttons for the same resource'
                                          },
                                          {
                                              id: 'TECH:H80',
                                              title: 'Identifying the purpose of a link using link text combined with the preceding heading element'
                                          }
                                      ]
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:F63',
                                              title: 'Failure of Success Criterion 2.4.4 due to providing link context only in content that is not related to the link'
                                          },
                                          {
                                              id: 'TECH:F89',
                                              title: 'Failure of Success Criteria 2.4.4, 2.4.9 and 4.1.2 due to not providing an accessible name for an image which is the only content in a link'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:multiple-ways',
                              alt_id: ['navigation-mechanisms-mult-loc'],
                              num: '2.4.5',
                              versions: ['2.0', '2.1'],
                              level: 'AA',
                              handle: 'Multiple Ways',
                              title: 'More than one way is available to locate a Web page within a set of Web pages except where the Web Page is the result of, or a step in, a process.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:text',
                                              title: 'Using two or more of the following techniques:',
                                              using: [
                                                  {
                                                      id: 'TECH:G125',
                                                      title: 'Providing links to navigate to related Web pages'
                                                  },
                                                  {
                                                      id: 'TECH:G64',
                                                      title: 'Providing a Table of Contents'
                                                  },
                                                  {
                                                      id: 'TECH:PDF2',
                                                      title: 'Creating bookmarks in PDF documents'
                                                  },
                                                  {
                                                      id: 'TECH:G63',
                                                      title: 'Providing a site map'
                                                  },
                                                  {
                                                      id: 'TECH:G161',
                                                      title: 'Providing a search function to help users find content'
                                                  },
                                                  {
                                                      id: 'TECH:G126',
                                                      title: 'Providing a list of links to all other Web pages'
                                                  },
                                                  {
                                                      id: 'TECH:G185',
                                                      title: 'Linking to all of the pages on the site from the home page'
                                                  }
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      advisory: [
                                          {
                                              id: 'TECH:H59',
                                              title: 'Using the link element and navigation tools'
                                          }
                                      ]
                                  },
                                  {
                                      failure: []
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:headings-and-labels',
                              alt_id: ['navigation-mechanisms-descriptive'],
                              num: '2.4.6',
                              versions: ['2.0', '2.1'],
                              level: 'AA',
                              handle: 'Headings and Labels',
                              title: 'Headings and labels describe topic or purpose.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:G130',
                                              title: 'Providing descriptive headings'
                                          },
                                          {
                                              id: 'TECH:G131',
                                              title: 'Providing descriptive labels'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: []
                                  },
                                  {
                                      failure: []
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:focus-visible',
                              alt_id: ['navigation-mechanisms-focus-visible'],
                              num: '2.4.7',
                              versions: ['2.0', '2.1'],
                              level: 'AA',
                              handle: 'Focus Visible',
                              title: 'Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:G149',
                                              title: 'Using user interface components that are highlighted by the user agent when they receive focus'
                                          },
                                          {
                                              id: 'TECH:C15',
                                              title: 'Using CSS to change the presentation of a user interface component when it receives focus'
                                          },
                                          {
                                              id: 'TECH:G165',
                                              title: 'Using the default focus indicator for the platform so that high visibility default focus indicators will carry over'
                                          },
                                          {
                                              id: 'TECH:G195',
                                              title: 'Using an author-supplied, highly visible focus indicator'
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: '@@@ Using a change of contrast ratio to provide a visible focus indicator'
                                          },
                                          {
                                              id: 'TECH:SCR31',
                                              title: 'Using script to change the background color or border of the element with focus'
                                          },
                                          {
                                              id: 'TECH:FLASH20',
                                              title: 'Reskinning Flash components to provide highly visible focus indication'
                                          },
                                          {
                                              id: 'TECH:SL2',
                                              title: 'Changing The Visual Focus Indicator in Silverlight'
                                          },
                                          {
                                              id: 'TECH:SL7',
                                              title: 'Designing a Focused Visual State for Custom Silverlight Controls'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: []
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:F55',
                                              title: 'Failure of Success Criteria 2.1.1, 2.4.7, and 3.2.1 due to using script to remove focus when focus is received'
                                          },
                                          {
                                              id: 'TECH:F78',
                                              title: 'Failure of Success Criterion 2.4.7 due to styling element outlines and borders in a way that removes or renders non-visible the visual focus indicator'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:location',
                              alt_id: ['navigation-mechanisms-location'],
                              num: '2.4.8',
                              versions: ['2.0', '2.1'],
                              level: 'AAA',
                              handle: 'Location',
                              title: 'Information about the user\'s location within a set of Web pages is available.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:G65',
                                              title: 'Providing a breadcrumb trail'
                                          },
                                          {
                                              id: 'TECH:G63',
                                              title: 'Providing a site map'
                                          },
                                          {
                                              id: 'TECH:G128',
                                              title: 'Indicating current location within navigation bars'
                                          },
                                          {
                                              id: 'TECH:G127',
                                              title: 'Identifying a Web page\'s relationship to a larger collection of Web pages',
                                              using: [
                                                  {
                                                      id: 'TECH:H59',
                                                      title: 'Using the link element and navigation tools'
                                                  }
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      advisory: [
                                          {
                                              id: 'TECH:PDF14',
                                              title: 'Providing running headers and footers in PDF documents'
                                          },
                                          {
                                              id: 'TECH:PDF17',
                                              title: 'Specifying consistent page numbering for PDF documents'
                                          }
                                      ]
                                  },
                                  {
                                      failure: []
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:link-purpose-link-only',
                              alt_id: ['navigation-mechanisms-link'],
                              num: '2.4.9',
                              versions: ['2.0', '2.1'],
                              level: 'AAA',
                              handle: 'Link Purpose (Link Only)',
                              title: 'A mechanism is available to allow the purpose of each link to be identified from link text alone, except where the purpose of the link would be ambiguous to users in general.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:ARIA8',
                                              title: 'Using aria-label for link purpose'
                                          },
                                          {
                                              id: 'TECH:G91',
                                              title: 'Providing link text that describes the purpose of a link'
                                          },
                                          {
                                              id: 'TECH:H30',
                                              title: 'Providing link text that describes the purpose of a link for anchor elements'
                                          },
                                          {
                                              id: 'TECH:H24',
                                              title: 'Providing text alternatives for the area elements of image maps'
                                          },
                                          {
                                              id: 'TECH:FLASH27',
                                              title: 'Providing button labels that describe the purpose of a button'
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: 'Allowing the user to choose short or long link text using one of the techniques below:',
                                              using: [
                                                  {
                                                      id: 'TECH:G189',
                                                      title: 'Providing a control near the beginning of the Web page that changes the link text'
                                                  },
                                                  {
                                                      id: 'TECH:SCR30',
                                                      title: 'Using scripts to change the link text'
                                                  },
                                                  {
                                                      id: 'TECH:FLASH7',
                                                      title: 'Using scripting to change control labels'
                                                  }
                                              ]
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: 'Providing a supplemental description of the purpose of a link using one of the following techniques:',
                                              using: [
                                                  {
                                                      id: 'TECH:C7',
                                                      title: 'Using CSS to hide a portion of the link text'
                                                  }
                                              ]
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: 'Semantically indicating links using one of the following techniques:',
                                              using: [
                                                  {
                                                      id: 'TECH:PDF11',
                                                      title: 'Providing links and link text using the Link annotation and the /Link structure element in PDF documents'
                                                  },
                                                  {
                                                      id: 'TECH:PDF13',
                                                      title: 'Providing replacement text using the /Alt entry for links in PDF documents'
                                                  },
                                                  {
                                                      id: 'TECH:SL18',
                                                      title: 'Providing Text Equivalent for Nontext Silverlight Controls With AutomationProperties.Name'
                                                  }
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      advisory: [
                                          {
                                              id: 'TECH:H2',
                                              title: 'Combining adjacent image and text links for the same resource'
                                          },
                                          {
                                              id: 'TECH:FLASH5',
                                              title: 'Combining adjacent image and text buttons for the same resource'
                                          },
                                          {
                                              id: 'TECH:H33',
                                              title: 'Supplementing link text with the title attribute'
                                          }
                                      ]
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:F84',
                                              title: 'Failure of Success Criterion 2.4.9 due to using a non-specific link such as "click here" or "more" without a mechanism to change the link text to specific text.'
                                          },
                                          {
                                              id: 'TECH:F89',
                                              title: 'Failure of Success Criteria 2.4.4, 2.4.9 and 4.1.2 due to not providing an accessible name for an image which is the only content in a link'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:section-headings',
                              alt_id: ['navigation-mechanisms-headings'],
                              num: '2.4.10',
                              versions: ['2.0', '2.1'],
                              level: 'AAA',
                              handle: 'Section Headings',
                              title: 'Section headings are used to organize the content.',
                              details: [
                                  {
                                      type: 'note',
                                      handle: 'Note 1',
                                      text: '"Heading" is used in its general sense and includes titles and other ways to add a heading to different types of content.'
                                  },
                                  {
                                      type: 'note',
                                      handle: 'Note 2',
                                      text: 'This success criterion covers sections within writing, not user interface components. User Interface components are covered under Success Criterion 4.1.2.'
                                  }
                              ],
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:G141',
                                              title: 'Organizing a page using headings'
                                          },
                                          {
                                              id: 'TECH:H69',
                                              title: 'Providing heading elements at the beginning of each section of content'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: []
                                  },
                                  {
                                      failure: []
                                  }
                              ]
                          }
                      ],
                      techniques: []
                  },
                  {
                      id: 'WCAG2:input-modalities',
                      alt_id: [],
                      num: '2.5',
                      versions: ['2.1'],
                      handle: 'Input Modalities',
                      title: 'Make it easier for users to operate functionality through various inputs beyond keyboard.',
                      successcriteria: [
                          {
                              id: 'WCAG2:pointer-gestures',
                              alt_id: [],
                              num: '2.5.1',
                              versions: ['2.1'],
                              level: 'A',
                              handle: 'Pointer Gestures',
                              title: 'All functionality that uses multipoint or path-based gestures for operation can be operated with a single pointer without a path-based gesture, unless a multipoint or path-based gesture is essential.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:text',
                                              title: 'GXXX: Do not rely on path-based gestures'
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: 'GXXX: Do not rely on multipoint gestures'
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: 'GXXX: Provide controls that do not require complex gestures and perform the same function as complex gestures'
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: 'GXXX: Single-point activation for spatial positioning and manipulation'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: []
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:text',
                                              title: 'Functionality can be operated by pointer input but not with single-point activation alone'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:pointer-cancellation',
                              alt_id: [],
                              num: '2.5.2',
                              versions: ['2.1'],
                              level: 'A',
                              handle: 'Pointer Cancellation',
                              title: 'For functionality that can be operated using a single pointer, at least one of the following is true:',
                              details: [
                                  {
                                      type: 'ulist',
                                      items: [
                                          {
                                              handle: 'No Down-Event',
                                              text: 'The down-event of the pointer is not used to execute any part of the function;'
                                          },
                                          {
                                              handle: 'Abort or Undo',
                                              text: 'Completion of the function is on the up-event, and a mechanism is available to abort the function before completion or to undo the function after completion;'
                                          },
                                          {
                                              handle: 'Up Reversal',
                                              text: 'The up-event reverses any outcome of the preceding down-event;'
                                          },
                                          {
                                              handle: 'Essential',
                                              text: 'Completing the function on the down-event is essential.'
                                          }
                                      ]
                                  }
                              ],
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:G210',
                                              title: 'Ensuring that drag-and-drop actions can be cancelled'
                                          },
                                          {
                                              id: 'TECH:G211',
                                              title: 'Matching the accessible name to the visible label'
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: '@@ Touch events are only triggered when touch is removed from a control.'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: []
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:text',
                                              title: '@@ Failure of SC 2.5.3 due to activating a button on initial touch location rather than the final touch location.'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:label-in-name',
                              alt_id: [],
                              num: '2.5.3',
                              versions: ['2.1'],
                              level: 'A',
                              handle: 'Label in Name',
                              title: 'For user interface components with labels that include text or images of text, the name contains the text that is presented visually.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:G208',
                                              title: 'Including the text of the visible label as part of the accessible name'
                                          },
                                          {
                                              id: 'TECH:G211',
                                              title: 'Matching the accessible name to the visible label'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: [
                                          {
                                              id: 'TECH:text',
                                              title: '@@ If an icon has no accompanying text, consider using its hover text as its accessible name'
                                          }
                                      ]
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:F96',
                                              title: 'Failure due to the accessible name not containing the visible label text'
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: '@@ Accessible name contains the visible label text, but the words of the visible label are not in the same order as they are in the visible label text'
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: '@@ Accessible name contains the visible label text, but one or more other words are interspersed in the label'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:motion-actuation',
                              alt_id: [],
                              num: '2.5.4',
                              versions: ['2.1'],
                              level: 'A',
                              handle: 'Motion Actuation',
                              title: 'Functionality that can be operated by device motion or user motion can also be operated by user interface components and responding to the motion can be disabled to prevent accidental actuation, except when:',
                              details: [
                                  {
                                      type: 'ulist',
                                      items: [
                                          {
                                              handle: 'Supported Interface',
                                              text: 'The motion is used to operate functionality through an accessibility supported interface;'
                                          },
                                          {
                                              handle: 'Essential',
                                              text: 'The motion is essential for the function and doing so would invalidate the activity.'
                                          }
                                      ]
                                  }
                              ],
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:G213',
                                              title: 'Provide conventional controls and an application setting for motion activated input'
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: 'GXXX: Supporting system level features which allow the user to disable motion actuation'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: []
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:text',
                                              title: 'FXXX: Failure of Success Criterion 2.5.4 due to functionality that can only be activated via devicemotion events (e.g., shaking or tilting)'
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: 'FXXX: Failure of Success Criterion 2.5.4 due to an inability to disable motion actuation'
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: 'FXXX: Failure of Success Criterion 2.5.4 due to disrupting or disabling system level features which allow the user to disable motion actuation'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:target-size',
                              alt_id: [],
                              num: '2.5.5',
                              versions: ['2.1'],
                              level: 'AAA',
                              handle: 'Target Size',
                              title: 'The size of the target for pointer inputs is at least 44 by 44 CSS pixels except when:',
                              details: [
                                  {
                                      type: 'ulist',
                                      items: [
                                          {
                                              handle: 'Equivalent',
                                              text: 'The target is available through an equivalent link or control on the same page that is at least 44 by 44 CSS pixels;'
                                          },
                                          {
                                              handle: 'Inline',
                                              text: 'The target is in a sentence or block of text;'
                                          },
                                          {
                                              handle: 'User Agent Control',
                                              text: 'The size of the target is determined by the user agent and is not modified by the author;'
                                          },
                                          {
                                              handle: 'Essential',
                                              text: 'A particular presentation of the target is essential to the information being conveyed.'
                                          }
                                      ]
                                  }
                              ],
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:text',
                                              title: 'Ensuring that touch targets are at least 44 by 44 CSS pixels.'
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: 'Providing a mechanism to change the size of the target independent of magnification.'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: [
                                          {
                                              id: 'TECH:text',
                                              title: 'Ensuring inline links provide sufficiently large activation target.'
                                          }
                                      ]
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:text',
                                              title: 'Failure of success criterion 2.5.3 due to target size being less than 44 by 44 CSS pixels.'
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: 'Failure of success criterion 2.5.3 due to target size of a paragraph that is also a link being less than 44 x 44 CSS pixels.'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:concurrent-input-mechanisms',
                              alt_id: [],
                              num: '2.5.6',
                              versions: ['2.1'],
                              level: 'AAA',
                              handle: 'Concurrent Input Mechanisms',
                              title: 'Web content does not restrict use of input modalities available on a platform except where the restriction is essential, required to ensure the security of the content, or required to respect user settings.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:text',
                                              title: '@@ Only using high-level, input-agnostic event handlers (focus, blur, click) in Javascript (operating systems/UAs fire these events for all input mechanisms).'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: []
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:F98',
                                              title: 'Failure due to interactions being limited to touch-only on touchscreen devices'
                                          }
                                      ]
                                  }
                              ]
                          }
                      ],
                      techniques: []
                  }
              ]
          },
          {
              id: 'WCAG2:understandable',
              num: '3',
              versions: ['2.0', '2.1'],
              handle: 'Understandable',
              title: 'Information and the operation of the user interface must be understandable.',
              guidelines: [
                  {
                      id: 'WCAG2:readable',
                      alt_id: ['meaning'],
                      num: '3.1',
                      versions: ['2.0', '2.1'],
                      handle: 'Readable',
                      title: 'Make text content readable and understandable.',
                      successcriteria: [
                          {
                              id: 'WCAG2:language-of-page',
                              alt_id: ['meaning-doc-lang-id'],
                              num: '3.1.1',
                              versions: ['2.0', '2.1'],
                              level: 'A',
                              handle: 'Language of Page',
                              title: 'The default human language of each Web page can be programmatically determined.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:H57',
                                              title: 'Using language attributes on the html element'
                                          },
                                          {
                                              id: 'TECH:FLASH13',
                                              title: 'Using HTML language attributes to specify language in Flash content'
                                          },
                                          {
                                              id: 'TECH:PDF16',
                                              title: 'Setting the default language using the /Lang entry in the document catalog of a PDF document'
                                          },
                                          {
                                              id: 'TECH:PDF19',
                                              title: 'Specifying the language for a passage or phrase with the Lang entry in PDF documents'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: [
                                          {
                                              id: 'TECH:SVR5',
                                              title: 'Specifying the default language in the HTTP header'
                                          }
                                      ]
                                  },
                                  {
                                      failure: []
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:language-of-parts',
                              alt_id: ['meaning-other-lang-id'],
                              num: '3.1.2',
                              versions: ['2.0', '2.1'],
                              level: 'AA',
                              handle: 'Language of Parts',
                              title: 'The human language of each passage or phrase in the content can be programmatically determined except for proper names, technical terms, words of indeterminate language, and words or phrases that have become part of the vernacular of the immediately surrounding text.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:H58',
                                              title: 'Using language attributes to identify changes in the human language'
                                          },
                                          {
                                              id: 'TECH:FLASH13',
                                              title: 'Using HTML language attributes to specify language in Flash content'
                                          },
                                          {
                                              id: 'TECH:PDF19',
                                              title: 'Specifying the language for a passage or phrase with the Lang entry in PDF documents'
                                          },
                                          {
                                              id: 'TECH:SL4',
                                              title: 'Declaring Discrete Silverlight Objects to Specify Language Parts in the HTML DOM'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: [
                                          {
                                              id: 'TECH:SL27',
                                              title: 'Using Language/Culture Properties as Exposed by Silverlight Applications and Assistive Technologies'
                                          }
                                      ]
                                  },
                                  {
                                      failure: []
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:unusual-words',
                              alt_id: ['meaning-idioms'],
                              num: '3.1.3',
                              versions: ['2.0', '2.1'],
                              level: 'AAA',
                              handle: 'Unusual Words',
                              title: 'A mechanism is available for identifying specific definitions of words or phrases used in an unusual or restricted way, including idioms and jargon.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              situations: [
                                                  {
                                                      title: 'Situation A: If the word or phrase has a unique meaning within the Web page:',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:G101',
                                                              title: 'Providing the definition of a word or phrase used in an unusual or restricted way',
                                                              using: [
                                                                  {
                                                                      id: 'TECH:G55',
                                                                      title: 'Linking to definitions',
                                                                      using: [
                                                                          {
                                                                              id: 'TECH:H40',
                                                                              title: 'Using description lists'
                                                                          },
                                                                          {
                                                                              id: 'TECH:H60',
                                                                              title: 'Using the link element to link to a glossary'
                                                                          }
                                                                      ]
                                                                  },
                                                                  {
                                                                      id: 'TECH:G112',
                                                                      title: 'Using inline definitions',
                                                                      using: [
                                                                          {
                                                                              id: 'TECH:H54',
                                                                              title: 'Using the dfn element to identify the defining instance of a word'
                                                                          }
                                                                      ]
                                                                  }
                                                              ]
                                                          },
                                                          {
                                                              id: 'TECH:G101',
                                                              title: 'Providing the definition of a word or phrase used in an unusual or restricted way',
                                                              using: [
                                                                  {
                                                                      id: 'TECH:G55',
                                                                      title: 'Linking to definitions',
                                                                      using: [
                                                                          {
                                                                              id: 'TECH:H40',
                                                                              title: 'Using description lists'
                                                                          },
                                                                          {
                                                                              id: 'TECH:H60',
                                                                              title: 'Using the link element to link to a glossary'
                                                                          }
                                                                      ]
                                                                  },
                                                                  {
                                                                      id: 'TECH:G62',
                                                                      title: 'Providing a glossary'
                                                                  },
                                                                  {
                                                                      id: 'TECH:G70',
                                                                      title: 'Providing a function to search an online dictionary'
                                                                  }
                                                              ]
                                                          }
                                                      ]
                                                  },
                                                  {
                                                      title: 'Situation B: If the word or phrase means different things within the same Web page:',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:G101',
                                                              title: 'Providing the definition of a word or phrase used in an unusual or restricted way',
                                                              using: [
                                                                  {
                                                                      id: 'TECH:G55',
                                                                      title: 'Linking to definitions',
                                                                      using: [
                                                                          {
                                                                              id: 'TECH:H40',
                                                                              title: 'Using description lists'
                                                                          },
                                                                          {
                                                                              id: 'TECH:H60',
                                                                              title: 'Using the link element to link to a glossary'
                                                                          }
                                                                      ]
                                                                  },
                                                                  {
                                                                      id: 'TECH:G112',
                                                                      title: 'Using inline definitions',
                                                                      using: [
                                                                          {
                                                                              id: 'TECH:H54',
                                                                              title: 'Using the dfn element to identify the defining instance of a word'
                                                                          }
                                                                      ]
                                                                  }
                                                              ]
                                                          }
                                                      ]
                                                  }
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      advisory: []
                                  },
                                  {
                                      failure: []
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:abbreviations',
                              alt_id: ['meaning-located'],
                              num: '3.1.4',
                              versions: ['2.0', '2.1'],
                              level: 'AAA',
                              handle: 'Abbreviations',
                              title: 'A mechanism for identifying the expanded form or meaning of abbreviations is available.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              situations: [
                                                  {
                                                      title: 'Situation A: If the abbreviation has only one meaning within the Web page:',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:G102',
                                                              title: 'Providing the expansion or explanation of an abbreviation',
                                                              using: [
                                                                  {
                                                                      id: 'TECH:G97',
                                                                      title: 'Providing the first use of an abbreviation immediately before or after the expanded form'
                                                                  },
                                                                  {
                                                                      id: 'TECH:G55',
                                                                      title: 'Linking to definitions'
                                                                  },
                                                                  {
                                                                      id: 'TECH:H28',
                                                                      title: 'Providing definitions for abbreviations by using the abbr element'
                                                                  },
                                                                  {
                                                                      id: 'TECH:PDF8',
                                                                      title: 'Providing definitions for abbreviations via an E entry for a structure element'
                                                                  }
                                                              ]
                                                          },
                                                          {
                                                              id: 'TECH:G102',
                                                              title: 'Providing the expansion or explanation of an abbreviation',
                                                              using: [
                                                                  {
                                                                      id: 'TECH:G55',
                                                                      title: 'Linking to definitions'
                                                                  },
                                                                  {
                                                                      id: 'TECH:G62',
                                                                      title: 'Providing a glossary'
                                                                  },
                                                                  {
                                                                      id: 'TECH:H60',
                                                                      title: 'Using the link element to link to a glossary'
                                                                  },
                                                                  {
                                                                      id: 'TECH:G70',
                                                                      title: 'Providing a function to search an online dictionary'
                                                                  },
                                                                  {
                                                                      id: 'TECH:H28',
                                                                      title: 'Providing definitions for abbreviations by using the abbr element'
                                                                  },
                                                                  {
                                                                      id: 'TECH:PDF8',
                                                                      title: 'Providing definitions for abbreviations via an E entry for a structure element'
                                                                  }
                                                              ]
                                                          }
                                                      ]
                                                  },
                                                  {
                                                      title: 'Situation B: If the abbreviation means different things within the same Web page:',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:G102',
                                                              title: 'Providing the expansion or explanation of an abbreviation',
                                                              using: [
                                                                  {
                                                                      id: 'TECH:G55',
                                                                      title: 'Linking to definitions'
                                                                  },
                                                                  {
                                                                      id: 'TECH:H28',
                                                                      title: 'Providing definitions for abbreviations by using the abbr element'
                                                                  },
                                                                  {
                                                                      id: 'TECH:PDF8',
                                                                      title: 'Providing definitions for abbreviations via an E entry for a structure element'
                                                                  }
                                                              ]
                                                          }
                                                      ]
                                                  }
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      advisory: []
                                  },
                                  {
                                      failure: []
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:reading-level',
                              alt_id: ['meaning-supplements'],
                              num: '3.1.5',
                              versions: ['2.0', '2.1'],
                              level: 'AAA',
                              handle: 'Reading Level',
                              title: 'When text requires reading ability more advanced than the lower secondary education level after removal of proper names and titles, supplemental content, or a version that does not require reading ability more advanced than the lower secondary education level, is available.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:G86',
                                              title: 'Providing a text summary that can be understood by people with lower secondary education level reading ability'
                                          },
                                          {
                                              id: 'TECH:G103',
                                              title: 'Providing visual illustrations, pictures, and symbols to help explain ideas, events, and processes'
                                          },
                                          {
                                              id: 'TECH:G79',
                                              title: 'Providing a spoken version of the text'
                                          },
                                          {
                                              id: 'TECH:G153',
                                              title: 'Making the text easier to read'
                                          },
                                          {
                                              id: 'TECH:G160',
                                              title: 'Providing sign language versions of information, ideas, and processes that must be understood in order to use the content'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: []
                                  },
                                  {
                                      failure: []
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:pronunciation',
                              alt_id: ['meaning-pronunciation'],
                              num: '3.1.6',
                              versions: ['2.0', '2.1'],
                              level: 'AAA',
                              handle: 'Pronunciation',
                              title: 'A mechanism is available for identifying specific pronunciation of words where meaning of the words, in context, is ambiguous without knowing the pronunciation.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:G120',
                                              title: 'Providing the pronunciation immediately following the word'
                                          },
                                          {
                                              id: 'TECH:G121',
                                              title: 'Linking to pronunciations'
                                          },
                                          {
                                              id: 'TECH:G62',
                                              title: 'Providing a glossary'
                                          },
                                          {
                                              id: 'TECH:G163',
                                              title: 'Using standard diacritical marks that can be turned off'
                                          },
                                          {
                                              id: 'TECH:H62',
                                              title: 'Using the ruby element'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: []
                                  },
                                  {
                                      failure: []
                                  }
                              ]
                          }
                      ],
                      techniques: []
                  },
                  {
                      id: 'WCAG2:predictable',
                      alt_id: ['consistent-behavior'],
                      num: '3.2',
                      versions: ['2.0', '2.1'],
                      handle: 'Predictable',
                      title: 'Make Web pages appear and operate in predictable ways.',
                      successcriteria: [
                          {
                              id: 'WCAG2:on-focus',
                              alt_id: ['consistent-behavior-receive-focus'],
                              num: '3.2.1',
                              versions: ['2.0', '2.1'],
                              level: 'A',
                              handle: 'On Focus',
                              title: 'When any user interface component receives focus, it does not initiate a change of context.',
                              sufficientNotes: [
                                  'A change of content is not always a change of context. This success criterion is automatically met if changes in content are not also changes of context.'
                              ],
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:G107',
                                              title: 'Using "activate" rather than "focus" as a trigger for changes of context'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: [
                                          {
                                              id: 'TECH:G200',
                                              title: 'Opening new windows and tabs from a link only when necessary'
                                          },
                                          {
                                              id: 'TECH:G201',
                                              title: 'Giving users advanced warning when opening a new window'
                                          }
                                      ]
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:F55',
                                              title: 'Failure of Success Criteria 2.1.1, 2.4.7, and 3.2.1 due to using script to remove focus when focus is received'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:on-input',
                              alt_id: ['consistent-behavior-unpredictable-change'],
                              num: '3.2.2',
                              versions: ['2.0', '2.1'],
                              level: 'A',
                              handle: 'On Input',
                              title: 'Changing the setting of any user interface component does not automatically cause a change of context unless the user has been advised of the behavior before using the component.',
                              sufficientNotes: [
                                  'A change of content is not always a change of context. This success criterion is automatically met if changes in content are not also changes of context.'
                              ],
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:G80',
                                              title: 'Providing a submit button to initiate a change of context',
                                              using: [
                                                  {
                                                      id: 'TECH:H32',
                                                      title: 'Providing submit buttons'
                                                  },
                                                  {
                                                      id: 'TECH:H84',
                                                      title: 'Using a button with a select element to perform an action'
                                                  },
                                                  {
                                                      id: 'TECH:FLASH4',
                                                      title: 'Providing submit buttons in Flash'
                                                  },
                                                  {
                                                      id: 'TECH:PDF15',
                                                      title: 'Providing submit buttons with the submit-form action in PDF forms'
                                                  },
                                                  {
                                                      id: 'TECH:SL10',
                                                      title: 'Implementing a Submit-Form Pattern in Silverlight'
                                                  }
                                              ]
                                          },
                                          {
                                              id: 'TECH:G13',
                                              title: 'Describing what will happen before a change to a form control that causes a change of context to occur is made'
                                          },
                                          {
                                              id: 'TECH:SCR19',
                                              title: 'Using an onchange event on a select element without causing a change of context'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: [
                                          {
                                              id: 'TECH:G201',
                                              title: 'Giving users advanced warning when opening a new window'
                                          }
                                      ]
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:F36',
                                              title: 'Failure of Success Criterion 3.2.2 due to automatically submitting a form and given a value'
                                          },
                                          {
                                              id: 'TECH:F37',
                                              title: 'Failure of Success Criterion 3.2.2 due to launching a new window without prior warning when the selection of a radio button, check box or select list is changed'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:consistent-navigation',
                              alt_id: ['consistent-behavior-consistent-locations'],
                              num: '3.2.3',
                              versions: ['2.0', '2.1'],
                              level: 'AA',
                              handle: 'Consistent Navigation',
                              title: 'Navigational mechanisms that are repeated on multiple Web pages within a set of Web pages occur in the same relative order each time they are repeated, unless a change is initiated by the user.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:G61',
                                              title: 'Presenting repeated components in the same relative order each time they appear'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: [
                                          {
                                              id: 'TECH:PDF14',
                                              title: 'Providing running headers and footers in PDF documents'
                                          },
                                          {
                                              id: 'TECH:PDF17',
                                              title: 'Specifying consistent page numbering for PDF documents'
                                          }
                                      ]
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:F66',
                                              title: 'Failure of Success Criterion 3.2.3 due to presenting navigation links in a different relative order on different pages'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:consistent-identification',
                              alt_id: ['consistent-behavior-consistent-functionality'],
                              num: '3.2.4',
                              versions: ['2.0', '2.1'],
                              level: 'AA',
                              handle: 'Consistent Identification',
                              title: 'Components that have the same functionality within a set of Web pages are identified consistently.',
                              sufficientNotes: [
                                  'Text alternatives that are “consistent” are not always “identical.” For instance, you may have an graphical arrow at the bottom of a Web page that links to the next Web page. The text alternative may say “Go to page 4.” Naturally, it would not be appropriate to repeat this exact text alternative on the next Web page. It would be more appropriate to say “Go to page 5”. Although these text alternatives would not be identical, they would be consistent, and therefore would satisfy this Success Criterion.',
                                  'A single non-text-content-item may be used to serve different functions. In such cases, different text alternatives are necessary and should be used. Examples can be commonly found with the use of icons such as check marks, cross marks, and traffic signs. Their functions can be different depending on the context of the Web page. A check mark icon may function as “approved”, “completed”, or “included”, to name a few, depending on the situation. Using “check mark” as text alternative across all Web pages does not help users understand the function of the icon. Different text alternatives can be used when the same non-text content serves multiple functions.'
                              ],
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              and: [
                                                  {
                                                      id: 'TECH:G197',
                                                      title: 'Using labels, names, and text alternatives consistently for content that has the same functionality'
                                                  }
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      advisory: []
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:F31',
                                              title: 'Failure of Success Criterion 3.2.4 due to using two different labels for the same function on different Web pages within a set of Web pages'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:change-on-request',
                              alt_id: ['consistent-behavior-no-extreme-changes-context'],
                              num: '3.2.5',
                              versions: ['2.0', '2.1'],
                              level: 'AAA',
                              handle: 'Change on Request',
                              title: 'Changes of context are initiated only by user request or a mechanism is available to turn off such changes.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              situations: [
                                                  {
                                                      title: 'Situation A: If the Web page allows automatic updates:',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:G76',
                                                              title: 'Providing a mechanism to request an update of the content instead of updating automatically'
                                                          }
                                                      ]
                                                  },
                                                  {
                                                      title: 'Situation B: If automatic redirects are possible:',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:SVR1',
                                                              title: 'Implementing automatic redirects on the server side instead of on the client side'
                                                          },
                                                          {
                                                              id: 'TECH:G110',
                                                              title: 'Using an instant client-side redirect',
                                                              using: [
                                                                  {
                                                                      id: 'TECH:H76',
                                                                      title: 'Using meta refresh to create an instant client-side redirect'
                                                                  }
                                                              ]
                                                          }
                                                      ]
                                                  },
                                                  {
                                                      title: 'Situation C: If the Web page uses pop-up windows:',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:text',
                                                              title: 'Including pop-up windows using one of the following techniques:',
                                                              using: [
                                                                  {
                                                                      id: 'TECH:H83',
                                                                      title: 'Using the target attribute to open a new window on user request and indicating this in link text'
                                                                  },
                                                                  {
                                                                      id: 'TECH:SCR24',
                                                                      title: 'Using progressive enhancement to open new windows on user request'
                                                                  }
                                                              ]
                                                          }
                                                      ]
                                                  },
                                                  {
                                                      title: 'Situation D: If using an onchange event on a select element:',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:SCR19',
                                                              title: 'Using an onchange event on a select element without causing a change of context'
                                                          }
                                                      ]
                                                  }
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      advisory: [
                                          {
                                              id: 'TECH:G200',
                                              title: 'Opening new windows and tabs from a link only when necessary'
                                          }
                                      ]
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:F60',
                                              title: 'Failure of Success Criterion 3.2.5 due to launching a new window when a user enters text into an input field'
                                          },
                                          {
                                              id: 'TECH:F61',
                                              title: 'Failure of Success Criterion 3.2.5 due to complete change of main content through an automatic update that the user cannot disable from within the content'
                                          },
                                          {
                                              id: 'TECH:F9',
                                              title: 'Failure of Success Criterion 3.2.5 due to changing the context when the user removes focus from a form element'
                                          },
                                          {
                                              id: 'TECH:F22',
                                              title: 'Failure of Success Criterion 3.2.5 due to opening windows that are not requested by the user'
                                          },
                                          {
                                              id: 'TECH:F52',
                                              title: 'Failure of Success Criterion 3.2.1 and 3.2.5 due to opening a new window as soon as a new page is loaded'
                                          },
                                          {
                                              id: 'TECH:F41',
                                              title: 'Failure of Success Criterion 2.2.1, 2.2.4, and 3.2.5 due to using meta refresh to reload the page'
                                          }
                                      ]
                                  }
                              ]
                          }
                      ],
                      techniques: []
                  },
                  {
                      id: 'WCAG2:input-assistance',
                      alt_id: ['minimize-error'],
                      num: '3.3',
                      versions: ['2.0', '2.1'],
                      handle: 'Input Assistance',
                      title: 'Help users avoid and correct mistakes.',
                      successcriteria: [
                          {
                              id: 'WCAG2:error-identification',
                              alt_id: ['minimize-error-identified'],
                              num: '3.3.1',
                              versions: ['2.0', '2.1'],
                              level: 'A',
                              handle: 'Error Identification',
                              title: 'If an input error is automatically detected, the item that is in error is identified and the error is described to the user in text.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              situations: [
                                                  {
                                                      title: 'Situation A: If a form contains fields for which information from the user is mandatory.',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:G83',
                                                              title: 'Providing text descriptions to identify required fields that were not completed'
                                                          },
                                                          {
                                                              id: 'TECH:ARIA21',
                                                              title: 'Using Aria-Invalid to Indicate An Error Field'
                                                          },
                                                          {
                                                              id: 'TECH:SCR18',
                                                              title: 'Providing client-side validation and alert'
                                                          },
                                                          {
                                                              id: 'TECH:PDF5',
                                                              title: 'Indicating required form controls in PDF forms'
                                                          },
                                                          {
                                                              id: 'TECH:SL35',
                                                              title: 'Using the Validation and ValidationSummary APIs to Implement Client Side Forms Validation in Silverlight'
                                                          }
                                                      ]
                                                  },
                                                  {
                                                      title: 'Situation B: If information provided by the user is required to be in a specific data format or of certain values.',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:ARIA18',
                                                              title: 'Using aria-alertdialog to Identify Errors'
                                                          },
                                                          {
                                                              id: 'TECH:ARIA19',
                                                              title: 'Using ARIA role=alert or Live Regions to Identify Errors'
                                                          },
                                                          {
                                                              id: 'TECH:ARIA21',
                                                              title: 'Using Aria-Invalid to Indicate An Error Field'
                                                          },
                                                          {
                                                              id: 'TECH:G84',
                                                              title: 'Providing a text description when the user provides information that is not in the list of allowed values'
                                                          },
                                                          {
                                                              id: 'TECH:G85',
                                                              title: 'Providing a text description when user input falls outside the required format or values'
                                                          },
                                                          {
                                                              id: 'TECH:SCR18',
                                                              title: 'Providing client-side validation and alert'
                                                          },
                                                          {
                                                              id: 'TECH:SCR32',
                                                              title: 'Providing client-side validation and adding error text via the DOM'
                                                          },
                                                          {
                                                              id: 'TECH:FLASH12',
                                                              title: 'Providing client-side validation and adding error text via the accessible description'
                                                          },
                                                          {
                                                              id: 'TECH:PDF22',
                                                              title: 'Indicating when user input falls outside the required format or values in PDF forms'
                                                          },
                                                          {
                                                              id: 'TECH:SL35',
                                                              title: 'Using the Validation and ValidationSummary APIs to Implement Client Side Forms Validation in Silverlight'
                                                          }
                                                      ]
                                                  }
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      advisory: [
                                          {
                                              id: 'TECH:G139',
                                              title: 'Creating a mechanism that allows users to jump to errors'
                                          },
                                          {
                                              id: 'TECH:G199',
                                              title: 'Providing success feedback when data is submitted successfully'
                                          }
                                      ]
                                  },
                                  {
                                      failure: []
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:labels-or-instructions',
                              alt_id: ['minimize-error-cues'],
                              num: '3.3.2',
                              versions: ['2.0', '2.1'],
                              level: 'A',
                              handle: 'Labels or Instructions',
                              title: 'Labels or instructions are provided when content requires user input.',
                              sufficientNotes: [
                                  'The techniques at the end of the above list should be considered “last resort” and only used when the other techniques cannot be applied to the page. The earlier techniques are preferred because they increase accessibility to a wider user group.'
                              ],
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:G131',
                                              title: 'Providing descriptive labels',
                                              using: [
                                                  {
                                                      id: 'TECH:ARIA1',
                                                      title: 'Using the aria-describedby property to provide a descriptive label for user interface controls'
                                                  },
                                                  {
                                                      id: 'TECH:ARIA9',
                                                      title: 'Using aria-labelledby to concatenate a label from several text nodes'
                                                  },
                                                  {
                                                      id: 'TECH:ARIA17',
                                                      title: 'Using grouping roles to identify related form controls'
                                                  },
                                                  {
                                                      id: 'TECH:G89',
                                                      title: 'Providing expected data format and example'
                                                  },
                                                  {
                                                      id: 'TECH:G184',
                                                      title: 'Providing text instructions at the beginning of a form or set of fields that describes the necessary input'
                                                  },
                                                  {
                                                      id: 'TECH:G162',
                                                      title: 'Positioning labels to maximize predictability of relationships'
                                                  },
                                                  {
                                                      id: 'TECH:G83',
                                                      title: 'Providing text descriptions to identify required fields that were not completed'
                                                  },
                                                  {
                                                      id: 'TECH:H90',
                                                      title: 'Indicating required form controls using label or legend'
                                                  },
                                                  {
                                                      id: 'TECH:FLASH10',
                                                      title: 'Indicating required form controls in Flash'
                                                  },
                                                  {
                                                      id: 'TECH:PDF5',
                                                      title: 'Indicating required form controls in PDF forms'
                                                  }
                                              ]
                                          },
                                          {
                                              id: 'TECH:H44',
                                              title: 'Using label elements to associate text labels with form controls'
                                          },
                                          {
                                              id: 'TECH:FLASH32',
                                              title: 'Using auto labeling to associate text labels with form controls'
                                          },
                                          {
                                              id: 'TECH:FLASH29',
                                              title: 'Setting the label property for form components'
                                          },
                                          {
                                              id: 'TECH:FLASH25',
                                              title: 'Labeling a form control by setting its accessible name'
                                          },
                                          {
                                              id: 'TECH:PDF10',
                                              title: 'Providing labels for interactive form controls in PDF documents'
                                          },
                                          {
                                              id: 'TECH:SL26',
                                              title: 'Using LabeledBy to Associate Labels and Targets in Silverlight'
                                          },
                                          {
                                              id: 'TECH:H71',
                                              title: 'Providing a description for groups of form controls using fieldset and legend elements'
                                          },
                                          {
                                              id: 'TECH:FLASH8',
                                              title: 'Adding a group name to the accessible name of a form control'
                                          },
                                          {
                                              id: 'TECH:SL8',
                                              title: 'Displaying HelpText in Silverlight User Interfaces'
                                          },
                                          {
                                              id: 'TECH:G167',
                                              title: 'Using an adjacent button to label the purpose of a field'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: [
                                          {
                                              id: 'TECH:G13',
                                              title: 'Describing what will happen before a change to a form control that causes a change of context to occur is made'
                                          },
                                          {
                                              id: 'TECH:SL19',
                                              title: 'Providing User Instructions With AutomationProperties.HelpText in Silverlight'
                                          }
                                      ]
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:F82',
                                              title: 'Failure of Success Criterion 3.3.2 by visually formatting a set of phone number fields but not including a text label'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:error-suggestion',
                              alt_id: ['minimize-error-suggestions'],
                              num: '3.3.3',
                              versions: ['2.0', '2.1'],
                              level: 'AA',
                              handle: 'Error Suggestion',
                              title: 'If an input error is automatically detected and suggestions for correction are known, then the suggestions are provided to the user, unless it would jeopardize the security or purpose of the content.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              situations: [
                                                  {
                                                      title: 'Situation A: If a mandatory field contains no information:',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:G83',
                                                              title: 'Providing text descriptions to identify required fields that were not completed'
                                                          },
                                                          {
                                                              id: 'TECH:ARIA2',
                                                              title: 'Identifying a required field with the aria-required property'
                                                          },
                                                          {
                                                              id: 'TECH:PDF5',
                                                              title: 'Indicating required form controls in PDF forms'
                                                          },
                                                          {
                                                              id: 'TECH:SL35',
                                                              title: 'Using the Validation and ValidationSummary APIs to Implement Client Side Forms Validation in Silverlight'
                                                          }
                                                      ]
                                                  },
                                                  {
                                                      title: 'Situation B: If information for a field is required to be in a specific data format:',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:ARIA18',
                                                              title: 'Using aria-alertdialog to Identify Errors'
                                                          },
                                                          {
                                                              id: 'TECH:G85',
                                                              title: 'Providing a text description when user input falls outside the required format or values'
                                                          },
                                                          {
                                                              id: 'TECH:G177',
                                                              title: 'Providing suggested correction text'
                                                          },
                                                          {
                                                              id: 'TECH:SCR18',
                                                              title: 'Providing client-side validation and alert'
                                                          },
                                                          {
                                                              id: 'TECH:SCR32',
                                                              title: 'Providing client-side validation and adding error text via the DOM'
                                                          },
                                                          {
                                                              id: 'TECH:FLASH12',
                                                              title: 'Providing client-side validation and adding error text via the accessible description'
                                                          },
                                                          {
                                                              id: 'TECH:PDF22',
                                                              title: 'Indicating when user input falls outside the required format or values in PDF forms'
                                                          }
                                                      ]
                                                  },
                                                  {
                                                      title: 'Situation C: Information provided by the user is required to be one of a limited set of values:',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:ARIA18',
                                                              title: 'Using aria-alertdialog to Identify Errors'
                                                          },
                                                          {
                                                              id: 'TECH:G84',
                                                              title: 'Providing a text description when the user provides information that is not in the list of allowed values'
                                                          },
                                                          {
                                                              id: 'TECH:G177',
                                                              title: 'Providing suggested correction text'
                                                          },
                                                          {
                                                              id: 'TECH:SCR18',
                                                              title: 'Providing client-side validation and alert'
                                                          },
                                                          {
                                                              id: 'TECH:SCR32',
                                                              title: 'Providing client-side validation and adding error text via the DOM'
                                                          },
                                                          {
                                                              id: 'TECH:FLASH12',
                                                              title: 'Providing client-side validation and adding error text via the accessible description'
                                                          },
                                                          {
                                                              id: 'TECH:PDF22',
                                                              title: 'Indicating when user input falls outside the required format or values in PDF forms'
                                                          }
                                                      ]
                                                  }
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      advisory: [
                                          {
                                              id: 'TECH:G139',
                                              title: 'Creating a mechanism that allows users to jump to errors'
                                          },
                                          {
                                              id: 'TECH:G199',
                                              title: 'Providing success feedback when data is submitted successfully'
                                          },
                                          {
                                              id: 'TECH:SCR18',
                                              title: 'Providing client-side validation and alert'
                                          }
                                      ]
                                  },
                                  {
                                      failure: []
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:error-prevention-legal-financial-data',
                              alt_id: ['minimize-error-reversible'],
                              num: '3.3.4',
                              versions: ['2.0', '2.1'],
                              level: 'AA',
                              handle: 'Error Prevention (Legal, Financial, Data)',
                              title: 'For Web pages that cause legal commitments or financial transactions for the user to occur, that modify or delete user-controllable data in data storage systems, or that submit user test responses, at least one of the following is true:',
                              details: [
                                  {
                                      type: 'ulist',
                                      items: [
                                          {
                                              handle: 'Reversible',
                                              text: 'Submissions are reversible.'
                                          },
                                          {
                                              handle: 'Checked',
                                              text: 'Data entered by the user is checked for input errors and the user is provided an opportunity to correct them.'
                                          },
                                          {
                                              handle: 'Confirmed',
                                              text: 'A mechanism is available for reviewing, confirming, and correcting information before finalizing the submission.'
                                          }
                                      ]
                                  }
                              ],
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              situations: [
                                                  {
                                                      title: 'Situation A: If an application causes a legal transaction to occur, such as making a purchase or submitting an income tax return:',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:G164',
                                                              title: 'Providing a stated time within which an online request (or transaction) may be amended or canceled by the user after making the request'
                                                          },
                                                          {
                                                              id: 'TECH:G98',
                                                              title: 'Providing the ability for the user to review and correct answers before submitting'
                                                          },
                                                          {
                                                              id: 'TECH:G155',
                                                              title: 'Providing a checkbox in addition to a submit button'
                                                          }
                                                      ]
                                                  },
                                                  {
                                                      title: 'Situation B: If an action causes information to be deleted:',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:G99',
                                                              title: 'Providing the ability to recover deleted information'
                                                          },
                                                          {
                                                              id: 'TECH:G168',
                                                              title: 'Requesting confirmation to continue with selected action'
                                                          },
                                                          {
                                                              id: 'TECH:G155',
                                                              title: 'Providing a checkbox in addition to a submit button'
                                                          }
                                                      ]
                                                  },
                                                  {
                                                      title: 'Situation C: If the Web page includes a testing application:',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:G98',
                                                              title: 'Providing the ability for the user to review and correct answers before submitting'
                                                          },
                                                          {
                                                              id: 'TECH:G168',
                                                              title: 'Requesting confirmation to continue with selected action'
                                                          }
                                                      ]
                                                  }
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      advisory: [
                                          {
                                              id: 'TECH:SCR18',
                                              title: 'Providing client-side validation and alert'
                                          },
                                          {
                                              id: 'TECH:SL35',
                                              title: 'Using the Validation and ValidationSummary APIs to Implement Client Side Forms Validation in Silverlight'
                                          },
                                          {
                                              id: 'TECH:G199',
                                              title: 'Providing success feedback when data is submitted successfully'
                                          }
                                      ]
                                  },
                                  {
                                      failure: []
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:help',
                              alt_id: ['minimize-error-context-help'],
                              num: '3.3.5',
                              versions: ['2.0', '2.1'],
                              level: 'AAA',
                              handle: 'Help',
                              title: 'Context-sensitive help is available.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              situations: [
                                                  {
                                                      title: 'Situation A: If a form requires text input:',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:G71',
                                                              title: 'Providing a help link on every Web page'
                                                          },
                                                          {
                                                              id: 'TECH:G193',
                                                              title: 'Providing help by an assistant in the Web page'
                                                          },
                                                          {
                                                              id: 'TECH:G194',
                                                              title: 'Providing spell checking and suggestions for text input'
                                                          },
                                                          {
                                                              id: 'TECH:G184',
                                                              title: 'Providing text instructions at the beginning of a form or set of fields that describes the necessary input'
                                                          }
                                                      ]
                                                  },
                                                  {
                                                      title: 'Situation B: If a form requires text input in an expected data format:',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:G89',
                                                              title: 'Providing expected data format and example'
                                                          },
                                                          {
                                                              id: 'TECH:G184',
                                                              title: 'Providing text instructions at the beginning of a form or set of fields that describes the necessary input'
                                                          }
                                                      ]
                                                  }
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      advisory: [
                                          {
                                              id: 'TECH:H89',
                                              title: 'Using the title attribute to provide context-sensitive help'
                                          }
                                      ]
                                  },
                                  {
                                      failure: []
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:error-prevention-all',
                              alt_id: ['minimize-error-reversible-all'],
                              num: '3.3.6',
                              versions: ['2.0', '2.1'],
                              level: 'AAA',
                              handle: 'Error Prevention (All)',
                              title: 'For Web pages that require the user to submit information, at least one of the following is true:',
                              details: [
                                  {
                                      type: 'ulist',
                                      items: [
                                          {
                                              handle: 'Reversible',
                                              text: 'Submissions are reversible.'
                                          },
                                          {
                                              handle: 'Checked',
                                              text: 'Data entered by the user is checked for input errors and the user is provided an opportunity to correct them.'
                                          },
                                          {
                                              handle: 'Confirmed',
                                              text: 'A mechanism is available for reviewing, confirming, and correcting information before finalizing the submission.'
                                          }
                                      ]
                                  }
                              ],
                              techniques: [
                                  {
                                      sufficient: []
                                  },
                                  {
                                      advisory: []
                                  },
                                  {
                                      failure: []
                                  }
                              ]
                          }
                      ],
                      techniques: []
                  }
              ]
          },
          {
              id: 'WCAG2:robust',
              num: '4',
              versions: ['2.0', '2.1'],
              handle: 'Robust',
              title: 'Content must be robust enough that it can be interpreted by a wide variety of user agents, including assistive technologies.',
              guidelines: [
                  {
                      id: 'WCAG2:compatible',
                      alt_id: ['ensure-compat'],
                      num: '4.1',
                      versions: ['2.0', '2.1'],
                      handle: 'Compatible',
                      title: 'Maximize compatibility with current and future user agents, including assistive technologies.',
                      successcriteria: [
                          {
                              id: 'WCAG2:parsing',
                              alt_id: ['ensure-compat-parses'],
                              num: '4.1.1',
                              versions: ['2.0', '2.1'],
                              level: 'A',
                              handle: 'Parsing',
                              title: 'In content implemented using markup languages, elements have complete start and end tags, elements are nested according to their specifications, elements do not contain duplicate attributes, and any IDs are unique, except where the specifications allow these features.',
                              details: [
                                  {
                                      type: 'note',
                                      handle: 'Note 1',
                                      text: 'Start and end tags that are missing a critical character in their formation, such as a closing angle bracket or a mismatched attribute value quotation mark are not complete.'
                                  }
                              ],
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              id: 'TECH:G134',
                                              title: 'Validating Web pages'
                                          },
                                          {
                                              id: 'TECH:G192',
                                              title: 'Fully conforming to specifications'
                                          },
                                          {
                                              id: 'TECH:H88',
                                              title: 'Using HTML according to spec'
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: 'Ensuring that Web pages can be parsed by using one of the following techniques:',
                                              using: [
                                                  {
                                                      and: [
                                                          {
                                                              id: 'TECH:H74',
                                                              title: 'Ensuring that opening and closing tags are used according to specification'
                                                          },
                                                          {
                                                              id: 'TECH:H93',
                                                              title: 'Ensuring that id attributes are unique on a Web page'
                                                          },
                                                          {
                                                              id: 'TECH:H94',
                                                              title: 'Ensuring that elements do not contain duplicate attributes'
                                                          }
                                                      ]
                                                  },
                                                  {
                                                      id: 'TECH:H75',
                                                      title: 'Ensuring that Web pages are well-formed'
                                                  }
                                              ]
                                          },
                                          {
                                              id: 'TECH:SL33',
                                              title: 'Using Well-Formed XAML to Define a Silverlight User Interface'
                                          }
                                      ]
                                  },
                                  {
                                      advisory: []
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:F70',
                                              title: 'Failure of Success Criterion 4.1.1 due to incorrect use of start and end tags or attribute markup'
                                          },
                                          {
                                              id: 'TECH:F77',
                                              title: 'Failure of Success Criterion 4.1.1 due to duplicate values of type ID'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:name-role-value',
                              alt_id: ['ensure-compat-rsv'],
                              num: '4.1.2',
                              versions: ['2.0', '2.1'],
                              level: 'A',
                              handle: 'Name, Role, Value',
                              title: 'For all user interface components (including but not limited to: form elements, links and components generated by scripts), the name and role can be programmatically determined; states, properties, and values that can be set by the user can be programmatically set; and notification of changes to these items is available to user agents, including assistive technologies.',
                              details: [
                                  {
                                      type: 'note',
                                      handle: 'Note 1',
                                      text: 'This success criterion is primarily for Web authors who develop or script their own user interface components. For example, standard HTML controls already meet this success criterion when used according to specification.'
                                  }
                              ],
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              situations: [
                                                  {
                                                      title: 'Situation A: If using a standard user interface component in a markup language (e.g., HTML):',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:ARIA14',
                                                              title: 'Using aria-label to provide an invisible label where a visible label cannot be used'
                                                          },
                                                          {
                                                              id: 'TECH:ARIA16',
                                                              title: 'Using aria-labelledby to provide a name for user interface controls'
                                                          },
                                                          {
                                                              id: 'TECH:G108',
                                                              title: 'Using markup features to expose the name and role, allow user-settable properties to be directly set, and provide notification of changes',
                                                              using: [
                                                                  {
                                                                      id: 'TECH:H91',
                                                                      title: 'Using HTML form controls and links'
                                                                  },
                                                                  {
                                                                      id: 'TECH:H44',
                                                                      title: 'Using label elements to associate text labels with form controls'
                                                                  },
                                                                  {
                                                                      id: 'TECH:H64',
                                                                      title: 'Using the title attribute of the frame and iframe elements'
                                                                  },
                                                                  {
                                                                      id: 'TECH:H65',
                                                                      title: 'Using the title attribute to identify form controls when the label element cannot be used'
                                                                  },
                                                                  {
                                                                      id: 'TECH:H88',
                                                                      title: 'Using HTML according to spec'
                                                                  }
                                                              ]
                                                          }
                                                      ]
                                                  },
                                                  {
                                                      title: 'Situation B: If using script or code to re-purpose a standard user interface component in a markup language:',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:text',
                                                              title: 'Exposing the names and roles, allowing user-settable properties to be directly set, and providing notification of changes using one of the following techniques:',
                                                              using: [
                                                                  {
                                                                      id: 'TECH:ARIA16',
                                                                      title: 'Using aria-labelledby to provide a name for user interface controls'
                                                                  }
                                                              ]
                                                          }
                                                      ]
                                                  },
                                                  {
                                                      title: 'Situation C: If using a standard user interface component in a programming technology:',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:G135',
                                                              title: 'Using the accessibility API features of a technology to expose names and notification of changes',
                                                              using: [
                                                                  {
                                                                      id: 'TECH:FLASH32',
                                                                      title: 'Using auto labeling to associate text labels with form controls'
                                                                  },
                                                                  {
                                                                      id: 'TECH:FLASH29',
                                                                      title: 'Setting the label property for form components'
                                                                  },
                                                                  {
                                                                      id: 'TECH:FLASH30',
                                                                      title: 'Specifying accessible names for image buttons'
                                                                  },
                                                                  {
                                                                      id: 'TECH:PDF10',
                                                                      title: 'Providing labels for interactive form controls in PDF documents'
                                                                  },
                                                                  {
                                                                      id: 'TECH:PDF12',
                                                                      title: 'Providing name, role, value information for form fields in PDF documents'
                                                                  },
                                                                  {
                                                                      id: 'TECH:SL26',
                                                                      title: 'Using LabeledBy to Associate Labels and Targets in Silverlight'
                                                                  },
                                                                  {
                                                                      id: 'TECH:SL32',
                                                                      title: 'Using Silverlight Text Elements for Appropriate Accessibility Role'
                                                                  }
                                                              ]
                                                          }
                                                      ]
                                                  },
                                                  {
                                                      title: 'Situation D: If creating your own user interface component in a programming language:',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:G10',
                                                              title: 'Creating components using a technology that supports the accessibility notification of changes',
                                                              using: [
                                                                  {
                                                                      id: 'TECH:ARIA4',
                                                                      title: 'Using a WAI-ARIA role to expose the role of a user interface component'
                                                                  },
                                                                  {
                                                                      id: 'TECH:ARIA5',
                                                                      title: 'Using WAI-ARIA state and property attributes to expose the state of a user interface component'
                                                                  },
                                                                  {
                                                                      id: 'TECH:ARIA16',
                                                                      title: 'Using aria-labelledby to provide a name for user interface controls'
                                                                  },
                                                                  {
                                                                      id: 'TECH:SL6',
                                                                      title: 'Defining a UI Automation Peer for a Custom Silverlight Control'
                                                                  },
                                                                  {
                                                                      id: 'TECH:SL18',
                                                                      title: 'Providing Text Equivalent for Nontext Silverlight Controls With AutomationProperties.Name'
                                                                  },
                                                                  {
                                                                      id: 'TECH:SL20',
                                                                      title: 'Relying on Silverlight AutomationPeer Behavior to Set AutomationProperties.Name'
                                                                  },
                                                                  {
                                                                      id: 'TECH:SL30',
                                                                      title: 'Using Silverlight Control Compositing and AutomationProperties.Name'
                                                                  }
                                                              ]
                                                          }
                                                      ]
                                                  }
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      advisory: []
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:F59',
                                              title: 'Failure of Success Criterion 4.1.2 due to using script to make div or span a user interface control in HTML without providing a role for the control'
                                          },
                                          {
                                              id: 'TECH:F15',
                                              title: 'Failure of Success Criterion 4.1.2 due to implementing custom controls that do not use an accessibility API for the technology, or do so incompletely'
                                          },
                                          {
                                              id: 'TECH:F20',
                                              title: 'Failure of Success Criterion 1.1.1 and 4.1.2 due to not updating text alternatives when changes to non-text content occur'
                                          },
                                          {
                                              id: 'TECH:F68',
                                              title: 'Failure of Success Criterion 4.1.2 due to a user interface control not having a programmatically determined name'
                                          },
                                          {
                                              id: 'TECH:F79',
                                              title: 'Failure of Success Criterion 4.1.2 due to the focus state of a user interface component not being programmatically determinable or no notification of change of focus state available'
                                          },
                                          {
                                              id: 'TECH:F86',
                                              title: 'Failure of Success Criterion 4.1.2 due to not providing names for each part of a multi-part form field, such as a US telephone number'
                                          },
                                          {
                                              id: 'TECH:F89',
                                              title: 'Failure of Success Criteria 2.4.4, 2.4.9 and 4.1.2 due to not providing an accessible name for an image which is the only content in a link'
                                          }
                                      ]
                                  }
                              ]
                          },
                          {
                              id: 'WCAG2:status-messages',
                              alt_id: [],
                              num: '4.1.3',
                              versions: ['2.1'],
                              level: 'AA',
                              handle: 'Status Messages',
                              title: 'In content implemented using markup languages, status messages can be programmatically determined through role or properties such that they can be presented to the user by assistive technologies without receiving focus.',
                              techniques: [
                                  {
                                      sufficient: [
                                          {
                                              situations: [
                                                  {
                                                      title: 'Situation A: If a status message advises on the success or results of an action, or the state of an application:',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:ARIA22',
                                                              title: 'Using role=status to present status messages',
                                                              using: [
                                                                  {
                                                                      id: 'TECH:G199',
                                                                      title: 'Providing success feedback when data is submitted successfully'
                                                                  }
                                                              ]
                                                          }
                                                      ]
                                                  },
                                                  {
                                                      title: 'Situation B: If a status message conveys a suggestion, or a warning on the existence of an error:',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:ARIA19',
                                                              title: 'Using ARIA role=alert or Live Regions to Identify Errors',
                                                              using: [
                                                                  {
                                                                      id: 'TECH:G83',
                                                                      title: 'Providing text descriptions to identify required fields that were not completed'
                                                                  },
                                                                  {
                                                                      id: 'TECH:G84',
                                                                      title: 'Providing a text description when the user provides information that is not in the list of allowed values'
                                                                  },
                                                                  {
                                                                      id: 'TECH:G85',
                                                                      title: 'Providing a text description when user input falls outside the required format or values'
                                                                  },
                                                                  {
                                                                      id: 'TECH:G177',
                                                                      title: 'Providing suggested correction text'
                                                                  },
                                                                  {
                                                                      id: 'TECH:G194',
                                                                      title: 'Providing spell checking and suggestions for text input'
                                                                  }
                                                              ]
                                                          }
                                                      ]
                                                  },
                                                  {
                                                      title: 'Situation C: If a status message conveys information on the progress of a process:',
                                                      techniques: [
                                                          {
                                                              id: 'TECH:ARIA23',
                                                              title: 'Using role=log to identify sequential information updates'
                                                          },
                                                          {
                                                              id: 'TECH:text',
                                                              title: 'Using role="progressbar" (future link)'
                                                          },
                                                          {
                                                              and: [
                                                                  {
                                                                      id: 'TECH:ARIA22',
                                                                      title: 'Using role=status to present status messages'
                                                                  },
                                                                  {
                                                                      id: 'TECH:G193',
                                                                      title: 'Providing help by an assistant in the Web page'
                                                                  }
                                                              ]
                                                          }
                                                      ]
                                                  }
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      advisory: [
                                          {
                                              id: 'TECH:text',
                                              title: 'Using aria-live regions with chat clients (future link)'
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: 'Using role="marquee" (future link)'
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: 'Using role="timer" (future link)'
                                          },
                                          {
                                              id: 'TECH:ARIA18',
                                              title: 'Using aria-alertdialog to Identify Errors'
                                          },
                                          {
                                              id: 'TECH:SCR14',
                                              title: 'Using scripts to make nonessential alerts optional'
                                          }
                                      ]
                                  },
                                  {
                                      failure: [
                                          {
                                              id: 'TECH:text',
                                              title: 'Using role="alert" or aria-live="assertive" on content which is not important and time-sensitive (future link)'
                                          },
                                          {
                                              id: 'TECH:text',
                                              title: 'Using a visibilitychange event to hide or display a document without switching the document\'s live regions between active and inactive (future link)'
                                          }
                                      ]
                                  }
                              ]
                          }
                      ],
                      techniques: []
                  }
              ]
          }
      ]
  };
  Object.freeze({
      1: {
          1.1: {
              handle: 'Text Alternatives',
              title: 'Provide text alternatives for any non-text content so that it can be changed into other forms people need, such as large print, braille, speech, symbols or simpler language.',
              '1.1.1': {
                  handle: 'Non-text Content',
                  title: 'All non-text content that is presented to the user has a text alternative that serves the equivalent purpose, except for the situations listed below.',
                  level: 'A'
              }
          },
          1.2: {
              handle: 'Time-based Media',
              title: 'Provide alternatives for time-based media.',
              '1.2.1': {
                  handle: 'Audio-only and Video-only (Prerecorded)',
                  title: 'For prerecorded audio-only and prerecorded video-only media, the following are true, except when the audio or video is a media alternative for text and is clearly labeled as such:',
                  level: 'A'
              },
              '1.2.2': {
                  handle: 'Captions (Prerecorded)',
                  title: 'Captions are provided for all prerecorded audio content in synchronized media, except when the media is a media alternative for text and is clearly labeled as such.',
                  level: 'A'
              },
              '1.2.3': {
                  handle: 'Audio Description or Media Alternative (Prerecorded)',
                  title: 'An alternative for time-based media or audio description of the prerecorded video content is provided for synchronized media, except when the media is a media alternative for text and is clearly labeled as such.',
                  level: 'A'
              },
              '1.2.4': {
                  handle: 'Captions (Live)',
                  title: 'Captions are provided for all live audio content in synchronized media.',
                  level: 'AA'
              },
              '1.2.5': {
                  handle: 'Audio Description (Prerecorded)',
                  title: 'Audio description is provided for all prerecorded video content in synchronized media.',
                  level: 'AA'
              },
              '1.2.6': {
                  handle: 'Sign Language (Prerecorded)',
                  title: 'Sign language interpretation is provided for all prerecorded audio content in synchronized media.',
                  level: 'AAA'
              },
              '1.2.7': {
                  handle: 'Extended Audio Description (Prerecorded)',
                  title: 'Where pauses in foreground audio are insufficient to allow audio descriptions to convey the sense of the video, extended audio description is provided for all prerecorded video content in synchronized media.',
                  level: 'AAA'
              },
              '1.2.8': {
                  handle: 'Media Alternative (Prerecorded)',
                  title: 'An alternative for time-based media is provided for all prerecorded synchronized media and for all prerecorded video-only media.',
                  level: 'AAA'
              },
              '1.2.9': {
                  handle: 'Audio-only (Live)',
                  title: 'An alternative for time-based media that presents equivalent information for live audio-only content is provided.',
                  level: 'AAA'
              }
          },
          1.3: {
              handle: 'Adaptable',
              title: 'Create content that can be presented in different ways (for example simpler layout) without losing information or structure.',
              '1.3.1': {
                  handle: 'Info and Relationships',
                  title: 'Information, structure, and relationships conveyed through presentation can be programmatically determined or are available in text.',
                  level: 'A'
              },
              '1.3.2': {
                  handle: 'Meaningful Sequence',
                  title: 'When the sequence in which content is presented affects its meaning, a correct reading sequence can be programmatically determined.',
                  level: 'A'
              },
              '1.3.3': {
                  handle: 'Sensory Characteristics',
                  title: 'Instructions provided for understanding and operating content do not rely solely on sensory characteristics of components such as shape, size, visual location, orientation, or sound.',
                  level: 'A'
              }
          },
          1.4: {
              handle: 'Distinguishable',
              title: 'Make it easier for users to see and hear content including separating foreground from background.',
              '1.4.1': {
                  handle: 'Use of Color',
                  title: 'Color is not used as the only visual means of conveying information, indicating an action, prompting a response, or distinguishing a visual element.',
                  level: 'A'
              },
              '1.4.2': {
                  handle: 'Audio Control',
                  title: 'If any audio on a Web page plays automatically for more than 3 seconds, either a mechanism is available to pause or stop the audio, or a mechanism is available to control audio volume independently from the overall system volume level.',
                  level: 'A'
              },
              '1.4.3': {
                  handle: 'Contrast (Minimum)',
                  title: 'The visual presentation of text and images of text has a contrast ratio of at least 4.5:1, except for the following:',
                  level: 'AA'
              },
              '1.4.4': {
                  handle: 'Resize text',
                  title: 'Except for captions and images of text, text can be resized without assistive technology up to 200 percent without loss of content or functionality.',
                  level: 'AA'
              },
              '1.4.5': {
                  handle: 'Images of Text',
                  title: 'If the technologies being used can achieve the visual presentation, text is used to convey information rather than images of text except for the following:',
                  level: 'AA'
              },
              '1.4.6': {
                  handle: 'Contrast (Enhanced)',
                  title: 'The visual presentation of text and images of text has a contrast ratio of at least 7:1, except for the following:',
                  level: 'AAA'
              },
              '1.4.7': {
                  handle: 'Low or No Background Audio',
                  title: 'For prerecorded audio-only content that (1) contains primarily speech in the foreground, (2) is not an audio CAPTCHA or audio logo, and (3) is not vocalization intended to be primarily musical expression such as singing or rapping, at least one of the following is true:',
                  level: 'AAA'
              },
              '1.4.8': {
                  handle: 'Visual Presentation',
                  title: 'For the visual presentation of blocks of text, a mechanism is available to achieve the following:',
                  level: 'AAA'
              },
              '1.4.9': {
                  handle: 'Images of Text (No Exception)',
                  title: 'Images of text are only used for pure decoration or where a particular presentation of text is essential to the information being conveyed.',
                  level: 'AAA'
              }
          },
          handle: 'Perceivable',
          title: 'Information and user interface components must be presentable to users in ways they can perceive.'
      },
      2: {
          handle: 'Operable',
          title: 'User interface components and navigation must be operable.',
          2.1: {
              handle: 'Keyboard Accessible',
              title: 'Make all functionality available from a keyboard.',
              '2.1.1': {
                  handle: 'Keyboard',
                  title: 'All functionality of the content is operable through a keyboard interface without requiring specific timings for individual keystrokes, except where the underlying function requires input that depends on the path of the user\'s movement and not just the endpoints.',
                  level: 'A'
              },
              '2.1.2': {
                  handle: 'No Keyboard Trap',
                  title: 'If keyboard focus can be moved to a component of the page using a keyboard interface, then focus can be moved away from that component using only a keyboard interface, and, if it requires more than unmodified arrow or tab keys or other standard exit methods, the user is advised of the method for moving focus away.',
                  level: 'A'
              },
              '2.1.3': {
                  handle: 'Keyboard (No Exception)',
                  title: 'All functionality of the content is operable through a keyboard interface without requiring specific timings for individual keystrokes.',
                  level: 'AAA'
              }
          },
          2.2: {
              handle: 'Enough Time',
              title: 'Provide users enough time to read and use content.',
              '2.2.1': {
                  handle: 'Timing Adjustable',
                  title: 'For each time limit that is set by the content, at least one of the following is true:',
                  level: 'A'
              },
              '2.2.2': {
                  handle: 'Pause, Stop, Hide',
                  title: 'For moving, blinking, scrolling, or auto-updating information, all of the following are true:',
                  level: 'A'
              },
              '2.2.3': {
                  handle: 'No Timing',
                  title: 'Timing is not an essential part of the event or activity presented by the content, except for non-interactive synchronized media and real-time events.',
                  level: 'AAA'
              },
              '2.2.4': {
                  handle: 'Interruptions',
                  title: 'Interruptions can be postponed or suppressed by the user, except interruptions involving an emergency.',
                  level: 'AAA'
              },
              '2.2.5': {
                  handle: 'Re-authenticating',
                  title: 'When an authenticated session expires, the user can continue the activity without loss of data after re-authenticating.',
                  level: 'AAA'
              }
          },
          2.3: {
              handle: 'Seizures',
              title: 'Do not design content in a way that is known to cause seizures.',
              '2.3.1': {
                  handle: 'Three Flashes or Below Threshold',
                  title: 'Web pages do not contain anything that flashes more than three times in any one second period, or the flash is below the general flash and red flash thresholds.',
                  level: 'A'
              },
              '2.3.2': {
                  handle: 'Three Flashes',
                  title: 'Web pages do not contain anything that flashes more than three times in any one second period.',
                  level: 'AAA'
              }
          },
          2.4: {
              handle: 'Navigable',
              title: 'Provide ways to help users navigate, find content, and determine where they are.',
              '2.4.1': {
                  handle: 'Bypass Blocks',
                  title: 'A mechanism is available to bypass blocks of content that are repeated on multiple Web pages.',
                  level: 'A'
              },
              '2.4.2': {
                  handle: 'Page Titled',
                  title: 'Web pages have titles that describe topic or purpose.',
                  level: 'A'
              },
              '2.4.3': {
                  handle: 'Focus Order',
                  title: 'If a Web page can be navigated sequentially and the navigation sequences affect meaning or operation, focusable components receive focus in an order that preserves meaning and operability.',
                  level: 'A'
              },
              '2.4.4': {
                  handle: 'Link Purpose (In Context)',
                  title: 'The purpose of each link can be determined from the link text alone or from the link text together with its programmatically determined link context, except where the purpose of the link would be ambiguous to users in general.',
                  level: 'A'
              },
              '2.4.5': {
                  handle: 'Multiple Ways',
                  title: 'More than one way is available to locate a Web page within a set of Web pages except where the Web Page is the result of, or a step in, a process.',
                  level: 'AA'
              },
              '2.4.6': {
                  handle: 'Headings and Labels',
                  title: 'Headings and labels describe topic or purpose.',
                  level: 'AA'
              },
              '2.4.7': {
                  handle: 'Focus Visible',
                  title: 'Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible.',
                  level: 'AA'
              },
              '2.4.8': {
                  handle: 'Location',
                  title: 'Information about the user\'s location within a set of Web pages is available.',
                  level: 'AAA'
              },
              '2.4.9': {
                  handle: 'Link Purpose (Link Only)',
                  title: 'A mechanism is available to allow the purpose of each link to be identified from link text alone, except where the purpose of the link would be ambiguous to users in general.',
                  level: 'AAA'
              },
              '2.4.10': {
                  handle: 'Section Headings',
                  title: 'Section headings are used to organize the content.',
                  level: 'AAA'
              }
          }
      },
      3: {
          handle: 'Understandable',
          title: 'Information and the operation of user interface must be understandable.',
          3.1: {
              handle: 'Readable',
              title: 'Make text content readable and understandable.',
              '3.1.1': {
                  handle: 'Language of Page',
                  title: 'The default human language of each Web page can be programmatically determined.',
                  level: 'A'
              },
              '3.1.2': {
                  handle: 'Language of Parts',
                  title: 'The human language of each passage or phrase in the content can be programmatically determined except for proper names, technical terms, words of indeterminate language, and words or phrases that have become part of the vernacular of the immediately surrounding text.',
                  level: 'AA'
              },
              '3.1.3': {
                  handle: 'Unusual Words',
                  title: 'A mechanism is available for identifying specific definitions of words or phrases used in an unusual or restricted way, including idioms and jargon.',
                  level: 'AAA'
              },
              '3.1.4': {
                  handle: 'Abbreviations',
                  title: 'A mechanism for identifying the expanded form or meaning of abbreviations is available.',
                  level: 'AAA'
              },
              '3.1.5': {
                  handle: 'Reading Level',
                  title: 'When text requires reading ability more advanced than the lower secondary education level after removal of proper names and titles, supplemental content, or a version that does not require reading ability more advanced than the lower secondary education level, is available.',
                  level: 'AAA'
              },
              '3.1.6': {
                  handle: 'Pronunciation',
                  title: 'A mechanism is available for identifying specific pronunciation of words where meaning of the words, in context, is ambiguous without knowing the pronunciation.',
                  level: 'AAA'
              }
          },
          3.2: {
              handle: 'Predictable',
              title: 'Make Web pages appear and operate in predictable ways.',
              '3.2.1': {
                  handle: 'On Focus',
                  title: 'When any component receives focus, it does not initiate a change of context.',
                  level: 'A'
              },
              '3.2.2': {
                  handle: 'On Input',
                  title: 'Changing the setting of any user interface component does not automatically cause a change of context unless the user has been advised of the behavior before using the component.',
                  level: 'A'
              },
              '3.2.3': {
                  handle: 'Consistent Navigation',
                  title: 'Navigational mechanisms that are repeated on multiple Web pages within a set of Web pages occur in the same relative order each time they are repeated, unless a change is initiated by the user.',
                  level: 'AA'
              },
              '3.2.4': {
                  handle: 'Consistent Identification',
                  title: 'Components that have the same functionality within a set of Web pages are identified consistently.',
                  level: 'AA'
              },
              '3.2.5': {
                  handle: 'Change on Request',
                  title: 'Changes of context are initiated only by user request or a mechanism is available to turn off such changes.',
                  level: 'AAA'
              }
          },
          3.3: {
              handle: 'Input Assistance',
              title: 'Help users avoid and correct mistakes.',
              '3.3.1': {
                  handle: 'Error Identification',
                  title: 'If an input error is automatically detected, the item that is in error is identified and the error is described to the user in text.',
                  level: 'A'
              },
              '3.3.2': {
                  handle: 'Labels or Instructions',
                  title: 'Labels or instructions are provided when content requires user input.',
                  level: 'A'
              },
              '3.3.3': {
                  handle: 'Error Suggestion',
                  title: 'If an input error is automatically detected and suggestions for correction are known, then the suggestions are provided to the user, unless it would jeopardize the security or purpose of the content.',
                  level: 'AA'
              },
              '3.3.4': {
                  handle: 'Error Prevention (Legal, Financial, Data)',
                  title: 'For Web pages that cause legal commitments or financial transactions for the user to occur, that modify or delete user-controllable data in data storage systems, or that submit user test responses, at least one of the following is true:',
                  level: 'AA'
              },
              '3.3.5': {
                  handle: 'Help',
                  title: 'Context-sensitive help is available.',
                  level: 'AAA'
              },
              '3.3.6': {
                  handle: 'Error Prevention (All)',
                  title: 'For Web pages that require the user to submit information, at least one of the following is true:',
                  level: 'AAA'
              }
          }
      },
      4: {
          handle: 'Robust',
          title: 'Content must be robust enough that it can be interpreted reliably by a wide variety of user agents, including assistive technologies.',
          4.1: {
              handle: 'Compatible',
              title: 'Maximize compatibility with current and future user agents, including assistive technologies.',
              '4.1.1': {
                  handle: 'Parsing',
                  title: 'In content implemented using markup languages, elements have complete start and end tags, elements are nested according to their specifications, elements do not contain duplicate attributes, and any IDs are unique, except where the specifications allow these features.',
                  level: 'A'
              },
              '4.1.2': {
                  handle: 'Name, Role, Value',
                  title: 'For all user interface components (including but not limited to: form elements, links and components generated by scripts), the name and role can be programmatically determined; states, properties, and values that can be set by the user can be programmatically set; and notification of changes to these items is available to user agents, including assistive technologies.',
                  level: 'A'
              }
          }
      }
  });
  class Wcag {
      static getSuccessCriteria(numId) {
          function _find(collection, key, value) {
              for (const o of collection) {
                  for (const [k, v] of Object.entries(o)) {
                      if (k === key && v === value) {
                          return o;
                      }
                      if (Array.isArray(v)) {
                          const _o = _find(v, key, value);
                          if (_o) {
                              return _o;
                          }
                      }
                  }
              }
          }
          return _find(wcag$1.principles, 'num', numId);
      }
      static getWcagTechniqueDetails(level, techniqueId) {
          const findByTechniqueId = (obj) => {
              let result = null;
              if (obj && typeof obj.id === 'string' && obj.id === techniqueId) {
                  return obj;
              }
              for (const property in obj) {
                  if (obj.hasOwnProperty(property) && typeof obj[property] === 'object' && obj[property] !== null) {
                      result = findByTechniqueId(obj[property]);
                      if (result) {
                          return result;
                      }
                  }
              }
              return result;
          };
          const successCriteria = Wcag.getSuccessCriteria(level);
          return findByTechniqueId(successCriteria);
      }
  }

  const wcag = {
      [$accessibilityAuditRules.accessible_svg]: {
          categories: [IssueCategory.images],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [{
                  content: 'Understanding Success Criterion 1.1.1: Non-text Content',
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/non-text-content.html'
              }],
          ruleId: $accessibilityAuditRules.accessible_svg,
          severity: $severity.high,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.1.1: Non-text Content',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/non-text-content.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.1.1')
              }
          ],
          techniques: [
              {
                  id: 'TECH:ARIA6',
                  link: 'https://www.w3.org/TR/WCAG20-TECHS/ARIA6.html',
                  standard: AuditStandards.wcag
              },
              {
                  id: 'TECH:ARIA10',
                  link: 'https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA10',
                  standard: AuditStandards.wcag
              }
          ],
          title: ''
      },
      [$accessibilityAuditRules.orientation]: {
          categories: [IssueCategory.adaptable],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [{
                  content: 'Understanding Success Criterion 1.3.4: Orientation',
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/orientation.html'
              }],
          ruleId: $accessibilityAuditRules.orientation,
          severity: $severity.info,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.3.4: Orientation',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/orientation.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.3.4')
              }
          ],
          techniques: [],
          title: ''
      },
      [$accessibilityAuditRules.css_images_convey_information]: {
          categories: [IssueCategory.images],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [{
                  content: 'Understanding Success Criterion 1.1.1: Non-text Content',
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/non-text-content.html'
              }],
          ruleId: $accessibilityAuditRules.css_images_convey_information,
          severity: $severity.info,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.1.1: Non-text Content',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/non-text-content.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.1.1')
              }
          ],
          techniques: [
              {
                  id: 'TECH:ARIA6',
                  link: 'https://www.w3.org/TR/WCAG20-TECHS/ARIA6.html',
                  standard: AuditStandards.wcag
              }
          ],
          title: ''
      },
      [$accessibilityAuditRules.missing_alt_attribute]: {
          categories: [IssueCategory.images],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [{
                  content: 'Understanding Success Criterion 1.1.1: Non-text Content',
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/non-text-content.html'
              }],
          ruleId: $accessibilityAuditRules.missing_alt_attribute,
          severity: $severity.high,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.1.1: Non-text Content',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/non-text-content.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.1.1')
              }
          ],
          techniques: [
              {
                  id: 'TECH:H36',
                  link: 'https://www.w3.org/WAI/WCAG21/Techniques/html/H36.html',
                  standard: AuditStandards.wcag
              }
          ],
          title: ''
      },
      [$accessibilityAuditRules.captcha_google]: {
          categories: [IssueCategory.captcha],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.captcha_google,
          severity: $severity.info,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.1.1: Non-text Content',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/non-text-content.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.1.1')
              }
          ],
          techniques: [
              {
                  id: 'TECH:G143',
                  link: 'https://www.w3.org/TR/WCAG20-TECHS/G143.html',
                  standard: AuditStandards.wcag
              }
          ],
          title: ''
      },
      [$accessibilityAuditRules.img_empty_alt_in_link]: {
          categories: [IssueCategory.images, IssueCategory.links],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.img_empty_alt_in_link,
          severity: $severity.critical,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.1.1: Non-text Content',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/non-text-content.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.1.1')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.area_missing_alt]: {
          categories: [IssueCategory.images],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.area_missing_alt,
          severity: $severity.high,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.1.1: Non-text Content',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/non-text-content.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.1.1')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.applet_missing_alt]: {
          categories: [IssueCategory.embedded_objects],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.applet_missing_alt,
          severity: $severity.high,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.1.1: Non-text Content',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/non-text-content.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.1.1')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.applet_missing_body]: {
          categories: [IssueCategory.embedded_objects],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.applet_missing_body,
          severity: $severity.high,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.1.1: Non-text Content',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/non-text-content.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.1.1')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.input_image_missing_alt]: {
          categories: [IssueCategory.images, IssueCategory.forms],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.input_image_missing_alt,
          severity: $severity.critical,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.1.1: Non-text Content',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/non-text-content.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.1.1')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.general_alt]: {
          categories: [IssueCategory.images],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.general_alt,
          severity: $severity.info,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.1.1: Non-text Content',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/non-text-content.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.1.1')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.object_general_alt]: {
          categories: [IssueCategory.embedded_objects],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.object_general_alt,
          severity: $severity.info,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.1.1: Non-text Content',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/non-text-content.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.1.1')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.object_missing_body]: {
          categories: [IssueCategory.embedded_objects],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.object_missing_body,
          severity: $severity.high,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.1.1: Non-text Content',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/non-text-content.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.1.1')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.identify_input_purpose]: {
          categories: [IssueCategory.images],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.identify_input_purpose,
          severity: $severity.high,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.1.1: Non-text Content',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/non-text-content.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.1.1')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.img_empty_alt_with_empty_title]: {
          categories: [IssueCategory.images],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.img_empty_alt_with_empty_title,
          severity: $severity.info,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.1.1: Non-text Content',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/non-text-content.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.1.1')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.audio_alternative]: {
          categories: [IssueCategory.audio],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.audio_alternative,
          severity: $severity.info,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.2.1: Audio-only and Video-only (Prerecorded)',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/audio-only-and-video-only-prerecorded.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.2.1')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.audio_video_captions]: {
          categories: [IssueCategory.audio],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.audio_video_captions,
          severity: $severity.high,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.2.1: Audio-only and Video-only (Prerecorded)',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/audio-only-and-video-only-prerecorded.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.2.1')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.video_audio_descriptions]: {
          categories: [IssueCategory.audio],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.video_audio_descriptions,
          severity: $severity.high,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.2.1: Audio-only and Video-only (Prerecorded)',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/audio-only-and-video-only-prerecorded.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.2.1')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.aria_describedby_association]: {
          categories: [IssueCategory.aria],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.aria_describedby_association,
          severity: $severity.high,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.3.1: Info and Relationships',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.3.1')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.headings_hierarchy]: {
          categories: [IssueCategory.headings],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.headings_hierarchy,
          severity: $severity.high,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.3.1: Info and Relationships',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.3.1')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.table_caption_summary_identical]: {
          categories: [IssueCategory.tables],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.table_caption_summary_identical,
          severity: $severity.low,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.3.1: Info and Relationships',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.3.1')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.table_missing_description]: {
          categories: [IssueCategory.tables],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.table_missing_description,
          severity: $severity.low,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.3.1: Info and Relationships',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.3.1')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.empty_label_element]: {
          categories: [IssueCategory.forms],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.empty_label_element,
          severity: $severity.high,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.3.1: Info and Relationships',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.3.1')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.incorrect_label_placement]: {
          categories: [IssueCategory.forms],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.incorrect_label_placement,
          severity: $severity.high,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.3.1: Info and Relationships',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.3.1')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.label_implicitly_associated]: {
          categories: [IssueCategory.forms],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.label_implicitly_associated,
          severity: $severity.low,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.3.1: Info and Relationships',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.3.1')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.label_inappropriate_association]: {
          categories: [IssueCategory.forms],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.label_inappropriate_association,
          severity: $severity.critical,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.3.1: Info and Relationships',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.3.1')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.table_row_and_column_headers]: {
          categories: [IssueCategory.tables],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.table_row_and_column_headers,
          severity: $severity.high,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.3.1: Info and Relationships',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.3.1')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.fieldset_no_legend]: {
          categories: [IssueCategory.forms],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.fieldset_no_legend,
          severity: $severity.low,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.3.1: Info and Relationships',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.3.1')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.group_elements_name_attribute]: {
          categories: [IssueCategory.forms],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.group_elements_name_attribute,
          severity: $severity.high,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.3.1: Info and Relationships',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.3.1')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.duplicated_for_attribute]: {
          categories: [IssueCategory.forms],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.duplicated_for_attribute,
          severity: $severity.critical,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.3.1: Info and Relationships',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.3.1')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.meaningful_content_sequence]: {
          categories: [IssueCategory.perceivable],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.meaningful_content_sequence,
          severity: $severity.info,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.3.2: Meaningful Sequence',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/meaningful-sequence.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.3.2')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.alt_color_convey_information]: {
          categories: [IssueCategory.images],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.alt_color_convey_information,
          severity: $severity.info,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.1.1: Non-text Content',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/non-text-content.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.1.1')
              },
              {
                  description: 'Understanding Success Criterion 1.4.1: Use of Color',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/use-of-color.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.4.1')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.text_color_convey_information]: {
          categories: [IssueCategory.uncategorized],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.text_color_convey_information,
          severity: $severity.info,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.1.1: Non-text Content',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/non-text-content.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.1.1')
              },
              {
                  description: 'Understanding Success Criterion 1.4.1: Use of Color',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/use-of-color.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.4.1')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.broken_same_page_link]: {
          categories: [IssueCategory.operable],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.broken_same_page_link,
          severity: $severity.high,
          standards: [
              {
                  description: 'Understanding Success Criterion 2.1.1: Keyboard',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/keyboard.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('2.1.1')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.color_contrast_aa]: {
          categories: [IssueCategory.perceivable],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [
              {
                  content: 'Understanding Success Criterion 1.4.3: Contrast (Minimum)',
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/contrast-minimum.html'
              }
          ],
          ruleId: $accessibilityAuditRules.color_contrast_aa,
          severity: $severity.critical,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.4.3: Contrast (Minimum)',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/contrast-minimum.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.4.3')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.color_contrast_state_pseudo_classes_active]: {
          categories: [IssueCategory.perceivable],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: false,
          resources: [
              {
                  content: 'Understanding Success Criterion 1.4.3: Contrast (Minimum)',
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/contrast-minimum.html'
              }
          ],
          ruleId: $accessibilityAuditRules.color_contrast_state_pseudo_classes_active,
          severity: $severity.low,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.4.3: Contrast (Minimum)',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/contrast-minimum.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.4.3')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.color_contrast_state_pseudo_classes_focus]: {
          categories: [IssueCategory.perceivable],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: false,
          resources: [
              {
                  content: 'Understanding Success Criterion 1.4.3: Contrast (Minimum)',
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/contrast-minimum.html'
              }
          ],
          ruleId: $accessibilityAuditRules.color_contrast_state_pseudo_classes_focus,
          severity: $severity.low,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.4.3: Contrast (Minimum)',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/contrast-minimum.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.4.3')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.color_contrast_state_pseudo_classes_hover]: {
          categories: [IssueCategory.perceivable],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: false,
          resources: [
              {
                  content: 'Understanding Success Criterion 1.4.3: Contrast (Minimum)',
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/contrast-minimum.html'
              }
          ],
          ruleId: $accessibilityAuditRules.color_contrast_state_pseudo_classes_hover,
          severity: $severity.low,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.4.3: Contrast (Minimum)',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/contrast-minimum.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.4.3')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.empty_button_description]: {
          categories: [IssueCategory.forms],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.empty_button_description,
          severity: $severity.high,
          standards: [
              {
                  description: '4.1.2 Name, Role, Value (Level A)',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/TR/WCAG21/#name-role-value',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('4.1.2')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.empty_link_element]: {
          categories: [IssueCategory.links],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.empty_link_element,
          severity: $severity.high,
          standards: [
              {
                  description: '2.4.4 Link Purpose (In Context) (Level A)',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#navigation-mechanisms-refs',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('2.4.6')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.headings_sibling_unique]: {
          categories: [IssueCategory.headings],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.headings_sibling_unique,
          severity: $severity.low,
          standards: [
              {
                  description: '2.4.6 Headings and Labels (Level AA, Primary Success Criterion)',
                  id: AuditStandards.wcag,
                  url: 'http://www.w3.org/TR/WCAG20/#navigation-mechanisms-descriptive',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('2.4.6')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.zoom_disabled]: {
          categories: [IssueCategory.perceivable],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.zoom_disabled,
          severity: $severity.critical,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.4.4: Resize text',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/resize-text.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.4.4')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.color_contrast_aaa]: {
          categories: [IssueCategory.perceivable],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.color_contrast_aaa,
          severity: $severity.critical,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.4.6: Contrast (Enhanced)',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/contrast-enhanced.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.4.6')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.link_button_space_key]: {
          categories: [IssueCategory.links],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.link_button_space_key,
          severity: $severity.info,
          standards: [
              {
                  description: 'Understanding Success Criterion 2.1.1: Keyboard',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/keyboard.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('2.1.1')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.no_meta_http_equiv_refresh]: {
          categories: [IssueCategory.operable],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.no_meta_http_equiv_refresh,
          severity: $severity.critical,
          standards: [
              {
                  description: 'Understanding Success Criterion 2.2.1: Timing Adjustable',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/timing-adjustable.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('2.2.1')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.autoplay_audio_video]: {
          categories: [IssueCategory.audio, IssueCategory.videos],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.autoplay_audio_video,
          severity: $severity.critical,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.4.2: Audio Control',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/audio-control.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.4.2')
              },
              {
                  description: 'Understanding Success Criterion 2.2.2: Pause, Stop, Hide',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/pause-stop-hide.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('2.2.2')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.animation]: {
          categories: [IssueCategory.operable],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.animation,
          severity: $severity.high,
          standards: [
              {
                  description: 'Understanding Success Criterion 2.2.2: Pause, Stop, Hide',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/pause-stop-hide.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('2.2.2')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.blink_element]: {
          categories: [IssueCategory.operable],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.blink_element,
          severity: $severity.info,
          standards: [
              {
                  description: 'Understanding Success Criterion 2.2.2: Pause, Stop, Hide',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/pause-stop-hide.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('2.2.2')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.flickering]: {
          categories: [IssueCategory.operable],
          description: 'Check that the page do not contain anything that flashes more than three times in any one second period, or the flash is below the general flash and red flash thresholds.',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.flickering,
          severity: $severity.info,
          standards: [
              {
                  description: 'Understanding Success Criterion 2.3.1: Three Flashes or Below Threshold',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/three-flashes-or-below-threshold.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('2.3.1')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.page_title]: {
          categories: [IssueCategory.operable],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.page_title,
          severity: $severity.high,
          standards: [
              {
                  description: 'Understanding Success Criterion 2.4.2: Page Titled',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/page-titled.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('2.4.2')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.misused_tabindex_attribute]: {
          categories: [IssueCategory.operable],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.misused_tabindex_attribute,
          severity: $severity.info,
          standards: [
              {
                  description: 'Understanding Success Criterion 2.4.3: Focus Order',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/focus-order.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('2.4.3')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.positive_tabindex]: {
          categories: [IssueCategory.operable],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.positive_tabindex,
          severity: $severity.high,
          standards: [
              {
                  description: 'Understanding Success Criterion 2.4.3: Focus Order',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/focus-order.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('2.4.3')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.aria_labelledby_association]: {
          categories: [IssueCategory.aria],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.aria_labelledby_association,
          severity: $severity.critical,
          standards: [
              {
                  description: 'Understanding Success Criterion 2.4.4: Link Purpose (In Context)',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/link-purpose-in-context.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('2.4.4')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.click_verb]: {
          categories: [IssueCategory.operable],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.click_verb,
          severity: $severity.low,
          standards: [
              {
                  description: 'Understanding Success Criterion 2.4.4: Link Purpose (In Context)',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/link-purpose-in-context.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('2.4.4')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.empty_heading]: {
          categories: [IssueCategory.headings],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.empty_heading,
          severity: $severity.high,
          standards: [
              {
                  description: 'Understanding Success Criterion 2.4.6: Headings and Labels',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/headings-and-labels.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('2.4.6')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.no_headings]: {
          categories: [IssueCategory.headings],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.no_headings,
          severity: $severity.info,
          standards: [
              {
                  description: 'Understanding Success Criterion 2.4.10: Section Headings',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/section-headings.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('2.4.10')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.html_lang_attr]: {
          categories: [IssueCategory.understandable],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.html_lang_attr,
          severity: $severity.high,
          standards: [
              {
                  description: 'Understanding Success Criterion 3.1.1: Language of Page',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/language-of-page.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('3.1.1')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.title_for_abbr]: {
          categories: [IssueCategory.understandable],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.title_for_abbr,
          severity: $severity.low,
          standards: [
              {
                  description: 'Understanding Success Criterion 3.1.4: Abbreviations',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/abbreviations.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('3.1.4')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.missing_submit_button]: {
          categories: [IssueCategory.forms],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.missing_submit_button,
          severity: $severity.low,
          standards: [
              {
                  description: 'Understanding Success Criterion 3.2.2: On Input',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/on-input.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('3.2.2')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.links_new_window_mark]: {
          categories: [IssueCategory.links],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.links_new_window_mark,
          severity: $severity.high,
          standards: [
              {
                  description: 'Understanding Success Criterion 3.2.5: Change on Request',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/change-on-request.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('3.2.5')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.label_visually_hidden_only]: {
          categories: [IssueCategory.forms],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.label_visually_hidden_only,
          severity: $severity.info,
          standards: [
              {
                  description: 'Understanding Success Criterion 3.3.2: Labels or Instructions',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/labels-or-instructions.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('3.3.2')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.missing_label]: {
          categories: [IssueCategory.forms],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.missing_label,
          severity: $severity.high,
          standards: [
              {
                  description: 'Understanding Success Criterion 3.3.2: Labels or Instructions',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/labels-or-instructions.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('3.3.2')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.motion_actuation]: {
          categories: [IssueCategory.operable],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.motion_actuation,
          severity: $severity.info,
          standards: [
              {
                  description: 'Understanding Success Criterion 2.5.4: Motion Actuation',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/motion-actuation.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('2.5.4')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.legend_first_child_of_fieldset]: {
          categories: [IssueCategory.forms],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.legend_first_child_of_fieldset,
          severity: $severity.low,
          standards: [
              {
                  description: 'Understanding Success Criterion 3.3.2: Labels or Instructions',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/labels-or-instructions.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('3.3.2')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.duplicated_id_attribute]: {
          categories: [IssueCategory.robust],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.duplicated_id_attribute,
          severity: $severity.high,
          standards: [
              {
                  description: 'Understanding Success Criterion 4.1.1: Parsing',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/parsing.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('4.1.1')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.title_iframe]: {
          categories: [IssueCategory.embedded_objects],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.title_iframe,
          severity: $severity.high,
          standards: [
              {
                  description: 'Understanding Success Criterion 4.1.2: Name, Role, Value',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/name-role-value.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('4.1.2')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.select_initial_option]: {
          categories: [IssueCategory.forms],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.select_initial_option,
          severity: $severity.low,
          standards: [
              {
                  description: 'Understanding Success Criterion 4.1.2: Name, Role, Value',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/name-role-value.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('4.1.2')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.img_adjacent_duplicate_text_link]: {
          categories: [IssueCategory.uncategorized],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.img_adjacent_duplicate_text_link,
          severity: $severity.low,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.1.1: Non-text Content',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/non-text-content.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.1.1')
              },
              {
                  description: 'Understanding Success Criterion 2.4.4: Link Purpose (In Context)',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/link-purpose-in-context.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('2.4.4')
              },
              {
                  description: 'Understanding Success Criterion 2.4.9: Link Purpose (Link Only)',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/link-purpose-link-only.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('2.4.9')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.alt_text_include_filename]: {
          categories: [IssueCategory.images],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.alt_text_include_filename,
          severity: $severity.high,
          standards: [
              {
                  description: 'F30: Failure of Success Criterion 1.1.1 and 1.2.1 due to using text alternatives that are not alternatives (e.g., filenames or placeholder text)',
                  id: AuditStandards.wcag,
                  url: 'http://www.w3.org/TR/WCAG20-TECHS/F30',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.1.1')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.links_not_visually_evident_without_color_vision]: {
          categories: [IssueCategory.links],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.links_not_visually_evident_without_color_vision,
          severity: $severity.high,
          standards: [
              {
                  description: 'Failure of Success Criterion 1.4.1 due to creating links that are not visually evident without color vision',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Techniques/failures/F73',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.4.1')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.img_alt_duplicate_text_link]: {
          categories: [IssueCategory.uncategorized],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.img_alt_duplicate_text_link,
          severity: $severity.low,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.1.1: Non-text Content',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/non-text-content.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.1.1')
              },
              {
                  description: 'Understanding Success Criterion 2.4.4: Link Purpose (In Context)',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/link-purpose-in-context.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('2.4.4')
              },
              {
                  description: 'Understanding Success Criterion 2.4.9: Link Purpose (Link Only)',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/link-purpose-link-only.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('2.4.9')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.position_sticky]: {
          categories: [IssueCategory.perceivable],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.position_sticky,
          severity: $severity.low,
          standards: [
              {
                  description: 'Success Criterion 1.4.8 Visual Presentation',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-visual-presentation.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.4.10')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      },
      [$accessibilityAuditRules.reflow]: {
          categories: [IssueCategory.distinguishable],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.reflow,
          severity: $severity.info,
          standards: [
              {
                  description: 'Understanding Success Criterion 1.4.10: Reflow',
                  id: AuditStandards.wcag,
                  url: 'https://www.w3.org/WAI/WCAG21/Understanding/reflow.html',
                  [AuditStandards.wcag]: Wcag.getSuccessCriteria('1.4.10')
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.wcag
              }],
          title: ''
      }
  };

  const bestPractice = {
      [$accessibilityAuditRules.aria_role_dialog]: {
          categories: [IssueCategory.aria],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.aria_role_dialog,
          severity: $severity.high,
          standards: [
              {
                  description: '',
                  id: AuditStandards.essential,
                  url: '',
                  [AuditStandards.essential]: {
                      version: EssentialVersion.v10
                  }
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.essential
              }],
          title: ''
      },
      [$accessibilityAuditRules.aria_hidden_false]: {
          categories: [IssueCategory.aria],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.aria_hidden_false,
          severity: $severity.low,
          standards: [
              {
                  description: '',
                  id: AuditStandards.essential,
                  url: '',
                  [AuditStandards.essential]: {
                      version: EssentialVersion.v10
                  }
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.essential
              }],
          title: ''
      },
      [$accessibilityAuditRules.aria_hidden_false]: {
          categories: [IssueCategory.aria],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.aria_hidden_false,
          severity: $severity.low,
          standards: [
              {
                  description: '',
                  id: AuditStandards.essential,
                  url: '',
                  [AuditStandards.essential]: {
                      version: EssentialVersion.v10
                  }
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.essential
              }],
          title: ''
      },
      [$accessibilityAuditRules.capital_letters_words]: {
          categories: [IssueCategory.uncategorized],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.capital_letters_words,
          severity: $severity.high,
          standards: [
              {
                  description: '',
                  id: AuditStandards.essential,
                  url: '',
                  [AuditStandards.essential]: {
                      version: EssentialVersion.v10
                  }
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.essential
              }],
          title: ''
      },
      [$accessibilityAuditRules.content_editable_missing_attributes]: {
          categories: [IssueCategory.aria],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.content_editable_missing_attributes,
          severity: $severity.low,
          standards: [
              {
                  description: '',
                  id: AuditStandards.essential,
                  url: '',
                  [AuditStandards.essential]: {
                      version: EssentialVersion.v10
                  }
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.essential
              }],
          title: ''
      },
      [$accessibilityAuditRules.contentinfo_landmark_only_one]: {
          categories: [IssueCategory.aria],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.contentinfo_landmark_only_one,
          severity: $severity.low,
          standards: [
              {
                  description: '',
                  id: AuditStandards.essential,
                  url: '',
                  [AuditStandards.essential]: {
                      version: EssentialVersion.v10
                  }
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.essential
              }],
          title: ''
      },
      [$accessibilityAuditRules.elements_not_allowed_in_head]: {
          categories: [IssueCategory.uncategorized],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.elements_not_allowed_in_head,
          severity: $severity.low,
          standards: [
              {
                  description: '',
                  id: AuditStandards.essential,
                  url: '',
                  [AuditStandards.essential]: {
                      version: EssentialVersion.v10
                  }
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.essential
              }],
          title: ''
      },
      [$accessibilityAuditRules.empty_title_attribute]: {
          categories: [IssueCategory.uncategorized],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.empty_title_attribute,
          severity: $severity.low,
          standards: [
              {
                  description: '',
                  id: AuditStandards.essential,
                  url: '',
                  [AuditStandards.essential]: {
                      version: EssentialVersion.v10
                  }
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.essential
              }],
          title: ''
      },
      [$accessibilityAuditRules.flash_content]: {
          categories: [IssueCategory.embedded_objects],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.flash_content,
          severity: $severity.critical,
          standards: [
              {
                  description: '',
                  id: AuditStandards.essential,
                  url: '',
                  [AuditStandards.essential]: {
                      version: EssentialVersion.v10
                  }
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.essential
              }],
          title: ''
      },
      [$accessibilityAuditRules.font_style_italic]: {
          categories: [IssueCategory.uncategorized],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.font_style_italic,
          severity: $severity.info,
          standards: [
              {
                  description: '',
                  id: AuditStandards.essential,
                  url: '',
                  [AuditStandards.essential]: {
                      version: EssentialVersion.v10
                  }
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.essential
              }],
          title: ''
      },
      [$accessibilityAuditRules.h1_must_be]: {
          categories: [IssueCategory.headings],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.h1_must_be,
          severity: $severity.critical,
          standards: [
              {
                  description: '',
                  id: AuditStandards.essential,
                  url: '',
                  [AuditStandards.essential]: {
                      version: EssentialVersion.v10
                  }
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.essential
              }],
          title: ''
      },
      [$accessibilityAuditRules.h1_only_one]: {
          categories: [IssueCategory.headings],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.h1_only_one,
          severity: $severity.critical,
          standards: [
              {
                  description: '',
                  id: AuditStandards.essential,
                  url: '',
                  [AuditStandards.essential]: {
                      version: EssentialVersion.v10
                  }
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.essential
              }],
          title: ''
      },
      [$accessibilityAuditRules.hidden_content]: {
          categories: [IssueCategory.uncategorized],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.hidden_content,
          severity: $severity.info,
          standards: [
              {
                  description: '',
                  id: AuditStandards.essential,
                  url: '',
                  [AuditStandards.essential]: {
                      version: EssentialVersion.v10
                  }
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.essential
              }],
          title: ''
      },
      [$accessibilityAuditRules.horizontal_rule]: {
          categories: [IssueCategory.uncategorized],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.horizontal_rule,
          severity: $severity.info,
          standards: [
              {
                  description: '',
                  id: AuditStandards.essential,
                  url: '',
                  [AuditStandards.essential]: {
                      version: EssentialVersion.v10
                  }
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.essential
              }],
          title: ''
      },
      [$accessibilityAuditRules.incorrect_technique_for_hiding_content]: {
          categories: [IssueCategory.uncategorized],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.incorrect_technique_for_hiding_content,
          severity: $severity.high,
          standards: [
              {
                  description: '',
                  id: AuditStandards.essential,
                  url: '',
                  [AuditStandards.essential]: {
                      version: EssentialVersion.v10
                  }
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.essential
              }],
          title: ''
      },
      [$accessibilityAuditRules.invalid_attribute_dir_value]: {
          categories: [IssueCategory.uncategorized],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.invalid_attribute_dir_value,
          severity: $severity.critical,
          standards: [
              {
                  description: '',
                  id: AuditStandards.essential,
                  url: '',
                  [AuditStandards.essential]: {
                      version: EssentialVersion.v10
                  }
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.essential
              }],
          title: ''
      },
      [$accessibilityAuditRules.label_duplicated_content_title]: {
          categories: [IssueCategory.forms],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.label_duplicated_content_title,
          severity: $severity.high,
          standards: [
              {
                  description: '',
                  id: AuditStandards.essential,
                  url: '',
                  [AuditStandards.essential]: {
                      version: EssentialVersion.v10
                  }
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.essential
              }],
          title: ''
      },
      [$accessibilityAuditRules.link_with_unclear_purpose]: {
          categories: [IssueCategory.links],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.link_with_unclear_purpose,
          severity: $severity.high,
          standards: [
              {
                  description: '',
                  id: AuditStandards.essential,
                  url: '',
                  [AuditStandards.essential]: {
                      version: EssentialVersion.v10
                  }
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.essential
              }],
          title: ''
      },
      [$accessibilityAuditRules.links_language_destination]: {
          categories: [IssueCategory.links],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.links_language_destination,
          severity: $severity.info,
          standards: [
              {
                  description: '',
                  id: AuditStandards.essential,
                  url: '',
                  [AuditStandards.essential]: {
                      version: EssentialVersion.v10
                  }
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.essential
              }],
          title: ''
      },
      [$accessibilityAuditRules.links_same_content_different_url]: {
          categories: [IssueCategory.links],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.links_same_content_different_url,
          severity: $severity.info,
          standards: [
              {
                  description: '',
                  id: AuditStandards.essential,
                  url: '',
                  [AuditStandards.essential]: {
                      version: EssentialVersion.v10
                  }
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.essential
              }],
          title: ''
      },
      [$accessibilityAuditRules.main_element_only_one]: {
          categories: [IssueCategory.uncategorized],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.main_element_only_one,
          severity: $severity.high,
          standards: [
              {
                  description: '',
                  id: AuditStandards.essential,
                  url: '',
                  [AuditStandards.essential]: {
                      version: EssentialVersion.v10
                  }
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.essential
              }],
          title: ''
      },
      [$accessibilityAuditRules.main_landmark_must_be_top_level]: {
          categories: [IssueCategory.uncategorized],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.main_landmark_must_be_top_level,
          severity: $severity.high,
          standards: [
              {
                  description: '',
                  id: AuditStandards.essential,
                  url: '',
                  [AuditStandards.essential]: {
                      version: EssentialVersion.v10
                  }
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.essential
              }],
          title: ''
      },
      [$accessibilityAuditRules.minimum_font_size]: {
          categories: [IssueCategory.uncategorized],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.minimum_font_size,
          severity: $severity.info,
          standards: [
              {
                  description: '',
                  id: AuditStandards.essential,
                  url: '',
                  [AuditStandards.essential]: {
                      version: EssentialVersion.v10
                  }
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.essential
              }],
          title: ''
      },
      [$accessibilityAuditRules.missing_href_on_a]: {
          categories: [IssueCategory.links],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.missing_href_on_a,
          severity: $severity.critical,
          standards: [
              {
                  description: '',
                  id: AuditStandards.essential,
                  url: '',
                  [AuditStandards.essential]: {
                      version: EssentialVersion.v10
                  }
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.essential
              }],
          title: ''
      },
      [$accessibilityAuditRules.misused_aria_on_focusable_element]: {
          categories: [IssueCategory.aria],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.misused_aria_on_focusable_element,
          severity: $severity.high,
          standards: [
              {
                  description: '',
                  id: AuditStandards.essential,
                  url: '',
                  [AuditStandards.essential]: {
                      version: EssentialVersion.v10
                  }
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.essential
              }],
          title: ''
      },
      [$accessibilityAuditRules.misused_input_attribute]: {
          categories: [IssueCategory.forms],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.misused_input_attribute,
          severity: $severity.high,
          standards: [
              {
                  description: '',
                  id: AuditStandards.essential,
                  url: '',
                  [AuditStandards.essential]: {
                      version: EssentialVersion.v10
                  }
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.essential
              }],
          title: ''
      },
      [$accessibilityAuditRules.misused_required_attribute]: {
          categories: [IssueCategory.forms],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.misused_required_attribute,
          severity: $severity.high,
          standards: [
              {
                  description: '',
                  id: AuditStandards.essential,
                  url: '',
                  [AuditStandards.essential]: {
                      version: EssentialVersion.v10
                  }
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.essential
              }],
          title: ''
      },
      [$accessibilityAuditRules.navigation_landmark_restrictions]: {
          categories: [IssueCategory.uncategorized],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.navigation_landmark_restrictions,
          severity: $severity.high,
          standards: [
              {
                  description: '',
                  id: AuditStandards.essential,
                  url: '',
                  [AuditStandards.essential]: {
                      version: EssentialVersion.v10
                  }
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.essential
              }],
          title: ''
      },
      [$accessibilityAuditRules.obsolete_html_attributes]: {
          categories: [IssueCategory.uncategorized],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.obsolete_html_attributes,
          severity: $severity.high,
          standards: [
              {
                  description: '',
                  id: AuditStandards.essential,
                  url: '',
                  [AuditStandards.essential]: {
                      version: EssentialVersion.v10
                  }
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.essential
              }],
          title: ''
      },
      [$accessibilityAuditRules.obsolete_html_elements]: {
          categories: [IssueCategory.uncategorized],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.obsolete_html_elements,
          severity: $severity.high,
          standards: [
              {
                  description: '',
                  id: AuditStandards.essential,
                  url: '',
                  [AuditStandards.essential]: {
                      version: EssentialVersion.v10
                  }
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.essential
              }],
          title: ''
      },
      [$accessibilityAuditRules.outline_zero]: {
          categories: [IssueCategory.uncategorized],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.outline_zero,
          severity: $severity.high,
          standards: [
              {
                  description: '',
                  id: AuditStandards.essential,
                  url: '',
                  [AuditStandards.essential]: {
                      version: EssentialVersion.v10
                  }
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.essential
              }],
          title: ''
      },
      [$accessibilityAuditRules.overlay]: {
          categories: [IssueCategory.robust],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.overlay,
          severity: $severity.high,
          standards: [
              {
                  description: '',
                  id: AuditStandards.essential,
                  url: '',
                  [AuditStandards.essential]: {
                      version: EssentialVersion.v10
                  }
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.essential
              }],
          title: ''
      },
      [$accessibilityAuditRules.role_application]: {
          categories: [IssueCategory.aria],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.role_application,
          severity: $severity.critical,
          standards: [
              {
                  description: '',
                  id: AuditStandards.essential,
                  url: '',
                  [AuditStandards.essential]: {
                      version: EssentialVersion.v10
                  }
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.essential
              }],
          title: ''
      },
      [$accessibilityAuditRules.rtl_content]: {
          categories: [IssueCategory.uncategorized],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.rtl_content,
          severity: $severity.info,
          standards: [
              {
                  description: '',
                  id: AuditStandards.essential,
                  url: '',
                  [AuditStandards.essential]: {
                      version: EssentialVersion.v10
                  }
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.essential
              }],
          title: ''
      },
      [$accessibilityAuditRules.unclear_anchor_uri]: {
          categories: [IssueCategory.links],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.unclear_anchor_uri,
          severity: $severity.high,
          standards: [
              {
                  description: '',
                  id: AuditStandards.essential,
                  url: '',
                  [AuditStandards.essential]: {
                      version: EssentialVersion.v10
                  }
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.essential
              }],
          title: ''
      },
      [$accessibilityAuditRules.unsupported_aria_on_element]: {
          categories: [IssueCategory.aria],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.unsupported_aria_on_element,
          severity: $severity.low,
          standards: [
              {
                  description: '',
                  id: AuditStandards.essential,
                  url: '',
                  [AuditStandards.essential]: {
                      version: EssentialVersion.v10
                  }
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.essential
              }],
          title: ''
      },
      [$accessibilityAuditRules.unsupported_role_on_element]: {
          categories: [IssueCategory.aria],
          description: '',
          isMarkedAsFalsePositive: false,
          isSelectedForScanning: true,
          resources: [],
          ruleId: $accessibilityAuditRules.unsupported_role_on_element,
          severity: $severity.high,
          standards: [
              {
                  description: '',
                  id: AuditStandards.essential,
                  url: '',
                  [AuditStandards.essential]: {
                      version: EssentialVersion.v10
                  }
              }
          ],
          techniques: [{
                  id: '', link: '', standard: AuditStandards.essential
              }],
          title: ''
      }
  };

  class Validator {
      static getEmptyReportIssuesSummary() {
          return {
              error: 0,
              passed: 0,
              skipped: 0,
              warning: 0
          };
      }
      static resetUniqueProblemIdCounter() {
          Validator.uniqueProblemId = 0;
      }
      static getUniqueProblemId(increment = true) {
          const id = Validator.uniqueProblemId;
          if (increment) {
              Validator.uniqueProblemId += 1;
          }
          return id;
      }
      static endOfTesting() {
          if (Validator.config.get($runnerSettings.reportFormat) === null || Validator.contextElement === null) {
              return;
          }
          const reportsToSend = Object.values(Validator.getReports());
          const documentHtmlInfo = DomUtility.getHtmlInfo(document);
          const contextHtmlInfo = DomUtility.getHtmlInfo(Validator.contextElement);
          const summary = this.getSummary(reportsToSend);
          const rules = this.getRulesReports(reportsToSend);
          const report = {
              context: DomUtility.getXPath(Validator.contextElement),
              contextHtmlSize: parseFloat((contextHtmlInfo.htmlSize / 1024).toFixed(2)),
              createdAt: new Date().toISOString(),
              documentHtmlSize: parseFloat((documentHtmlInfo.htmlSize / 1024).toFixed(2)),
              pageTitle: '(no page title defined)',
              rules: rules,
              score: ReportUtility.getScore(summary.byIssueType),
              summary: summary,
              totalElementsOnContext: contextHtmlInfo.nodesNum,
              totalElementsOnDocument: documentHtmlInfo.nodesNum
          };
          if (typeof document.title === 'string') {
              report.pageTitle = document.title;
          }
          else {
              const titleElement = document.querySelector('title');
              if (titleElement && typeof titleElement.textContent === 'string') {
                  report.pageTitle = titleElement.textContent;
              }
          }
          Bus.publish(busEvent.onBusyIndicatorOff);
          const error = null;
          Bus.publish(busEvent.onValidatorComplete, error, report);
      }
      static getRulesReports(reportsToSend) {
          const accessibilityStandards = this.getAccessibilityStandards();
          const allReports = {};
          const fillAllRules = (ruleId) => {
              const ruleKey = TextUtility.convertDashesToUnderscores(ruleId);
              const auditRule = accessibilityStandards[ruleKey];
              const ruleOptions = Validator.config.get($runnerSettings.rules)[ruleId];
              if (ruleOptions.isSelectedForScanning === false) {
                  return;
              }
              const report = {
                  categories: typeof auditRule !== 'undefined' && Array.isArray(auditRule.categories) ? auditRule.categories : [],
                  issueType: ReportUtility.getRuleIssueTypeBySeverity(Validator.rules[ruleId].ruleConfig.severity),
                  recommendations: Validator.rules[ruleId].ruleConfig.recommendations,
                  resources: Validator.rules[ruleId].ruleConfig.links,
                  results: [],
                  severity: Validator.rules[ruleId].ruleConfig.severity,
                  status: {
                      reason: null,
                      type: IAslintRuleReportStatusType.passed
                  },
                  totalElementsEvaluated: Validator.rules[ruleId].totalElementsEvaluated
              };
              allReports[ruleKey] = report;
          };
          const reportRules = (reportIssue) => {
              const ruleId = reportIssue.ruleConfig.id;
              const ruleKey = TextUtility.convertDashesToUnderscores(ruleId);
              if (typeof allReports[ruleKey] === 'undefined') {
                  return;
              }
              const ruleConfig = Validator.config.get($runnerSettings.rules)[ruleId] || {};
              let skipReason;
              if (ruleConfig.isSelectedForScanning === false) {
                  skipReason = $auditRuleSkipReason.notSelectedForScanning;
              }
              if (ruleConfig.isMarkedAsFalsePositive === true) {
                  skipReason = $auditRuleSkipReason.markedAsFalsePositive;
              }
              if (typeof skipReason !== 'undefined') {
                  allReports[ruleKey].status = {
                      reason: skipReason,
                      type: IAslintRuleReportStatusType.skip
                  };
              }
              if (allReports[ruleKey].status.type !== IAslintRuleReportStatusType.skip) {
                  allReports[ruleKey].status.type = IAslintRuleReportStatusType.error;
                  const reportResult = {
                      data: typeof reportIssue.contrastData === 'undefined' ? null : reportIssue.contrastData,
                      element: {
                          html: reportIssue.node !== null ? DomUtility.getEscapedOuterTruncatedHTML(reportIssue.node) : '',
                          reference: Validator.config.get($runnerSettings.includeElementReference) ? reportIssue.node : null,
                          xpath: reportIssue.node !== null ? DomUtility.getXPath(reportIssue.node) : ''
                      },
                      message: {
                          actual: {
                              description: reportIssue.message
                          },
                          expected: {
                              description: ''
                          }
                      },
                      skipReason: typeof reportIssue.skipReason === 'undefined' ? null : reportIssue.skipReason
                  };
                  if (ObjectUtility.getTypeOf(reportIssue.contrastData) === 'object') {
                      reportResult.data = reportIssue.contrastData;
                  }
                  allReports[ruleKey].results.push(reportResult);
              }
          };
          Object.keys(Validator.rules).forEach(fillAllRules);
          reportsToSend.forEach(reportRules);
          return allReports;
      }
      static getSummary(reportsToSend) {
          const accessibilityStandards = this.getAccessibilityStandards();
          const byIssueType = (accum, value) => {
              accum[ReportUtility.getRuleIssueTypeBySeverity(value.ruleConfig.severity)] += 1;
              return accum;
          };
          const byRule = (accum, value) => {
              const ruleKey = TextUtility.convertDashesToUnderscores(value.ruleConfig.id);
              if (typeof accum[ruleKey] === 'undefined') {
                  accum[ruleKey] = Validator.getEmptyReportIssuesSummary();
              }
              const ruleIssueType = ReportUtility.getRuleIssueTypeBySeverity(value.ruleConfig.severity);
              const reportIssuesSummary = accum[ruleKey];
              reportIssuesSummary[ruleIssueType] += 1;
              return accum;
          };
          const byCategory = (accum, value) => {
              const ruleKey = value.ruleConfig.id.replace(/-/g, '_');
              const auditRule = accessibilityStandards[ruleKey];
              if (typeof auditRule !== 'undefined' && Array.isArray(auditRule.categories)) {
                  auditRule.categories.forEach((category) => {
                      if (typeof accum[category] === 'undefined') {
                          accum[category] = Validator.getEmptyReportIssuesSummary();
                      }
                      const ruleIssueType = ReportUtility.getRuleIssueTypeBySeverity(value.ruleConfig.severity);
                      accum[category][ruleIssueType] += 1;
                  });
              }
              return accum;
          };
          const bySuccessCriteria = (accum, value) => {
              const ruleKey = TextUtility.convertDashesToUnderscores(value.ruleConfig.id);
              const auditRule = accessibilityStandards[ruleKey];
              if (typeof auditRule !== 'undefined' && Array.isArray(auditRule.standards)) {
                  const buildReportBySuccessCriteria = (wcagType) => {
                      if (typeof accum[wcagType] === 'undefined') {
                          accum[wcagType] = Validator.getEmptyReportIssuesSummary();
                      }
                      const ruleIssueType = ReportUtility.getRuleIssueTypeBySeverity(value.ruleConfig.severity);
                      accum[wcagType][ruleIssueType] += 1;
                  };
                  auditRule.standards
                      .filter((standard) => {
                      return standard.id === AuditStandards.wcag;
                  })
                      .map((standard) => {
                      return standard[AuditStandards.wcag].num;
                  })
                      .forEach(buildReportBySuccessCriteria);
              }
              return accum;
          };
          const issueCount = reportsToSend.reduce(byIssueType, Validator.getEmptyReportIssuesSummary());
          return {
              byCategory: reportsToSend.reduce(byCategory, {}),
              byIssueType: issueCount,
              byStandardRule: reportsToSend.reduce(byRule, {}),
              byWcagSuccessCriteria: reportsToSend.reduce(bySuccessCriteria, {})
          };
      }
      static getAccessibilityStandards() {
          return Object.assign(Object.assign({}, wcag), bestPractice);
      }
      static getReports() {
          return Validator.reports;
      }
      static getReport(id) {
          return Validator.reports[id];
      }
      static createReportMessage(messages) {
          if (messages.length < 2) {
              return messages.join('');
          }
          return messages.map((message, index) => {
              return `${index + 1}. ${message}`;
          }).join(' ');
      }
      static reset(purgeRules = false) {
          if (purgeRules) {
              Validator.rules = {};
          }
          else {
              const resetResults = (rule) => {
                  Validator.rules[rule].results.length = 0;
              };
              Object.keys(Validator.rules).forEach(resetResults);
          }
          Validator.resetUniqueProblemIdCounter();
          ObjectUtility.deleteProperties(Validator.reports);
          Bus.publish(busEvent.onValidatorReset);
      }
      static async runTestsAsynchronously(context) {
          const runAsyncSingleRule = (ruleId) => {
              const wrapperAsyncSingleRule = async () => {
                  const ruleConfig = Validator.config.get($runnerSettings.rules)[ruleId];
                  if (ruleConfig.isSelectedForScanning === false) {
                      return;
                  }
                  const performanceStart = performance.now();
                  await Validator.rules[ruleId]
                      .ruleTest(context, Validator, ruleConfig)
                      .finally(() => {
                      console.log(`${ruleId} %c${Time.format(performance.now() - performanceStart)}`, 'color: white; background: blueviolet;');
                  });
              };
              const asyncRunnerExecutor = (resolve, reject) => {
                  const executeRule = async () => {
                      try {
                          resolve(await wrapperAsyncSingleRule());
                      }
                      catch (e) {
                          reject(e);
                      }
                  };
                  if (typeof Global.context.requestIdleCallback === 'function') {
                      window.requestIdleCallback(executeRule);
                      return;
                  }
                  Async.run(executeRule, this, Validator.TIMEOUT);
              };
              return new Promise(asyncRunnerExecutor);
          };
          const evaluationPerformanceStart = performance.now();
          const allPromises = [];
          for (const rule of Object.keys(Validator.rules).sort()) {
              allPromises.push(runAsyncSingleRule(rule));
          }
          try {
              await Promise.all(allPromises);
          }
          catch (e) {
              console.error(`[Validator.runTestsAsynchronously] ${e}`);
          }
          console.log(`\nCompleted in %c${Time.format(performance.now() - evaluationPerformanceStart)}`, 'color: white; background: blueviolet;');
          Validator.endOfTesting();
      }
      static async runTestsSynchronously(context) {
          const evaluationPerformanceStart = performance.now();
          const runSyncSingleRule = async (ruleId) => {
              const ruleConfig = Validator.config.get($runnerSettings.rules)[ruleId];
              if (ruleConfig.isSelectedForScanning === false) {
                  return;
              }
              const performanceStart = performance.now();
              await Validator.rules[ruleId].ruleTest(context, Validator, ruleConfig);
              console.log(`${ruleId} %c${Time.format(performance.now() - performanceStart)}`, 'color: white; background: blueviolet;');
          };
          const ruleKeys = Object.keys(Validator.rules).sort();
          for (let i = 0, len = ruleKeys.length; i < len; i += 1) {
              try {
                  await runSyncSingleRule(ruleKeys[i]);
              }
              catch (e) {
                  console.error('[ASLint] There were errors while executing the rules\n', e);
              }
          }
          console.log(`\nCompleted in %c${Time.format(performance.now() - evaluationPerformanceStart)}`, 'color: white; background: blueviolet;');
          Validator.endOfTesting();
      }
      static register(ruleConfig, ruleTest) {
          if (Validator.rules[ruleConfig.id]) {
              console.warn(`The rule ${ruleConfig.id} has already been defined`);
              return;
          }
          Validator.rules[ruleConfig.id] = {
              results: [],
              ruleConfig,
              ruleTest: ruleTest,
              totalElementsEvaluated: 0
          };
      }
      static unregister(ruleId) {
          if (typeof Validator.rules[ruleId] === 'object') {
              delete Validator.rules[ruleId];
          }
      }
      static getRegisteredRuleNames() {
          return Object.keys(Validator.rules);
      }
      static getContextElement(context) {
          let contextElement = null;
          if (typeof context === 'string') {
              contextElement = DomUtility.getElementFromCssSelectorOrXpath(context).element;
          }
          else if (ObjectUtility.isHtmlElement(context) ||
              (context && typeof context.nodeType === 'number' && (context.nodeType === NODE_TYPE.DOCUMENT_NODE || context.nodeType === NODE_TYPE.DOCUMENT_FRAGMENT_NODE))) {
              contextElement = context;
          }
          return contextElement;
      }
      static report(issueReport) {
          const rule = Validator.rules[issueReport.ruleId];
          if (typeof rule === 'undefined') {
              console.warn(`[Validator.report] Unregistered rule ${issueReport.ruleId} is not allowed to run`);
              return;
          }
          let reportIssue = issueReport;
          const runFilterBeforeRuleReport = (filter) => {
              reportIssue = filter(reportIssue);
          };
          Config.getFilters(busEvent.onBeforeRuleReport).forEach(runFilterBeforeRuleReport);
          const report = Object.assign({ id: Validator.REPORT_ID_PREFIX + Validator.getUniqueProblemId(), ruleConfig: rule.ruleConfig }, reportIssue);
          Validator.reports[report.id] = report;
          Bus.publish(busEvent.onValidatorReport, report);
      }
      static setTotalElementsEvaluated(ruleId, numElements) {
          if (typeof Validator.rules[ruleId] !== 'undefined') {
              Validator.rules[ruleId].totalElementsEvaluated = numElements;
          }
      }
      static runTests(contextElement) {
          Validator.reset();
          Validator.contextElement = contextElement;
          Bus.publish(busEvent.onValidatorStarted);
          const nodes = DomUtility.querySelectorAllExclude('*', contextElement);
          if (nodes === null) {
              console.warn('[Validator] Finished because there are no elements to scan');
              Validator.endOfTesting();
              return;
          }
          Bus.publish(busEvent.onBusyIndicatorOn, `Validating HTML ${nodes.length} elements.`, true);
          if (Validator.config.get($runnerSettings.asyncRunner) === false) {
              Validator.runTestsSynchronously(contextElement);
              return;
          }
          Validator.runTestsAsynchronously(contextElement);
      }
  }
  Validator.rules = {};
  Validator.REPORT_ID_PREFIX = 'report_';
  Validator.TIMEOUT = 4;
  Validator.uniqueProblemId = 0;
  Validator.reports = {};
  Validator.config = Config.getInstance();

  var _config = {
  	locale: "en-us",
  	nativeName: "English US",
  	englishName: "English US"
  };
  var context_unable_to_determine_empty_string = "Unable to determine the context. Provided context is empty or contains only white spaces.";
  var context_unable_to_determine = "Unable to determine the context. Provided context is type of %0, %1";
  var aria_role_dialog_report_message_1 = "Element with <code>%0</code> attribute has no accessible name because attribute <code>%1</code> has no content (it's empty).";
  var aria_role_dialog_report_message_2 = "Element with <code>%0</code> attribute has no accessible name.";
  var identify_input_purpose_report_message_1 = "Expected one of the token <code>%0</code> after <code>%1</code>.";
  var identify_input_purpose_report_message_2 = "You have defined an invalid tokens <code>%0</code>.";
  var aria_hidden_false_report_message = "You have defined <code>%0</code>. Caution, as the child content is always readable by screen readers regardless of setting <code>%1</code> on any child element.";
  var content_editable_missing_attributes_report_message1 = "Missing attribute <code>role='textbox'</code> on <code>%0</code>";
  var content_editable_missing_attributes_report_message2 = "Missing attribute <code>aria-multiline='true'</code> on <code>%0</code>";
  var content_editable_missing_attributes_report_message3 = "Missing attribute <code>aria-labelledby</code> or <code>aria-label</code> on <code>%0</code>";
  var capital_letters_words_report_explanation = "Unless you are dealing with an acronym, there should not be any content in all caps. Some screen readers will announce the capital letters separately (like an acronym) or otherwise misleadingly emphasise the capital letters.";
  var capital_letters_words_report_message1 = "Element have a text <q>%0</q> that contains words in upper case. <strong>Note</strong>: the text is transformed using <code>(text-transform: uppercase)</code>.";
  var capital_letters_words_report_message2 = "Element have a text that contains words in upper case.";
  var capital_letters_words_report_message3 = "This element has a <code>title</code> attribute that contains words in upper case.";
  var capital_letters_words_report_message4 = "Element have a text and has a <code>title</code> attribute that contains words in upper case.";
  var contentinfo_landmark_only_one_report_message = "Expected attribute <code>%0</code> to be defined only once. You have %1 %2";
  var elements_not_allowed_in_head_report_message = "Expected <code>%0</code> not to be a child of <code>%1</code>.";
  var empty_title_attribute_report_message = "You have an attribute <code>title</code> with an empty content.";
  var flash_content_report_message = "Using Flash is generally not recommended as it is not supported everywhere (particularly iOS devices), is being deprecated in browsers, and frequently inaccessible.";
  var h1_must_report_message = "Expected at least one heading <code>h1</code> element, but found none.";
  var headings_sibling_unique_report_message = "The accessible names of sibling heading elements of the same level are not unique. If section headings that share the same parent heading are not unique, users of assistive technologies will not be able to discern the differences among sibling sections of the web page. Same level <code>%0</code> and same description: <q>%1</q>.";
  var horizontal_rule_report_message = "The <code>%0</code> element adds extra <q>noise</q> and can be confusing. For example VoiceOver reads it as <q>dimmed collapsed on top, horizontal separator</q>, Windows Narrator reads it as <q>end of line</q>. A better option is to replace <code>%1</code> with <code>%2</code> and use CSS for styling. Alternatively, <code>aria-hidden='true'</code> or <code>role='presentation'</code> can be applied to the <code>%3</code> element.";
  var incorrect_technique_for_hiding_content_report_message = "CSS technique <code>text-indent: %0 </code> is used to hide text. However, it causes problems for right-to-left language and also keep focus for screen reader outside of visible area.";
  var invalid_attribute_dir_value_report_message = "Attribute <code>dir</code> has invalid value <code>%0</code>.";
  var label_duplicated_content_title_report_message = "This element has the same content as its <code>title</code> attribute. Consider removing <code>title</code> as some screen readers read both.";
  var link_with_unclear_purpose_report_message1 = "This anchor text content <code>%0</code> is unclear out of context.";
  var link_with_unclear_purpose_report_message2 = "This element looks like a link and its text <code>%0</code> is unclear out of context.";
  var links_language_destination_report_message = "Following url <code>%0</code> points to an external resource. If the content behind the link is in a different language then consider add some text or graphic to the link indicating that the target document is in another language.";
  var main_element_only_one_report_message = "You have defined multiple (%0) <code>&lt;%1&gt;</code> elements. Assistive technology users expect one main content block and may miss subsequent <code>&lt;main&gt;</code> blocks.";
  var main_landmark_must_be_top_level_report_message = "Expected element with <code>role=\"main\"</code> to be a top-level landmark, but it is contained within element <code>%0</code>. Top-level landmarks are the easiest landmarks to find and navigate to using assistive technologies.";
  var minimum_font_size_report_message_1 = "This hidden element has <code> %0 px</code> font size (expected minimum <code>10px</code>) on a hidden element. However, since the element is hidden this may not be an issue.";
  var minimum_font_size_report_message_2 = "Defined <code> %0 px</code> font size, but expected minimum <code>10px</code>.";
  var missing_href_on_a_report_message = "Missing attribute <code>href</code> on link. The user cannot navigate to this element using the keyboard. A better option here is to use a <code>%0</code> element instead.";
  var misused_aria_on_focusable_element_report_message = "Using <code>%0</code> on a visible focusable element will result in some users focusing on 'nothing'";
  var misused_aria_on_focusable_element_attribute_1 = "<code>role=\"presentation\"</code>";
  var misused_aria_on_focusable_element_attribute_2 = "<code>aria-hidden=\"true\"</code>";
  var misused_input_attribute_report_message = "Expected attribute <code>%0</code> not to be defined on this element.";
  var misused_required_attribute_report_message1 = "The attribute <code>aria-required='%0'</code> should not be used on this element.";
  var misused_required_attribute_report_message2 = "The attribute <code>aria-required='%0'</code> is not needed.";
  var misused_required_attribute_report_message3 = "The attribute <code>aria-required='%0'</code> has a different value than the attribute <code>required='%1'</code> on this element.";
  var navigation_landmark_restrictions_report_message = "This element must only contain <code>region</code> or <code>search</code> landmarks.";
  var obsolete_html_attributes_report_message = "The following attributes <code>%0</code> are obsolete (though the elements are still part of the language), and must not be used by authors.";
  var obsolete_html_elements_report_message = "Following element <code>%0</code> is entirely obsolete, and must not be used by authors.";
  var outline_zero_report_message = "The user may not see the actual focusable element because <code>outline: %0 ;</code> is definied in CSS selector <code>%1</code> %2  However, you may implement an alternative such as <code>border</code> to make <code>focus/hover</code> state clearly visible.";
  var outline_zero_css_embeded_1 = ", CSS url: <code>";
  var outline_zero_css_embeded_2 = ", defined inline on node: <code>%0</code>.";
  var overlay_report_message = "Accessibility overlay %0 has been detected on the page. Overlays are third-party widgets that attempt to automatically fix the accessibility issues of page they are added to. Therefore the results from the scanning may not be accurate.";
  var role_application_report_message = "Use <code>role=\"application\"</code> carefully as it is used to denote a region of a web application that is to be treated like a desktop application, not like a regular web page.";
  var rtl_content_report_message = "You are using RTL direction (text and other elements go from right to left). Make sure all features are available in RTL mode.";
  var unclear_uri_on_a_report_message_1 = "The URI <code>%0</code> defined in anchor <code>href</code> attribute should not be used and may be misinterpreted by screen readers or the action may be unexpected. Providing an explanation about expected behaviour may help users to understand what follows.";
  var unsupported_role_on_element_report_message = "Expected attribute <code>role=\"%0\"</code> not to be defined on this element.";
  var css_images_convey_information_report_message = "A background image <code>%0</code> is defined in CSS. Ensure that the image does not convey important information that is otherwise unavailable.";
  var missing_alt_attribute_report_message = "Missing defined attribute <code>alt</code>.";
  var alt_text_include_filename_report_message = "The source filename of the image element must not be part of its text alternative (<code>alt=\"%0\"</code>).";
  var accessible_svg_report_message_1 = "The element <code>%0</code> does not have an accessible description. Use one of the following solutions to describe element purpose: <code>%1</code>. For decorative purpose add an attribute <code>role=\"presentation\"</code>.";
  var accessible_svg_report_message_2 = "You have defined element <code>%0</code>, but it's content is empty.";
  var accessible_svg_report_message_3 = "You have defined <code>%0</code> and ids that refers to the elements, but associated elements with following attributes <code>id</code> does not exists: <code>%1</code>.";
  var accessible_svg_report_message_4 = "You have defined attribute <code>tabindex</code> but the value <code>%0</code> is not a valid integer.";
  var orientation_rule_report_message_1 = "You have defined <acronym title=\"Cascading Style Sheets\">CSS</acronym> orientation media feature <code>%0</code> in <acronym title=\"Cascading Style Sheets\">CSS</acronym> (%1).\n\nMake sure that there is no message telling the user to reorient the device. The entirety of the author-controlled content needs to be re-oriented in order to meet the Success Criteria.\n\nNote about location: If the style sheet is a linked style sheet, the value of its attribute is its location. For inline style sheets, the value of this attribute is <code>null</code>.";
  var orientation_rule_report_message_2 = "<acronym title=\"Cascading Style Sheets\">CSS</acronym> from URL <code>%0</code> can't be tested for orientation media feature because it can't be loaded. Response status: %1";
  var captcha_google_link_report_message = "Google Captcha version 2 has been detected. It is not accessible for screen reader users and we recommend to use at least version 3.";
  var area_missing_alt_report_message_1 = "You have not defined an <code>alt</code> attribute that describes the function of the image map area.";
  var area_missing_alt_report_message_2 = "You have defined an <code>alt</code> attribute with an empty content, but it should describe the function of the image map area.";
  var area_missing_alt_report_message_3 = "The text within the <code>alt</code> attribute should describe the function of the image map area. It contains only white space and therefore it is ignored by assistive technologies.";
  var img_empty_alt_in_link_report_message_1 = "You have defined empty content for <code>alt</code> attribute in <code>&lt;img/&gt;</code>.";
  var img_empty_alt_in_link_report_message_2 = "You have defined <code>alt</code> attribute in <code>&lt;img/&gt;</code>, but it contains only whitespace.";
  var img_adjacent_duplicate_text_link_report_message_1 = "Adjacent text and image link have the same destination. Avoid unnecessary duplication that occurs when adjacent text and iconic versions of a link are contained in a document.";
  var img_adjacent_duplicate_text_link_report_message_2 = "<code>&lt;img&gt;</code> element inside a link has empty or missing alt text when a link beside it contains link text. Consider combining the links.";
  var img_alt_duplicate_text_link_report_message = "<code>&lt;img&gt;</code> element inside a link must not use alt text that duplicates the text content of the link.";
  var applet_missing_alt_report_message_1 = "You have not defined an <code>alt</code> attribute that provides a text alternative to the browsers that supporting the element but are unable to load the <code>applet</code>.";
  var applet_missing_alt_report_message_2 = "You have defined an <code>alt</code> attribute with empty content, but it should describe the <code>applet</code>'s function.";
  var applet_missing_alt_report_message_3 = "The text within the <code>alt</code> attribute should describe the <code>applet</code>'s function. It contains only white space and therefore it is ignored by assistive technologies.";
  var applet_missing_body_report_message_1 = "Only white space has been provided as a text alternative for content rendered using the <code>%0</code> element. The body of the <code>%1</code> element does not provide a complete text alternative for the object.";
  var applet_missing_body_report_message_2 = "This element is missing a text alternative for content rendered using <code>%0</code>. The body of the <code>%1</code> element can be used to provide a complete text alternative for the <code>%2</code>, or may contain additional non-text content with text alternatives.";
  var input_image_missing_alt_report_message_1 = "You have not defined an <code>alt</code> attribute that describes the button's function.";
  var input_image_missing_alt_report_message_2 = "You have defined an <code>alt</code> attribute with empty content, but it should describe the button's function.";
  var input_image_missing_alt_report_message_3 = "The text in the <code>alt</code> attribute should describe the button's function. It contains only white space and therefore it is ignored by assistive technologies.";
  var general_alt_report_message = "The text within the <code>alt</code> attribute should let the user know what an image's content and purpose are. When an image contains words that are important to understanding the content, the alt text should include those words. Likewise, adding the attribute <code>aria-label=\"Image description here\"</code> to the <code>%0</code> element that uses <code>role=\"img\"</code> is recommended to further help assistive technologies convey the meaning of your content.";
  var object_general_alt_report_message = "Check that the alternative content serves the same purpose and presents the same information.";
  var object_missing_body_report_message_1 = "The text alternative to the content rendered by <% 0 %> contains only whitespace.  The body of the <code>%1</code> element must provide a complete text alternative for the object.";
  var object_missing_body_report_message_2 = "The <code>%0</code> element does not define a text alternative. The body of the <code>%1</code> element can be used to provide a complete text alternative for the <code>%2</code>, or it may contain additional non-text content with text alternatives.";
  var img_empty_alt_with_empty_title_report_message = "Images with an empty <code>alt</code> attribute must have an absent or empty <code>title</code> attribute, but <code>title</code> exists and is not empty.";
  var img_empty_alt_with_empty_title_report_message_alt_whitespaces = "Note: <code>alt</code> attribute contains only whitespace.";
  var audio_alternative_report_message_1 = "Audio content should have an text alternative. One method is to use the <code>aria-describedby</code> attribute to refer to a text alternative to the audio only content.";
  var audio_alternative_report_message_2 = "You have defined an <code>audio</code> element, but there is no  <a href=\"https://developer.mozilla.org/en/docs/Web/HTML/Element/track\"><code>track</code></a> element(s) to provide text that you want to display along with the playing media file.";
  var audio_alternative_report_message_3 = "You have defined a <code>bgsound</code> element which is obsolete and should <a href=\"https://msdn.microsoft.com/en-us/library/ms535198(v=vs.85).aspx\">no longer be used</a>. Use an <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio'><code>&lt;audio&gt;</code></a> element instead.";
  var audio_alternative_report_message_4 = "If this <code>object</code> element's purpose is to play audio content then use <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio\"><code>audio</code></a> element instead as it provides better support for captions and text transcripts.";
  var aria_describedby_association_report_message_1 = "There is no element with attribute <code>id='%0'</code>, which is referred-to by <code>aria-describedby=\"%1\"</code>.";
  var aria_describedby_association_report_message_2 = "Expected attribute <code>aria-describedby</code> not to be empty on element <code>%0</code>";
  var headings_hierarchy_report_message = "Expected <code>%0</code> to be <code>&lt;h%1&gt;</code>";
  var table_caption_summary_identical_report_message = "<code>summary</code> attribute and <code>%0</code> element have the same content.";
  var table_missing_description_report_message_1 = "Attribute <code>%0</code> contains associated elements that does not exists. Following elements with attribute <code>id</code> are missing: <code>%1</code>.";
  var table_missing_description_report_message_2 = "<code>&lt;caption&gt;</code> has not been defined on table.";
  var table_missing_description_report_message_3 = "The table has defined <code>%0</code>, but it's content is empty.";
  var table_missing_description_report_message_4 = "The table has defined attribute <code>%0</code>, but it's empty. It should have defined one or more element IDs, which refer to elements that have the text needed for labeling.";
  var table_missing_description_report_message_5 = "<code>&lt;caption&gt;</code> is defined, but there is no content defined there. It contains only: %0";
  var empty_label_element_report_message = "The label has no content <code>%0</code>";
  var label_implicitly_associated_report_message_1 = "You have implicitly associated <code>%0</code> attribute, but it contains only white spaces and therefore it's invalid. To implict associate label with labelable child element remove <code>for</code> attribute. Note that implicit label has poor support in Voice Control AT.";
  var label_implicitly_associated_report_message_2 = "You have implicitly associated <code>%0</code> attribute, but it contains more than one labelable elements. It should contains only one because activating label sets the foocus on the first labelable element. Note that implicit label has poor support in Voice Control AT.";
  var label_inappropriate_association_report_message_1 = "Missing defined associated form control for <code>%0</code>";
  var label_inappropriate_association_report_message_2 = "Expected <code>%0</code> not to be associated with non-form control.";
  var table_row_and_column_headers_report_message_1 = "The table has no defined headers. Make sure that rows and columns are identified using <code>%0</code> elements.";
  var table_row_and_column_headers_report_message_2 = "Content of the table should be wrapped using <code>%0</code> element.";
  var table_row_and_column_headers_report_message_3 = "If applicable then head of the columns of the table should be wrapped using <code>%0</code> element.";
  var fieldset_no_legend_report_message = "Founded <code>%0</code> as the first element inside the <code>&lt;fieldset&gt;</code>, but <code>&lt;legend&gt;</code> element must there, which provides a label or description for the group. Context: <code>%1</code>";
  var group_elements_name_attribute_report_message = "Ensure all related checkboxes are grouped together.";
  var duplicated_for_attribute_report_message = "Attribute <code>for=\"%0\"</code> should be unique. It has been defined %1 times.";
  var meaningful_content_sequence_report_message = "The content should be organised into meaningul sequence when linearized, e.g. when style sheets are diabled or unavailable.";
  var alt_color_convey_information_report_message = "Check that the information in the <code>alt</code> attribute conveyed by colors <code>%0</code> are included in the text alternative for the image.";
  var autoplay_audio_video_report_message = "You have defined <code>%0</code>. Individuals who use screen reading software can find it hard to hear the speech output if there is other audio playing at the same time. Allow the user to turn off videos/sounds (especially if they last more than 3 seconds) that start automatically when a page loads.";
  var links_not_visually_evident_without_color_vision_report_message = "Ensure links are understandable and distinguishable from their surrounding text. Parent element has styles <code>%0</code>, while anchor has styles <code>%1</code>. Change the styles to differentiate between them.";
  var color_contrast_aa_report_message_2 = "The element has <code>background: transparent</code> with <code>foreground: %0</code>. We also couldn't find any non-transparent color for any parent element (including <code>body</code>) and therefore the contrast ratio cannot be determined.\n\nYou need to set the background color for <code>%1</code> element explicitly because the actual color returned by the browser is <code>transparent</code>.";
  var color_contrast_aa_report_message_4 = "Expected color contrast ratio for large font size at least 3:1, but got ratio: %0:1, <code>background-color: %1</code>, <code>foreground-color: %2</code>, <code>font-size: %3</code> (original: <code>%4</code>), <code>font-weight: %5</code>.%6";
  var color_contrast_aa_report_message_5 = "Expected color contrast ratio for small font size at least 4.5:1, but got ratio: %0:1, <code>background-color: %1</code>, <code>foreground-color: %2</code>, <code>font-size: %3</code> (original: <code>%4</code>), <code>font-weight: %5</code>.%6";
  var color_contrast_aa_note_about_visibility = "<small>Note:</small> The element was visually hidden while testing and that state might be temporary. For example the lazy loading technique may be being used and the element will be visible at some point.";
  var color_contrast_aa_warning_message = " <strong>Note</strong>: there is an image defined in the background and for that reason the contrast ratio cannot be determined in a reliable way.";
  var zoom_disabled_report_message = "You have defined <code>%0</code>. Remove parameters from the <code>content</code> attribute.";
  var color_contrast_aaa_report_message_2 = "The element has <code>background: transparent</code> with <code>foreground: %0</code>. We also couldn't find any non-transparent color for any parent element (including <code>body</code>) and therefore the contrast ratio cannot be determined.\n\nYou need to set the background color for <code>%1</code> element explicitly because the actual color returned by the browser is <code>transparent</code>.";
  var color_contrast_aaa_report_message_3 = "Expected color contrast ratio for large font size at least 4.5:1, but got ratio: %0:1,<code>background-color: %1</code>, <code>foreground-color: %2</code>, <code>font-size: %3</code> (original: <code>%4</code>), <code>font-weight: %5</code>.%6";
  var color_contrast_aaa_report_message_4 = "Expected color contrast ratio for small font size at least 7:1, but got ratio: %0:1, <code>background-color: %1</code>, <code>foreground-color: %2</code>, <code>font-size: %3</code> (original: <code>%4</code>), <code>font-weight: %5</code>.%6";
  var link_button_space_key_report_message = "You have defined attribute <code>%0</code> on a <code>%1</code> element. Make sure the user is able to activate it using the <kbd>ENTER</kbd> and <kbd>SPACE</kbd> keys.";
  var no_meta_http_equiv_refresh_report_message = "You have defined <code>http-equiv=\"refresh\"</code>. Remove this element.";
  var animation_report_message_0 = "Make sure that there is a mechanism for the user to pause, stop, or hide it unless the movement, blinking, or scrolling is part of an activity where it is essential.";
  var animation_report_message_1 = "You have defined an animation duration in <code>%0</code> which is more than 5 seconds.";
  var animation_report_message_2 = "You have defined an animation iteration count with <code>%0</code> value.";
  var blink_element_report_message_1 = "You have used the HTML <code>&lt;blink&gt;</code> element which makes the content difficult to read.";
  var blink_element_report_message_2 = "You have used <code>&lt;blink&gt;</code> element which makes the content difficult to read. However, it's invisible and that state might be temporary.";
  var reflow_report_message = "Content can be presented without loss of information or function, and without requiring scrolling in two directions.";
  var flickering_report_message = "Check that the page do not contain anything that flashes more than three times in any one second period, or the flash is below the general flash and red flash thresholds.";
  var title_element_report_message_1 = "The page title <code>%0</code> does not identify the contents or purpose of the Web page.";
  var title_element_report_message_2 = "The page title is empty and therefore does not identify the contents or purpose of the Web page.";
  var misused_tabindex_attribute_report_message_1 = "Expected attribute <code>tabindex=\"%0\"</code> not to be defined.";
  var positive_tabindex_report_message = "Positive <code>tabindex=\"%0\"</code> should not be used. Outside of very specific corner cases, a tabindex should not be given a positive integer value. Users who use keyboards to interact with the web expect a web document to be navigable in sequential order, starting at the top left (or right depending on language of the document) and going in order from there.";
  var broken_same_page_link_report_message = "A link to another location on the page does not have a corresponding target with <code>id=\"%0\"</code>.";
  var empty_button_description_report_message_1 = "The button content has only whitespaces.";
  var empty_button_description_report_message_2 = "The button should have a description, but the content is empty.";
  var empty_button_description_report_message_3 = "Having only defined an attribute %0 is not sufficient and it is recommended to have the content instead, e.g. at least visually hidden, but exposed to assisitve technologies. Some users are disabling styles for better readability, and also description from attribute is not available for automatic translators.";
  var empty_button_description_additional_message = "The button has defined <code>aria-labelledby=\"%0\"</code>, but the associated elements with following ids <code>%1</code> does not exist.";
  var empty_link_element_report_message_1 = "The link content has only whitespaces.";
  var empty_link_element_report_message_2 = "The link should have a description, but the content is empty.";
  var empty_link_element_report_message_3 = "Having only defined an attribute %0 is not sufficient and it is recommended to have the content instead, e.g. at least visually hidden, but exposed to assisitve technologies. Some users are disabling styles for better readability, and also description from attribute is not available for automatic translators.";
  var empty_link_element_additional_message = "The link has defined <code>aria-labelledby=\"%0\"</code>, but the associated elements with following ids <code>%1</code> does not exist.";
  var links_same_content_different_url_report_message = "There are anchor elements that have the same content, but different destination URLs.";
  var aria_labelledby_association_report_message_1 = "Expected to find element with attribute <code>id=\"%0\"</code> for element <code>%1</code>";
  var aria_labelledby_association_report_message_2 = "Expected attribute <code>aria-labelledby</code> not to be empty on element <code>%0</code>";
  var click_verb_report_message = "The verb <q>click</q> must not be used in a link. <q>Click</q> presupposes the use of a mouse, but some users will activate links via keyboard commands (i.e. <kbd>Enter</kbd>) and/or other assistive technologies.";
  var empty_heading_report_message = "Heading element should not have an empty content.";
  var no_headings_report_message = "You have no defined headings <code>h1-h6</code>.";
  var html_lang_attr_report_message_1 = "You have defined the <code>lang</code> attribute on the <code>%0</code> root element, but you have more than 3 languages parameters defined there: %0";
  var html_lang_attr_report_message_2 = "Expected <code>lang</code> attribute on the <code>%0</code> root element, but got nothing. The <code>html</code> element must have a lang attribute, where the content is composed of a 2-letter ISO 639 language code, followed by the appropriate ISO 3166 geography code. You can use <code>html lang='[language code]-[country code]'</code>. Example: <code>html lang='en-us'</code>, where <code>'en'</code> refers to the language and <code>'us'</code> refers to the geography.";
  var html_lang_attr_report_message_3 = "You have defined <code>lang</code> attribute on the <code>%0</code> root element, but the value (<code>%1</code>) is empty.";
  var title_for_abbr_report_message_1 = "You have not provided a <code>title</code> that defines the abbreviation.";
  var title_for_abbr_report_message_2 = "The <code>title</code> content for the abbreviation should not be empty.";
  var font_style_italic_report_message = "You have defined <code>font-style: italic;</code> on long ( %0 chars) text content. This makes the content difficult to read.";
  var missing_submit_button_report_message_1 = "This form element does not have a submit button. This may be because it contains no content. Consider adding the<code>role='presentation'</code> attribute to hide it from assistive technologies.";
  var missing_submit_button_report_message_2 = "This form element does not have a submit button. This may be because it contains <code>%0</code> elements only. Consider adding the <code>role='presentation'</code> attribute to hide it from assistive technologies.";
  var missing_submit_button_report_message_3 = "This form does not have a submit button.";
  var links_new_window_mark_report_message = "This link should have a warning before automatically opening a new window or tab.";
  var label_visually_hidden_only_report_message = "This associated <code>%0</code> is visually hidden, but available for assistive technologies, and therefore it is recommended to provide additional info, e.g. a custom title.";
  var missing_label_report_message_1 = "Expected attribute <code>id</code> to be defined on element <code>%0</code> to associate with appropriate <code>%1</code>";
  var missing_label_report_message_2 = "Expected element <code>%0</code> to be defined for this element.";
  var missing_label_report_message_3 = "You have defined multiple labels for element <code>%0</code>. It should only be one.";
  var legend_first_child_of_fieldset_report_message_1 = "Expected <code>%0</code> to be the first child of the <code>%1</code> element, but instead there is <code>%2</code>";
  var legend_first_child_of_fieldset_report_message_2 = "Element <code>%0</code> is the first child of the <code>%1</code> element, but it contains only white spaces.";
  var duplicated_id_attribute_report_message = "Attribute <code>id=\"%0\"</code> should be unique. It has been defined %1 times.";
  var title_iframe_report_message_1 = "Expected <code>title</code> attribute to be defined on <code>%0</code>. However, if it is an <code>iframe</code> without valuable content for the user then add the attribute <code>aria-hidden=\"true\"</code> in order to hide it from assistive technologies.";
  var title_iframe_report_message_2 = "Expected <code>title</code> attribute not to be empty on <code>%0</code>";
  var select_initial_option_report_message = "Missing default selection <code>%0</code>.";
  var position_sticky_report_message = "The CSS <code>position: sticky;</code> property is used in selector <code>%0</code> %1</p><p>Using fixed (also known as sticky) positions on websites (e.g. sticky headers) can be problematic for people with low vision who have their browser window zoomed in. This is especially problematic on mobile phones where, when zoomed in, the sticky header can take over much of the screen, hiding the content that the user wants to view.";
  var position_sticky_context_inline_report_message = "The CSS <code>position: sticky;</code> property is used in an inline styles for element <code>%0</code></p><p>Using fixed (also known as sticky) positions on websites (e.g. sticky headers) can be problematic for people with low vision who have their browser window zoomed in. This is especially problematic on mobile phones where, when zoomed in, the sticky header can take over much of the screen, hiding the content that the user wants to view.";
  var position_sticky_context_css_report_message = "The CSS <code>position: sticky;</code> property is used in the styles for element <code>%0</code></p><p>Using fixed (also known as sticky) positions on websites (e.g. sticky headers) can be problematic for people with low vision who have their browser window zoomed in. This is especially problematic on mobile phones where, when zoomed in, the sticky header can take over much of the screen, hiding the content that the user wants to view.";
  var position_sticky_embeded_inline_1 = ", CSS url: <code>%0</code>.";
  var position_sticky_embeded_inline_2 = ", defined inline on node: <code>%0</code>.";
  var motion_actuation_report_message_1 = "Is API DeviceMotionEvent and DeviceOrientationEvent supported on the current environment? %0. However, unless it is an essential part of the application purpose, don't rely on device motion for functionality and use an alternative and traditional controls that do the same function.";
  var text_color_convey_information_report_message = "Check that the information conveyed by colors <code>%0</code> is also available in text and that the text is not conditional content.";
  var audio_video_captions_report_message = "You have not defined any <a href=\"https://developer.mozilla.org/en/docs/Web/HTML/Element/track\"><code>%0</code></a> elements to provide captions or subtitles.";
  var video_audio_descriptions_report_message = "You have not defined neither <a href=\"https://developer.mozilla.org/en/docs/Web/HTML/Element/track\"><code>%0</code></a> elements to provide descriptions nor <a href=\"https://developer.mozilla.org/en/docs/Web/HTML/Element/source\"><code>%1</code></a> with an audio as an alternative.";
  var aslint = "ASLint";
  var incorrect_label_placement_for_associated_input_report_message = "Incorrect label placement for associated input";
  var color_contrast_state_pseudo_classes_report_message_1 = "This element is rendered out of the normal flow as it has defined the CSS property <code>position: fixed;</code> and therefore the contrast ratio cannot be precise. Depending on what's going to be underneath, it could be any of the following: 1) fails WCAG 2.0, 2) passes AA for large text (above 18pt or bold above 14pt), 3) Passes AA level for any size text and AAA for large text (above 18pt or bold above 14pt), 4) Passes AAA level for any size text.";
  var color_contrast_state_pseudo_classes_report_message_2 = "Pseudo class :%0 / The background color for the <body> element is transparent, so the contrast ratio cannot be determined. You need to set the background color for <code>%1</code> element explicitly because the actual color returned by the browser is <code>transparent</code>.";
  var color_contrast_state_pseudo_classes_report_message_3 = "Pseudo class :%0 / Expected color contrast ratio for large font size at least 3:1, but got ratio: %1:1, <code>background-color: %2</code>, <code>foreground-color: %3</code>, <code>font-size: %4</code>, <code>font-weight: %5</code>.%6";
  var color_contrast_state_pseudo_classes_report_message_4 = "Pseudo class :%0 / Expected color contrast ratio for small font size at least 4.5:1, but got ratio: %1:1, <code>background-color: %2</code>, <code>foreground-color: %3</code>, <code>font-size: %4</code>, <code>font-weight: %5</code>.%6";
  var color_contrast_state_pseudo_classes_report_message_css_failed_to_load = "<acronym title=\"Cascading Style Sheets\">CSS</acronym> from URL <code>%0</code> can't be tested for pseudo classes contrast rule because it can't be loaded. Response status: %1, error: %2";
  var color_contrast_state_pseudo_classes_warning_message = " <strong>Note</strong>: there is an image defined in the background and for that reason the contrast ratio cannot be determined in a reliable way.";
  var skip_reason_excluded_from_scanning = "Element was excluded from scanning because it's not visible either due to being explicitly hidden or e.g. is being rendered outside of viewport, having transparency etc.";
  var skip_reason_hidden_option = "Element was excluded from scanning because the option includeHidden is set to false.";
  var skip_reason_styles_cant_be_determined = "Styles for element can't be determined at all.";
  var skip_reason_specified_styles_cant_be_determined = "Required styles <code>%0</code> for element can't be determined.";
  var english = {
  	_config: _config,
  	context_unable_to_determine_empty_string: context_unable_to_determine_empty_string,
  	context_unable_to_determine: context_unable_to_determine,
  	aria_role_dialog_report_message_1: aria_role_dialog_report_message_1,
  	aria_role_dialog_report_message_2: aria_role_dialog_report_message_2,
  	identify_input_purpose_report_message_1: identify_input_purpose_report_message_1,
  	identify_input_purpose_report_message_2: identify_input_purpose_report_message_2,
  	aria_hidden_false_report_message: aria_hidden_false_report_message,
  	content_editable_missing_attributes_report_message1: content_editable_missing_attributes_report_message1,
  	content_editable_missing_attributes_report_message2: content_editable_missing_attributes_report_message2,
  	content_editable_missing_attributes_report_message3: content_editable_missing_attributes_report_message3,
  	capital_letters_words_report_explanation: capital_letters_words_report_explanation,
  	capital_letters_words_report_message1: capital_letters_words_report_message1,
  	capital_letters_words_report_message2: capital_letters_words_report_message2,
  	capital_letters_words_report_message3: capital_letters_words_report_message3,
  	capital_letters_words_report_message4: capital_letters_words_report_message4,
  	contentinfo_landmark_only_one_report_message: contentinfo_landmark_only_one_report_message,
  	elements_not_allowed_in_head_report_message: elements_not_allowed_in_head_report_message,
  	empty_title_attribute_report_message: empty_title_attribute_report_message,
  	flash_content_report_message: flash_content_report_message,
  	h1_must_report_message: h1_must_report_message,
  	headings_sibling_unique_report_message: headings_sibling_unique_report_message,
  	horizontal_rule_report_message: horizontal_rule_report_message,
  	incorrect_technique_for_hiding_content_report_message: incorrect_technique_for_hiding_content_report_message,
  	invalid_attribute_dir_value_report_message: invalid_attribute_dir_value_report_message,
  	label_duplicated_content_title_report_message: label_duplicated_content_title_report_message,
  	link_with_unclear_purpose_report_message1: link_with_unclear_purpose_report_message1,
  	link_with_unclear_purpose_report_message2: link_with_unclear_purpose_report_message2,
  	links_language_destination_report_message: links_language_destination_report_message,
  	main_element_only_one_report_message: main_element_only_one_report_message,
  	main_landmark_must_be_top_level_report_message: main_landmark_must_be_top_level_report_message,
  	minimum_font_size_report_message_1: minimum_font_size_report_message_1,
  	minimum_font_size_report_message_2: minimum_font_size_report_message_2,
  	missing_href_on_a_report_message: missing_href_on_a_report_message,
  	misused_aria_on_focusable_element_report_message: misused_aria_on_focusable_element_report_message,
  	misused_aria_on_focusable_element_attribute_1: misused_aria_on_focusable_element_attribute_1,
  	misused_aria_on_focusable_element_attribute_2: misused_aria_on_focusable_element_attribute_2,
  	misused_input_attribute_report_message: misused_input_attribute_report_message,
  	misused_required_attribute_report_message1: misused_required_attribute_report_message1,
  	misused_required_attribute_report_message2: misused_required_attribute_report_message2,
  	misused_required_attribute_report_message3: misused_required_attribute_report_message3,
  	navigation_landmark_restrictions_report_message: navigation_landmark_restrictions_report_message,
  	obsolete_html_attributes_report_message: obsolete_html_attributes_report_message,
  	obsolete_html_elements_report_message: obsolete_html_elements_report_message,
  	outline_zero_report_message: outline_zero_report_message,
  	outline_zero_css_embeded_1: outline_zero_css_embeded_1,
  	outline_zero_css_embeded_2: outline_zero_css_embeded_2,
  	overlay_report_message: overlay_report_message,
  	role_application_report_message: role_application_report_message,
  	rtl_content_report_message: rtl_content_report_message,
  	unclear_uri_on_a_report_message_1: unclear_uri_on_a_report_message_1,
  	unsupported_role_on_element_report_message: unsupported_role_on_element_report_message,
  	css_images_convey_information_report_message: css_images_convey_information_report_message,
  	missing_alt_attribute_report_message: missing_alt_attribute_report_message,
  	alt_text_include_filename_report_message: alt_text_include_filename_report_message,
  	accessible_svg_report_message_1: accessible_svg_report_message_1,
  	accessible_svg_report_message_2: accessible_svg_report_message_2,
  	accessible_svg_report_message_3: accessible_svg_report_message_3,
  	accessible_svg_report_message_4: accessible_svg_report_message_4,
  	orientation_rule_report_message_1: orientation_rule_report_message_1,
  	orientation_rule_report_message_2: orientation_rule_report_message_2,
  	captcha_google_link_report_message: captcha_google_link_report_message,
  	area_missing_alt_report_message_1: area_missing_alt_report_message_1,
  	area_missing_alt_report_message_2: area_missing_alt_report_message_2,
  	area_missing_alt_report_message_3: area_missing_alt_report_message_3,
  	img_empty_alt_in_link_report_message_1: img_empty_alt_in_link_report_message_1,
  	img_empty_alt_in_link_report_message_2: img_empty_alt_in_link_report_message_2,
  	img_adjacent_duplicate_text_link_report_message_1: img_adjacent_duplicate_text_link_report_message_1,
  	img_adjacent_duplicate_text_link_report_message_2: img_adjacent_duplicate_text_link_report_message_2,
  	img_alt_duplicate_text_link_report_message: img_alt_duplicate_text_link_report_message,
  	applet_missing_alt_report_message_1: applet_missing_alt_report_message_1,
  	applet_missing_alt_report_message_2: applet_missing_alt_report_message_2,
  	applet_missing_alt_report_message_3: applet_missing_alt_report_message_3,
  	applet_missing_body_report_message_1: applet_missing_body_report_message_1,
  	applet_missing_body_report_message_2: applet_missing_body_report_message_2,
  	input_image_missing_alt_report_message_1: input_image_missing_alt_report_message_1,
  	input_image_missing_alt_report_message_2: input_image_missing_alt_report_message_2,
  	input_image_missing_alt_report_message_3: input_image_missing_alt_report_message_3,
  	general_alt_report_message: general_alt_report_message,
  	object_general_alt_report_message: object_general_alt_report_message,
  	object_missing_body_report_message_1: object_missing_body_report_message_1,
  	object_missing_body_report_message_2: object_missing_body_report_message_2,
  	img_empty_alt_with_empty_title_report_message: img_empty_alt_with_empty_title_report_message,
  	img_empty_alt_with_empty_title_report_message_alt_whitespaces: img_empty_alt_with_empty_title_report_message_alt_whitespaces,
  	audio_alternative_report_message_1: audio_alternative_report_message_1,
  	audio_alternative_report_message_2: audio_alternative_report_message_2,
  	audio_alternative_report_message_3: audio_alternative_report_message_3,
  	audio_alternative_report_message_4: audio_alternative_report_message_4,
  	aria_describedby_association_report_message_1: aria_describedby_association_report_message_1,
  	aria_describedby_association_report_message_2: aria_describedby_association_report_message_2,
  	headings_hierarchy_report_message: headings_hierarchy_report_message,
  	table_caption_summary_identical_report_message: table_caption_summary_identical_report_message,
  	table_missing_description_report_message_1: table_missing_description_report_message_1,
  	table_missing_description_report_message_2: table_missing_description_report_message_2,
  	table_missing_description_report_message_3: table_missing_description_report_message_3,
  	table_missing_description_report_message_4: table_missing_description_report_message_4,
  	table_missing_description_report_message_5: table_missing_description_report_message_5,
  	empty_label_element_report_message: empty_label_element_report_message,
  	label_implicitly_associated_report_message_1: label_implicitly_associated_report_message_1,
  	label_implicitly_associated_report_message_2: label_implicitly_associated_report_message_2,
  	label_inappropriate_association_report_message_1: label_inappropriate_association_report_message_1,
  	label_inappropriate_association_report_message_2: label_inappropriate_association_report_message_2,
  	table_row_and_column_headers_report_message_1: table_row_and_column_headers_report_message_1,
  	table_row_and_column_headers_report_message_2: table_row_and_column_headers_report_message_2,
  	table_row_and_column_headers_report_message_3: table_row_and_column_headers_report_message_3,
  	fieldset_no_legend_report_message: fieldset_no_legend_report_message,
  	group_elements_name_attribute_report_message: group_elements_name_attribute_report_message,
  	duplicated_for_attribute_report_message: duplicated_for_attribute_report_message,
  	meaningful_content_sequence_report_message: meaningful_content_sequence_report_message,
  	alt_color_convey_information_report_message: alt_color_convey_information_report_message,
  	autoplay_audio_video_report_message: autoplay_audio_video_report_message,
  	links_not_visually_evident_without_color_vision_report_message: links_not_visually_evident_without_color_vision_report_message,
  	color_contrast_aa_report_message_2: color_contrast_aa_report_message_2,
  	color_contrast_aa_report_message_4: color_contrast_aa_report_message_4,
  	color_contrast_aa_report_message_5: color_contrast_aa_report_message_5,
  	color_contrast_aa_note_about_visibility: color_contrast_aa_note_about_visibility,
  	color_contrast_aa_warning_message: color_contrast_aa_warning_message,
  	zoom_disabled_report_message: zoom_disabled_report_message,
  	color_contrast_aaa_report_message_2: color_contrast_aaa_report_message_2,
  	color_contrast_aaa_report_message_3: color_contrast_aaa_report_message_3,
  	color_contrast_aaa_report_message_4: color_contrast_aaa_report_message_4,
  	link_button_space_key_report_message: link_button_space_key_report_message,
  	no_meta_http_equiv_refresh_report_message: no_meta_http_equiv_refresh_report_message,
  	animation_report_message_0: animation_report_message_0,
  	animation_report_message_1: animation_report_message_1,
  	animation_report_message_2: animation_report_message_2,
  	blink_element_report_message_1: blink_element_report_message_1,
  	blink_element_report_message_2: blink_element_report_message_2,
  	reflow_report_message: reflow_report_message,
  	flickering_report_message: flickering_report_message,
  	title_element_report_message_1: title_element_report_message_1,
  	title_element_report_message_2: title_element_report_message_2,
  	misused_tabindex_attribute_report_message_1: misused_tabindex_attribute_report_message_1,
  	positive_tabindex_report_message: positive_tabindex_report_message,
  	broken_same_page_link_report_message: broken_same_page_link_report_message,
  	empty_button_description_report_message_1: empty_button_description_report_message_1,
  	empty_button_description_report_message_2: empty_button_description_report_message_2,
  	empty_button_description_report_message_3: empty_button_description_report_message_3,
  	empty_button_description_additional_message: empty_button_description_additional_message,
  	empty_link_element_report_message_1: empty_link_element_report_message_1,
  	empty_link_element_report_message_2: empty_link_element_report_message_2,
  	empty_link_element_report_message_3: empty_link_element_report_message_3,
  	empty_link_element_additional_message: empty_link_element_additional_message,
  	links_same_content_different_url_report_message: links_same_content_different_url_report_message,
  	aria_labelledby_association_report_message_1: aria_labelledby_association_report_message_1,
  	aria_labelledby_association_report_message_2: aria_labelledby_association_report_message_2,
  	click_verb_report_message: click_verb_report_message,
  	empty_heading_report_message: empty_heading_report_message,
  	no_headings_report_message: no_headings_report_message,
  	html_lang_attr_report_message_1: html_lang_attr_report_message_1,
  	html_lang_attr_report_message_2: html_lang_attr_report_message_2,
  	html_lang_attr_report_message_3: html_lang_attr_report_message_3,
  	title_for_abbr_report_message_1: title_for_abbr_report_message_1,
  	title_for_abbr_report_message_2: title_for_abbr_report_message_2,
  	font_style_italic_report_message: font_style_italic_report_message,
  	missing_submit_button_report_message_1: missing_submit_button_report_message_1,
  	missing_submit_button_report_message_2: missing_submit_button_report_message_2,
  	missing_submit_button_report_message_3: missing_submit_button_report_message_3,
  	links_new_window_mark_report_message: links_new_window_mark_report_message,
  	label_visually_hidden_only_report_message: label_visually_hidden_only_report_message,
  	missing_label_report_message_1: missing_label_report_message_1,
  	missing_label_report_message_2: missing_label_report_message_2,
  	missing_label_report_message_3: missing_label_report_message_3,
  	legend_first_child_of_fieldset_report_message_1: legend_first_child_of_fieldset_report_message_1,
  	legend_first_child_of_fieldset_report_message_2: legend_first_child_of_fieldset_report_message_2,
  	duplicated_id_attribute_report_message: duplicated_id_attribute_report_message,
  	title_iframe_report_message_1: title_iframe_report_message_1,
  	title_iframe_report_message_2: title_iframe_report_message_2,
  	select_initial_option_report_message: select_initial_option_report_message,
  	position_sticky_report_message: position_sticky_report_message,
  	position_sticky_context_inline_report_message: position_sticky_context_inline_report_message,
  	position_sticky_context_css_report_message: position_sticky_context_css_report_message,
  	position_sticky_embeded_inline_1: position_sticky_embeded_inline_1,
  	position_sticky_embeded_inline_2: position_sticky_embeded_inline_2,
  	motion_actuation_report_message_1: motion_actuation_report_message_1,
  	text_color_convey_information_report_message: text_color_convey_information_report_message,
  	audio_video_captions_report_message: audio_video_captions_report_message,
  	video_audio_descriptions_report_message: video_audio_descriptions_report_message,
  	aslint: aslint,
  	incorrect_label_placement_for_associated_input_report_message: incorrect_label_placement_for_associated_input_report_message,
  	color_contrast_state_pseudo_classes_report_message_1: color_contrast_state_pseudo_classes_report_message_1,
  	color_contrast_state_pseudo_classes_report_message_2: color_contrast_state_pseudo_classes_report_message_2,
  	color_contrast_state_pseudo_classes_report_message_3: color_contrast_state_pseudo_classes_report_message_3,
  	color_contrast_state_pseudo_classes_report_message_4: color_contrast_state_pseudo_classes_report_message_4,
  	color_contrast_state_pseudo_classes_report_message_css_failed_to_load: color_contrast_state_pseudo_classes_report_message_css_failed_to_load,
  	color_contrast_state_pseudo_classes_warning_message: color_contrast_state_pseudo_classes_warning_message,
  	skip_reason_excluded_from_scanning: skip_reason_excluded_from_scanning,
  	skip_reason_hidden_option: skip_reason_hidden_option,
  	skip_reason_styles_cant_be_determined: skip_reason_styles_cant_be_determined,
  	skip_reason_specified_styles_cant_be_determined: skip_reason_specified_styles_cant_be_determined
  };

  const Translations = {
      [english._config.locale]: english
  };
  const DefaultLocale = english._config.locale;

  const TRANSLATIONS_VALUE_PLACEHOLDER = '%';
  class TranslateService {
      constructor() { }
      static setCurrentLocale(locale) {
          if (typeof Translations[locale] !== 'undefined') {
              TranslateService.currentLocale = locale;
          }
      }
      static getCurrentLocale() {
          return TranslateService.currentLocale;
      }
      static translate(key) {
          const _currentLocale = this.getCurrentLocale();
          if (Translations[_currentLocale] && Translations[_currentLocale][key]) {
              return Translations[_currentLocale][key];
          }
          console.warn(`Key not translated at all: ${key}`);
          return key;
      }
      static replace(translation, words = '') {
          const values = Array.isArray(words) ? words : [words];
          return TextUtility.replacePlaceholder(translation, values, TRANSLATIONS_VALUE_PLACEHOLDER);
      }
      static instant(key, words) {
          const translation = this.translate(key);
          let _words = '';
          if (Array.isArray(words)) {
              _words = words.map(this.convertToStrings.bind(this));
          }
          else if (typeof words === 'number') {
              _words = String(words);
          }
          else if (typeof words === 'string') {
              _words = words;
          }
          if (_words.length === 0) {
              return translation;
          }
          return this.replace(translation, _words);
      }
  }
  TranslateService.currentLocale = DefaultLocale;
  TranslateService.convertToStrings = (value) => {
      return String(value);
  };

  var CATEGORY_TYPE;
  (function (CATEGORY_TYPE) {
      CATEGORY_TYPE["BEST_PRACTICE"] = "Best-Practice";
      CATEGORY_TYPE["WCAG_A"] = "WCAG-A";
      CATEGORY_TYPE["WCAG_AA"] = "WCAG-AA";
      CATEGORY_TYPE["WCAG_AAA"] = "WCAG-AAA";
  })(CATEGORY_TYPE || (CATEGORY_TYPE = {}));

  class AbstractRule {
      constructor() {
          this.validator = Validator;
          this.selector = 'html';
          this.context = document.documentElement;
      }
      collectElements() {
          if (typeof this.selector === 'undefined') {
              throw new Error(`[AbstractRule] The selector must be a string or function, but there is type of ${typeof this.selector}`);
          }
          if (typeof this.selector === 'function') {
              return this.selector();
          }
          return DomUtility.querySelectorAllExclude(this.selector, this.context, Config.excludeContainers, []);
      }
      get config() {
          return this.ruleConfig;
      }
      get id() {
          return this.config.id;
      }
      async run(context, validator, options) {
          this.context = context;
          this.options = (typeof options === 'object') ? options : {};
          this.validator = (typeof validator !== 'undefined') ? validator : Validator;
          let nodes = this.collectElements();
          const totalElementsEvaluated = nodes === null ? 0 : nodes.length;
          this.validator.setTotalElementsEvaluated(this.ruleConfig.id, totalElementsEvaluated);
          const getFilter = (filter) => {
              nodes = filter(this.ruleConfig.id, nodes);
          };
          Config.getFilters('before-rule-validate').forEach(getFilter);
          this.validate(nodes);
      }
      registerValidator() {
          this.validator.register(this.ruleConfig, this.run.bind(this));
      }
  }

  class AriaHiddenFalse extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'body [aria-hidden="false"]';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.aria_hidden_false),
              links: [],
              recommendations: [],
              severity: $severity.low,
              type: CATEGORY_TYPE.BEST_PRACTICE
          };
      }
      validate(elements) {
          const reportProblem = (element) => {
              const reportMessage = TranslateService.instant('aria_hidden_false_report_message', [TextUtility.escape('aria-hidden="false"'), TextUtility.escape('display: none')]);
              const problem = {
                  message: reportMessage,
                  node: element,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(problem);
          };
          elements.forEach(reportProblem);
      }
  }

  class EmptyLabelElement extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'label';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.empty_label_element),
              links: [
                  {
                      content: 'H44: Using label elements to associate text labels with form controls',
                      url: 'http://www.w3.org/TR/WCAG20-TECHS/H44.html'
                  }
              ],
              recommendations: [],
              severity: $severity.low,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(labelElements) {
          const reportEmptyLabel = (label) => {
              const content = DomUtility.nodesToText(label);
              const contentLength = content.length;
              if (contentLength === 0) {
                  const report = {
                      message: TranslateService.instant('empty_label_element_report_message', [DomUtility.getEscapedOuterHTML(label)]),
                      node: label,
                      ruleId: this.ruleConfig.id
                  };
                  this.validator.report(report);
              }
          };
          labelElements.forEach(reportEmptyLabel);
      }
  }

  class ColorContrastA2 extends AbstractRule {
      constructor() {
          super(...arguments);
          this.appConfig = Config.getInstance();
          this.selector = `*${[
            ':root',
            'head',
            'body',
            'title',
            'style',
            'script',
            'noscript',
            'meta',
            'link',
            'br',
            'hr',
            'object',
            'path',
            'g',
            'linearGradient',
            'stop',
            'desc',
            'filter',
            'img',
            'input',
            'iframe',
            'code',
            'defs',
            ':empty'
        ].map((i) => {
            return `:not(${i})`;
        }).join('')}`;
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.color_contrast_aa),
              links: [
                  {
                      content: 'Technique G18: Ensuring that a contrast ratio of at least 4.5:1 exists between text (and images of text) and background behind the text',
                      url: 'http://www.w3.org/TR/WCAG20-TECHS/G18'
                  }
              ],
              recommendations: [],
              severity: $severity.critical,
              type: CATEGORY_TYPE.WCAG_AA
          };
      }
      elementShouldBeSkipped(element, styles) {
          let elementShouldBeSkipped = true;
          if (element.hasChildNodes() === false) {
              return elementShouldBeSkipped;
          }
          if (['fixed', 'sticky'].includes(styles.position)) {
              return elementShouldBeSkipped;
          }
          if (Css.getElementBackgroundImage(element, true) !== null) {
              return elementShouldBeSkipped;
          }
          const determinedBackgroundColor = Css.getBackgroundColor(element);
          if (determinedBackgroundColor === null) {
              return elementShouldBeSkipped;
          }
          if (determinedBackgroundColor.toName() === 'transparent') {
              return elementShouldBeSkipped;
          }
          if (determinedBackgroundColor.toHex() === new TinyColor(styles.color).toHex()) {
              return elementShouldBeSkipped;
          }
          if (determinedBackgroundColor.getAlpha() < 1) {
              return elementShouldBeSkipped;
          }
          if (DomUtility.hasElementSemiOpacity(element, styles)) {
              return elementShouldBeSkipped;
          }
          const elementStyleBackgroundColor = Css.getStyle(element, 'background-color');
          let elementBackgroundColor;
          if (elementStyleBackgroundColor === null) {
              elementBackgroundColor = new TinyColor('transparent');
          }
          else {
              elementBackgroundColor = new TinyColor(elementStyleBackgroundColor);
          }
          if (elementBackgroundColor.toName() !== 'transparent' && DomUtility.hasElementSemiTransparentBackground(element, styles)) {
              return elementShouldBeSkipped;
          }
          if (this.appConfig.get($runnerSettings.includeHidden)) {
              elementShouldBeSkipped = false;
              return elementShouldBeSkipped;
          }
          if (DomUtility.isElementVisible(element) === false) {
              return elementShouldBeSkipped;
          }
          return false;
      }
      validate(htmlElements) {
          const checkColorContrast = (element) => {
              if (element.hasChildNodes() === false || DomUtility.hasDirectTextDescendant(element) === false || DomUtility.getTextFromDescendantContent(element).trim().length === 0) {
                  return;
              }
              const report = {
                  message: '',
                  node: element,
                  ruleId: this.ruleConfig.id
              };
              const styles = Css.getComputedStyle(element);
              if (styles === null) {
                  report.message = TranslateService.instant('skip_reason_styles_cant_be_determined');
                  report.skipReason = $auditRuleNodeSkipReason.stylesCantBeDetermined;
                  this.validator.report(report);
                  return;
              }
              if (this.elementShouldBeSkipped(element, styles)) {
                  report.message = TranslateService.instant('skip_reason_excluded_from_scanning');
                  report.skipReason = $auditRuleNodeSkipReason.excludedFromScanning;
                  this.validator.report(report);
                  return;
              }
              let warningBackgroundImageMessage = '';
              const isElementVisible = DomUtility.isElementVisible(element);
              const noteAboutVisibility = TranslateService.instant('color_contrast_aa_note_about_visibility');
              let bgColor = new TinyColor(styles.backgroundColor);
              const fgColor = new TinyColor(styles.color);
              if (bgColor.toName() === 'transparent') {
                  const bgColorParent = Css.getBackgroundColor(element);
                  if (bgColorParent === null) {
                      const bodyStyle = Css.getComputedStyle(document.body);
                      if (bodyStyle !== null) {
                          bgColor = new TinyColor(bodyStyle.backgroundColor);
                          if (bgColor.toName() === 'transparent') {
                              report.message = TranslateService.instant('color_contrast_aa_report_message_2', [`${fgColor.toHexString()}`, `${DomUtility.getEscapedOuterHTML(document.body)}`]);
                              report.contrastData = {
                                  contrastBackground: bgColor.toName() === 'transparent' ? 'transparent' : bgColor.toHexString(),
                                  contrastColor: fgColor.toName() === 'transparent' ? 'transparent' : bgColor.toHexString(),
                                  contrastRatio: '0'
                              };
                              this.validator.report(report);
                              return;
                          }
                      }
                  }
                  else {
                      bgColor = bgColorParent;
                  }
              }
              fgColor.setAlpha(styles.opacity);
              const contrastRatio = String(parseFloat(readability(bgColor, fgColor).toFixed(2)));
              const backgroundImage = Css.getStyle(element, 'background-image');
              const originalFontSize = Css.getStyle(element, 'font-size');
              if (originalFontSize === null) {
                  report.message = TranslateService.instant('skip_reason_specified_styles_cant_be_determined', ['font-size']);
                  report.skipReason = $auditRuleNodeSkipReason.specifiedStylesCantBeDetermined;
                  this.validator.report(report);
                  return;
              }
              const fontSizeInPt = Css.covertPxToPt(originalFontSize, true);
              const fontWeight = Css.getStyle(element, 'font-weight');
              if (typeof backgroundImage !== 'string' || ['', 'none'].includes(backgroundImage.trim()) === false) {
                  warningBackgroundImageMessage = TranslateService.instant('color_contrast_aa_warning_message');
              }
              if (Css.isLargeText(element)) {
                  const isReadableLargeSize = isReadable(bgColor, fgColor, {
                      level: 'AA',
                      size: 'large'
                  });
                  if (isReadableLargeSize === false) {
                      report.message = TranslateService.instant('color_contrast_aa_report_message_4', [`${contrastRatio}`, `${bgColor.toHexString()}`, `${fgColor.toHexString()}`, `${fontSizeInPt}pt`, `${originalFontSize}`, fontWeight ? fontWeight : '', `${warningBackgroundImageMessage}`]) + (isElementVisible === false ? ` ${noteAboutVisibility}` : '');
                      report.contrastData = {
                          contrastBackground: bgColor.toHexString(),
                          contrastColor: fgColor.toHexString()
                      };
                      this.validator.report(report);
                      return;
                  }
              }
              const isReadableSmallSize = isReadable(bgColor, fgColor, {
                  level: 'AA',
                  size: 'small'
              });
              if (isReadableSmallSize === false) {
                  report.message = TranslateService.instant('color_contrast_aa_report_message_5', [`${contrastRatio}`, `${bgColor.toHexString()}`, `${fgColor.toHexString()}`, `${fontSizeInPt}pt`, `${originalFontSize}`, fontWeight ? fontWeight : '', `${warningBackgroundImageMessage}`]) + (isElementVisible === false ? ` ${noteAboutVisibility}` : '');
                  report.contrastData = {
                      contrastBackground: bgColor.toHexString(),
                      contrastColor: fgColor.toHexString()
                  };
                  this.validator.report(report);
                  return;
              }
          };
          htmlElements.forEach(checkColorContrast);
      }
  }

  const SKIP_ELEMENTS = `${[
    ':root',
    'head',
    'body',
    'title',
    'style',
    'script',
    'noscript',
    'meta',
    'link',
    'br',
    'hr',
    'object',
    'path',
    'g',
    'linearGradient',
    'stop',
    'desc',
    'filter',
    'img',
    'input',
    'iframe',
    'code',
    'defs',
    ':empty'
].map((i) => {
    return `:not(${i})`;
}).join('')}`;
  class ColorContrastStatePseudoClassesAbstract extends AbstractRule {
      constructor(pseudo) {
          super();
          this.cssId = `aslintSimulatedStyle_${(Math.random() * 999999999).toFixed(0)}`;
          this.styles = [];
          this.appConfig = Config.getInstance();
          this.pseudo = pseudo;
          this.selector = `${this.pseudoClassSelector},${SKIP_ELEMENTS}`;
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes(this.pseudo),
              links: [
                  {
                      content: 'Technique G18: Ensuring that a contrast ratio of at least 4.5:1 exists between text (and images of text) and background behind the text',
                      url: 'http://www.w3.org/TR/WCAG20-TECHS/G18'
                  }
              ],
              recommendations: [],
              severity: $severity.low,
              type: CATEGORY_TYPE.WCAG_AA
          };
          this.pattern = new RegExp(`\\:(${this.pseudoClass})`);
      }
      get pseudoClass() {
          switch (this.pseudo) {
              case $accessibilityAuditRules.color_contrast_state_pseudo_classes_active:
                  return 'active';
              case $accessibilityAuditRules.color_contrast_state_pseudo_classes_focus:
                  return 'focus';
              case $accessibilityAuditRules.color_contrast_state_pseudo_classes_hover:
                  return 'hover';
              default:
                  console.warn('[ColorContrastStatePseudoClassesAbstract.pseudoClass] pseudo definition not specified. Got ', this.pseudo);
                  return '';
          }
      }
      get pseudoClassSelector() {
          switch (this.pseudoClass) {
              case 'focus':
              case 'hover':
                  return '*';
              case 'active':
                  return 'a,button';
              default:
                  console.warn('[ColorContrastStatePseudoClassesAbstract.pseudoClassSelector] pseudoClass definition not specified. Got ', this.pseudoClass);
                  return '';
          }
      }
      insertStyleSheet(styleContent) {
          const copyStyle = DomUtility.createCSS(styleContent);
          const sheet = copyStyle.sheet;
          if (sheet === null) {
              console.warn('[ColorContrastStatePseudoClassesAbstract.insertStyleSheet] Tried to insert styleContent for non-existing element', styleContent);
              return;
          }
          for (let i = 0, len = sheet.cssRules.length; i < len; i += 1) {
              if (sheet.cssRules[i] instanceof CSSStyleRule) {
                  const rule = sheet.cssRules[i];
                  if (rule.selectorText.match(this.pattern)) {
                      this.styles.push(rule);
                  }
              }
          }
          document.head.removeChild(copyStyle);
      }
      async loadStyleSheets() {
          const handleError = (styleSheet, response, error) => {
              const report = {
                  message: TranslateService.instant('color_contrast_state_pseudo_classes_report_message_css_failed_to_load', [
                      styleSheet.href,
                      response.status,
                      error
                  ]),
                  node: ObjectUtility.isHtmlElement(styleSheet.ownerNode) ? styleSheet.ownerNode : null,
                  ruleId: this.ruleConfig.id,
                  skipReason: $auditRuleNodeSkipReason.unableToLoadStyleSheet
              };
              this.validator.report(report);
          };
          const handleResponse = async (styleSheet, res) => {
              if (res.status >= 200 || res.status < 400) {
                  this.insertStyleSheet(await res.text());
                  return;
              }
              handleError(styleSheet, res, res.statusText);
          };
          const styleSheetsLength = document.styleSheets.length;
          const getCssText = (cssRule) => {
              return cssRule.cssText;
          };
          for (let i = 0; i < styleSheetsLength; i += 1) {
              const styleSheet = document.styleSheets[i];
              if (typeof styleSheet.href === 'undefined' || styleSheet.href === null || styleSheet.href.length === 0) {
                  if (styleSheet.ownerNode &&
                      styleSheet.ownerNode.nodeName &&
                      styleSheet.ownerNode.nodeName.toLowerCase() === 'style' &&
                      styleSheet.ownerNode.firstChild &&
                      typeof styleSheet.ownerNode.firstChild.textContent === 'string') {
                      this.insertStyleSheet(styleSheet.ownerNode.firstChild.textContent);
                  }
                  else if (Env.isTest) {
                      this.insertStyleSheet(Array.from(styleSheet.cssRules).map(getCssText)
                          .join(' '));
                  }
              }
              else if (typeof window.fetch === 'function') {
                  let response = {
                      status: 400
                  };
                  try {
                      response = await window.fetch(styleSheet.href, {
                          mode: 'no-cors'
                      });
                      handleResponse(styleSheet, response);
                  }
                  catch (e) {
                      handleError(styleSheet, response, e);
                  }
              }
          }
      }
      startPseudoClassSimulation() {
          let style = '';
          const activePseudoClass = this.pseudoClass;
          for (const cssStyleRule of this.styles) {
              if (cssStyleRule.selectorText.includes(`:${activePseudoClass}`)) {
                  style += `${cssStyleRule.cssText.replace(new RegExp(`:${activePseudoClass}`, 'g'), '')}\n`;
              }
          }
          DomUtility.createCSS(style, this.cssId);
      }
      stopPseudoClassSimulation() {
          const element = document.getElementById(this.cssId);
          if (element === null) {
              return;
          }
          element.remove();
      }
      elementShouldBeSkipped(element, styles) {
          let elementShouldBeSkipped = true;
          if (element.hasChildNodes() === false) {
              return elementShouldBeSkipped;
          }
          if (['fixed', 'sticky'].includes(styles.position)) {
              return elementShouldBeSkipped;
          }
          if (Css.getElementBackgroundImage(element, true) !== null) {
              return elementShouldBeSkipped;
          }
          const determinedBackgroundColor = Css.getBackgroundColor(element);
          if (determinedBackgroundColor === null) {
              return elementShouldBeSkipped;
          }
          if (determinedBackgroundColor.toName() === 'transparent') {
              return elementShouldBeSkipped;
          }
          if (determinedBackgroundColor.toHex() === new TinyColor(styles.color).toHex()) {
              return elementShouldBeSkipped;
          }
          if (determinedBackgroundColor.getAlpha() < 1) {
              return elementShouldBeSkipped;
          }
          if (DomUtility.hasElementSemiOpacity(element, styles)) {
              return elementShouldBeSkipped;
          }
          const elementStyleBackgroundColor = Css.getStyle(element, 'background-color');
          let elementBackgroundColor;
          if (elementStyleBackgroundColor === null) {
              elementBackgroundColor = new TinyColor('transparent');
          }
          else {
              elementBackgroundColor = new TinyColor(elementStyleBackgroundColor);
          }
          if (elementBackgroundColor.toName() !== 'transparent' && DomUtility.hasElementSemiTransparentBackground(element, styles)) {
              return elementShouldBeSkipped;
          }
          if (this.appConfig.get($runnerSettings.includeHidden)) {
              elementShouldBeSkipped = false;
              return elementShouldBeSkipped;
          }
          if (DomUtility.isElementVisible(element) === false) {
              return elementShouldBeSkipped;
          }
          return false;
      }
      static getSkippedElements(elements) {
          const findElement = (item) => {
              return `:not(${item})`;
          };
          return elements.map(findElement).join('');
      }
      validate(nodes) {
          const checkColorContrast = (element) => {
              let bgColor;
              let warningBackgroundImageMessage = '';
              if (DomUtility.hasDirectTextDescendant(element) === false) {
                  return;
              }
              const styles = Css.getComputedStyle(element);
              if (styles === null) {
                  return;
              }
              if (this.elementShouldBeSkipped(element, styles)) {
                  this.validator.report({
                      message: '',
                      node: element,
                      ruleId: this.ruleConfig.id,
                      skipReason: $auditRuleNodeSkipReason.excludedFromScanning
                  });
                  return;
              }
              const report = {
                  message: '',
                  node: element,
                  ruleId: this.ruleConfig.id
              };
              if (styles.position === 'fixed') {
                  report.message = TranslateService.instant('color_contrast_state_pseudo_classes_report_message_1');
                  this.validator.report(report);
                  return;
              }
              bgColor = new TinyColor(styles.backgroundColor);
              const fgColor = new TinyColor(styles.color);
              if (bgColor.toName() === 'transparent') {
                  const bgColorParent = Css.getBackgroundColor(element);
                  if (bgColorParent === null) {
                      const bodyStyle = Css.getComputedStyle(document.body);
                      bgColor = new TinyColor(bodyStyle.backgroundColor);
                      if (bgColor.toName() === 'transparent') {
                          report.message = TranslateService.instant('color_contrast_state_pseudo_classes_report_message_2', [
                              this.pseudoClass || '(undefined)',
                              `${DomUtility.getEscapedOuterHTML(document.body)}`
                          ]);
                          this.validator.report(report);
                          return;
                      }
                  }
                  else {
                      bgColor = bgColorParent;
                  }
              }
              fgColor.setAlpha(styles.opacity);
              const ratio = String(parseFloat(readability(bgColor, fgColor).toFixed(2)));
              const backgroundImage = Css.getStyle(element, 'background-image');
              const styleFontSize = Css.getStyle(element, 'font-size');
              const fontSize = styleFontSize ? Css.covertPxToPt(styleFontSize, true) : 10;
              const fontWeight = Css.getStyle(element, 'font-weight');
              if (typeof backgroundImage !== 'string' || ['', 'none'].includes(backgroundImage.trim()) === false) {
                  warningBackgroundImageMessage = TranslateService.instant('color_contrast_state_pseudo_classes_warning_message');
              }
              if (Css.isLargeText(element)) {
                  const isReadableLargeSize = isReadable(bgColor, fgColor, {
                      level: 'AA',
                      size: 'large'
                  });
                  if (isReadableLargeSize === false) {
                      report.message = TranslateService.instant('color_contrast_state_pseudo_classes_report_message_3', [
                          this.pseudoClass || '(undefined)',
                          `${ratio}`,
                          `${bgColor.toHexString()}`,
                          `${fgColor.toHexString()}`,
                          `${fontSize}`,
                          fontWeight ? fontWeight : '',
                          `${warningBackgroundImageMessage}`
                      ]);
                      report.contrastData = {
                          contrastBackground: bgColor.toHexString(),
                          contrastColor: fgColor.toHexString()
                      };
                      this.validator.report(report);
                  }
              }
              else {
                  const isReadableSmallSize = isReadable(bgColor, fgColor, {
                      level: 'AA',
                      size: 'small'
                  });
                  if (isReadableSmallSize === false) {
                      report.message = TranslateService.instant('color_contrast_state_pseudo_classes_report_message_4', [
                          this.pseudoClass || '(undefined)',
                          `${ratio}`,
                          `${bgColor.toHexString()}`,
                          `${fgColor.toHexString()}`,
                          `${fontSize}`,
                          fontWeight ? fontWeight : '',
                          `${warningBackgroundImageMessage}`
                      ]);
                      report.contrastData = {
                          contrastBackground: bgColor.toHexString(),
                          contrastColor: fgColor.toHexString()
                      };
                      this.validator.report(report);
                  }
              }
          };
          nodes.forEach(checkColorContrast);
      }
      async run(context, validator, options) {
          await this.loadStyleSheets();
          this.startPseudoClassSimulation();
          await super.run(context, validator, options);
          this.stopPseudoClassSimulation();
      }
  }

  class ColorContrastStatePseudoClassesActive extends ColorContrastStatePseudoClassesAbstract {
      constructor() {
          super($accessibilityAuditRules.color_contrast_state_pseudo_classes_active);
      }
  }

  class ColorContrastStatePseudoClassesFocus extends ColorContrastStatePseudoClassesAbstract {
      constructor() {
          super($accessibilityAuditRules.color_contrast_state_pseudo_classes_focus);
      }
  }

  class ColorContrastStatePseudoClassesHover extends ColorContrastStatePseudoClassesAbstract {
      constructor() {
          super($accessibilityAuditRules.color_contrast_state_pseudo_classes_hover);
      }
  }

  class ColorContrastA3 extends AbstractRule {
      constructor() {
          super(...arguments);
          this.appConfig = Config.getInstance();
          this.selector = `*${[
            ':root',
            'head',
            'body',
            'title',
            'style',
            'script',
            'noscript',
            'meta',
            'link',
            'br',
            'hr',
            'object',
            'path',
            'g',
            'linearGradient',
            'stop',
            'desc',
            'filter',
            'img',
            'input',
            'iframe',
            'code',
            'defs',
            ':empty'
        ].map((i) => {
            return `:not(${i})`;
        }).join('')}`;
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.color_contrast_aaa),
              links: [
                  {
                      content: 'Technique G17: Ensuring that a contrast ratio of at least 7:1 exists between text (and images of text) and background behind the text',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/G17.html'
                  }
              ],
              recommendations: [],
              severity: $severity.critical,
              type: CATEGORY_TYPE.WCAG_AAA
          };
      }
      elementShouldBeSkipped(element, styles) {
          let elementShouldBeSkipped = true;
          if (element.hasChildNodes() === false) {
              return elementShouldBeSkipped;
          }
          if (['fixed', 'sticky'].includes(styles.position)) {
              return elementShouldBeSkipped;
          }
          if (Css.getElementBackgroundImage(element, true) !== null) {
              return elementShouldBeSkipped;
          }
          const determinedBackgroundColor = Css.getBackgroundColor(element);
          if (determinedBackgroundColor === null) {
              return elementShouldBeSkipped;
          }
          if (determinedBackgroundColor.toName() === 'transparent') {
              return elementShouldBeSkipped;
          }
          if (determinedBackgroundColor.toHex() === new TinyColor(styles.color).toHex()) {
              return elementShouldBeSkipped;
          }
          if (determinedBackgroundColor.getAlpha() < 1) {
              return elementShouldBeSkipped;
          }
          if (DomUtility.hasElementSemiOpacity(element, styles)) {
              return elementShouldBeSkipped;
          }
          const elementStyleBackgroundColor = Css.getStyle(element, 'background-color');
          let elementBackgroundColor;
          if (elementStyleBackgroundColor === null) {
              elementBackgroundColor = new TinyColor('transparent');
          }
          else {
              elementBackgroundColor = new TinyColor(elementStyleBackgroundColor);
          }
          if (elementBackgroundColor.toName() !== 'transparent' && DomUtility.hasElementSemiTransparentBackground(element, styles)) {
              return elementShouldBeSkipped;
          }
          if (this.appConfig.get($runnerSettings.includeHidden)) {
              elementShouldBeSkipped = false;
              return elementShouldBeSkipped;
          }
          if (DomUtility.isElementVisible(element) === false) {
              return elementShouldBeSkipped;
          }
          return false;
      }
      validate(nodes) {
          const checkColorContrast = (element) => {
              if (element.hasChildNodes() === false || DomUtility.hasDirectTextDescendant(element) === false || DomUtility.getTextFromDescendantContent(element).trim().length === 0) {
                  return;
              }
              const report = {
                  message: '',
                  node: element,
                  ruleId: this.ruleConfig.id
              };
              const styles = Css.getComputedStyle(element);
              if (styles === null) {
                  report.message = TranslateService.instant('skip_reason_styles_cant_be_determined');
                  report.skipReason = $auditRuleNodeSkipReason.stylesCantBeDetermined;
                  this.validator.report(report);
                  return;
              }
              if (this.elementShouldBeSkipped(element, styles)) {
                  report.message = TranslateService.instant('skip_reason_excluded_from_scanning');
                  report.skipReason = $auditRuleNodeSkipReason.excludedFromScanning;
                  this.validator.report(report);
                  return;
              }
              const isElementVisible = DomUtility.isElementVisible(element);
              const noteAboutVisibility = '<small>Note:</small> The element is possibly visually hidden and that state might be temporary. For example the lazy loading technique can be used and the element will be visible at some point.';
              let bgColor = new TinyColor(styles.backgroundColor);
              const fgColor = new TinyColor(styles.color);
              if (bgColor.toName() === 'transparent') {
                  const bgColorParent = Css.getBackgroundColor(element);
                  if (bgColorParent === null) {
                      const bodyStyle = Css.getComputedStyle(document.body);
                      if (bodyStyle !== null) {
                          bgColor = new TinyColor(bodyStyle.backgroundColor);
                          if (bgColor.toName() === 'transparent') {
                              report.message = TranslateService.instant('color_contrast_aaa_report_message_2', [`${fgColor.toHexString()}`, `${DomUtility.getEscapedOuterHTML(document.body)}`]);
                              report.contrastData = {
                                  contrastBackground: bgColor.toName() === 'transparent' ? 'transparent' : bgColor.toHexString(),
                                  contrastColor: fgColor.toName() === 'transparent' ? 'transparent' : bgColor.toHexString(),
                                  contrastRatio: '0'
                              };
                              this.validator.report(report);
                              return;
                          }
                      }
                  }
                  else {
                      bgColor = bgColorParent;
                  }
              }
              fgColor.setAlpha(styles.opacity);
              const originalFontSize = Css.getStyle(element, 'font-size');
              if (originalFontSize === null) {
                  report.message = TranslateService.instant('skip_reason_specified_styles_cant_be_determined', ['font-size']);
                  report.skipReason = $auditRuleNodeSkipReason.stylesCantBeDetermined;
                  this.validator.report(report);
                  return;
              }
              const fontSizeInPt = Css.covertPxToPt(originalFontSize, true);
              const fontWeight = Css.getStyle(element, 'font-weight');
              const contrastRatio = String(parseFloat(readability(bgColor, fgColor).toFixed(2)));
              if (Css.isLargeText(element)) {
                  const isReadableLargeSize = isReadable(bgColor, fgColor, {
                      level: 'AAA',
                      size: 'large'
                  });
                  if (isReadableLargeSize === true) {
                      return;
                  }
                  report.message = TranslateService.instant('color_contrast_aaa_report_message_3', [contrastRatio, bgColor.toHexString(), fgColor.toHexString(), `${fontSizeInPt}pt`, `${originalFontSize}`, fontWeight ? fontWeight : '']) + (isElementVisible === false ? ` ${noteAboutVisibility}` : '');
                  report.contrastData = {
                      contrastBackground: bgColor.toHexString(),
                      contrastColor: fgColor.toHexString()
                  };
                  this.validator.report(report);
                  return;
              }
              const isReadableSmallSize = isReadable(bgColor, fgColor, {
                  level: 'AAA',
                  size: 'small'
              });
              if (isReadableSmallSize) {
                  return;
              }
              report.message = TranslateService.instant('color_contrast_aaa_report_message_4', [
                  contrastRatio,
                  bgColor.toHexString(),
                  fgColor.toHexString(),
                  `${fontSizeInPt}pt`,
                  `${originalFontSize}`,
                  fontWeight ? fontWeight : '',
                  isElementVisible === false ? ` ${noteAboutVisibility}` : ''
              ]);
              report.contrastData = {
                  contrastBackground: bgColor.toHexString(),
                  contrastColor: fgColor.toHexString()
              };
              this.validator.report(report);
          };
          nodes.forEach(checkColorContrast);
      }
  }

  class CapitalLettersWords extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = `*${[
            ':root',
            'head',
            'style',
            'script',
            'noscript',
            'meta',
            'link',
            'br',
            'hr',
            'object',
            'svg',
            'path',
            'defs',
            'rect',
            'clippath',
            'use',
            'g',
            'b',
            'filter',
            'img',
            'picture',
            'input',
            'iframe',
            'code',
            'metadata',
            ':empty'
        ].map((i) => {
            return `:not(${i})`;
        }).join('')}`;
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.capital_letters_words),
              links: [
                  {
                      content: 'Dyslexia Font and Style Guide',
                      url: 'https://www.dyslexia-reading-well.com/dyslexia-font.html'
                  },
                  {
                      content: 'Typefaces for dyslexia',
                      url: 'https://bdatech.org/what-technology/typefaces-for-dyslexia/'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.BEST_PRACTICE
          };
      }
      validate(nodes) {
          const onlyWordsWithUpperCases = (word) => {
              return TextUtility.isUpperCase(word);
          };
          const processNode = (element) => {
              const report = {
                  message: '',
                  node: element,
                  ruleId: this.ruleConfig.id
              };
              let reportMessage = '';
              let words;
              let onlyWordsWithUpperCase = [];
              const text = DomUtility.getTextFromDescendantContent(element).trim();
              words = text.split(' ');
              if (text.length > 0 && words.length > 0) {
                  if (Css.isCssTextTransformUsed(element)) {
                      reportMessage = TranslateService.instant('capital_letters_words_report_message1', [text.toUpperCase()]);
                  }
                  else {
                      onlyWordsWithUpperCase = words.filter(onlyWordsWithUpperCases);
                      if (onlyWordsWithUpperCase.length > 1) {
                          reportMessage = TranslateService.instant('capital_letters_words_report_message2');
                      }
                  }
              }
              const titleAttribute = element.getAttribute('title');
              if (typeof titleAttribute === 'string' && titleAttribute.trim().length > 0) {
                  words = titleAttribute.split(' ');
                  onlyWordsWithUpperCase = words.filter(onlyWordsWithUpperCases);
                  if (onlyWordsWithUpperCase.length > 1) {
                      if (reportMessage.length === 0) {
                          reportMessage = TranslateService.instant('capital_letters_words_report_message3', [titleAttribute]);
                      }
                      else {
                          reportMessage = TranslateService.instant('capital_letters_words_report_message4', [titleAttribute]);
                      }
                  }
              }
              if (reportMessage.length === 0) {
                  return;
              }
              report.message = `${reportMessage} ${TranslateService.instant('capital_letters_words_report_explanation')}`;
              this.validator.report(report);
          };
          nodes.forEach(processNode);
      }
  }

  class ContentEditableMissingAttributes extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = '[contenteditable]';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.content_editable_missing_attributes),
              links: [],
              recommendations: [],
              severity: $severity.low,
              type: CATEGORY_TYPE.BEST_PRACTICE
          };
      }
      validate(elements) {
          const reportMissingAttributes = (element) => {
              let problem;
              const roleValue = element.getAttribute('role');
              if (roleValue !== 'textbox') {
                  const reportMessage = TranslateService.instant('content_editable_missing_attributes_report_message1', [DomUtility.getEscapedOuterHTML(element)]);
                  problem = {
                      message: reportMessage,
                      node: element,
                      ruleId: this.ruleConfig.id
                  };
                  this.validator.report(problem);
              }
              if (element.getAttribute('aria-multiline') === null) {
                  const reportMessage = TranslateService.instant('content_editable_missing_attributes_report_message2', [DomUtility.getEscapedOuterHTML(element)]);
                  problem = {
                      message: reportMessage,
                      node: element,
                      ruleId: this.ruleConfig.id
                  };
                  this.validator.report(problem);
              }
              if (element.getAttribute('aria-labelledby') === null && element.getAttribute('aria-label') === null) {
                  const reportMessage = TranslateService.instant('content_editable_missing_attributes_report_message3', [DomUtility.getEscapedOuterHTML(element)]);
                  problem = {
                      message: reportMessage,
                      node: element,
                      ruleId: this.ruleConfig.id
                  };
                  this.validator.report(problem);
              }
          };
          elements.forEach(reportMissingAttributes);
      }
  }

  class ContentinfoLandmarkOnlyOne extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = '[role="contentinfo"]';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.contentinfo_landmark_only_one),
              links: [
                  {
                      content: 'ARIA11: Using ARIA landmarks to identify regions of a page',
                      url: 'http://www.w3.org/TR/WCAG20-TECHS/ARIA11'
                  },
                  {
                      content: 'Accessible Rich Internet Applications (WAI-ARIA) 1.0 Specification: contentinfo role',
                      url: 'https://www.w3.org/TR/wai-aria/#contentinfo'
                  }
              ],
              recommendations: [],
              severity: $severity.low,
              type: CATEGORY_TYPE.BEST_PRACTICE
          };
      }
      validate(nodes) {
          const total = nodes.length;
          if (total > 1) {
              nodes.forEach((element) => {
                  const reportMessage = TranslateService.instant('contentinfo_landmark_only_one_report_message', [TextUtility.escape('role="contentinfo"'), total, '.']);
                  const report = {
                      message: reportMessage,
                      node: element,
                      ruleId: this.ruleConfig.id
                  };
                  this.validator.report(report);
              });
          }
      }
  }

  class ElementsNotAllowed extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = `head *${[
            ':not(base)',
            ':not(link)',
            ':not(meta)',
            ':not(script)',
            ':not(style)',
            ':not(title)',
            ':not(noscript)',
            ':not(template)'
        ].join('')}`;
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.elements_not_allowed_in_head),
              links: [],
              recommendations: [],
              severity: $severity.low,
              type: CATEGORY_TYPE.BEST_PRACTICE
          };
      }
      validate(elements) {
          const reportNode = (element) => {
              const reportMessage = TranslateService.instant('elements_not_allowed_in_head_report_message', [
                  DomUtility.getEscapedOuterHTML(element),
                  TextUtility.escape('<head>')
              ]);
              const report = {
                  message: reportMessage,
                  node: element,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(report);
          };
          elements.forEach(reportNode);
      }
  }

  class EmptyLinkElement extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'a, [role="link"]';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.empty_link_element),
              links: [
                  {
                      content: 'H30: Providing link text that describes the purpose of a link for anchor elements',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/H30.html'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(elements) {
          const reportEmptyLink = (element) => {
              const content = DomUtility.nodesToText(element);
              const reportMessage = [];
              const ariaHidden = element.getAttribute('aria-hidden');
              const ariaLabel = element.getAttribute('aria-label');
              const ariaLabelledBy = element.getAttribute('aria-labelledby');
              const reportIssue = {
                  message: '',
                  node: element,
                  ruleId: this.ruleConfig.id
              };
              if (typeof ariaHidden === 'string' && ariaHidden === 'true') {
                  return;
              }
              const contentTrimmed = TextUtility.safeTrim(content);
              if (content.length > 0 && TextUtility.containsOnlyWhiteSpaces(content)) {
                  reportMessage.push(TranslateService.instant('empty_link_element_report_message_1'));
              }
              else if (element.childNodes.length === 0 || content.length === 0) {
                  reportMessage.push(TranslateService.instant('empty_link_element_report_message_2'));
              }
              if (typeof ariaLabel === 'string' && ariaLabel.trim().length > 0) {
                  if (contentTrimmed.length === 0) {
                      reportMessage.push(TranslateService.instant('empty_link_element_report_message_3', [`aria-label="${ariaLabel}"`]));
                  }
              }
              if (typeof ariaLabelledBy === 'string') {
                  const ids = ariaLabelledBy.split(/\s+/);
                  const existingElements = (elementId) => {
                      return document.getElementById(elementId) === null;
                  };
                  const missingAssociatedElements = ids.filter(existingElements);
                  if (missingAssociatedElements.length > 0) {
                      reportMessage.push(TranslateService.instant('empty_link_element_additional_message', [ariaLabelledBy, missingAssociatedElements.join(' ')]));
                  }
              }
              if (reportMessage.length === 0) {
                  return;
              }
              reportIssue.message = reportMessage.join(' ');
              this.validator.report(reportIssue);
          };
          elements.forEach(reportEmptyLink);
      }
  }

  class EmptyTitleAttribute extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = `[title]${[
            ':not(img)',
            ':not(html)',
            ':not(head)',
            ':not(title)',
            ':not(body)',
            ':not(link)',
            ':not(meta)',
            ':not(title)',
            ':not(style)',
            ':not(script)',
            ':not(noscript)',
            ':not(iframe)',
            ':not(br)',
            ':not(hr)'
        ].join('')}`;
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.empty_title_attribute),
              links: [
                  {
                      content: 'H67: Using null alt text and no title attribute on img elements for images that AT should ignore',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/H67.html'
                  }
              ],
              recommendations: [],
              severity: $severity.low,
              type: CATEGORY_TYPE.BEST_PRACTICE
          };
      }
      validate(elements) {
          const reportEmptyTitle = (element) => {
              const titleAttribute = element.getAttribute('title');
              if (titleAttribute === null || titleAttribute.trim().length > 0) {
                  return;
              }
              const report = {
                  message: TranslateService.instant('empty_title_attribute_report_message'),
                  node: element,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(report);
          };
          elements.forEach(reportEmptyTitle);
      }
  }

  class FieldsetNoLegend extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'fieldset > :first-child:not(legend)';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.fieldset_no_legend),
              links: [
                  {
                      content: 'H71: Providing a description for groups of form controls using fieldset and legend elements',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/H71.html'
                  }
              ],
              recommendations: [],
              severity: $severity.low,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(elements) {
          const checkNode = (element) => {
              const findParentFieldset = DomUtility.getParentElement(element, 'fieldset');
              const report = {
                  message: TranslateService.instant('fieldset_no_legend_report_message', [TextUtility.escape(element.nodeName.toLowerCase()), DomUtility.getEscapedOuterTruncatedHTML(findParentFieldset)]),
                  node: element,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(report);
          };
          elements.forEach(checkNode);
      }
  }

  class FlashContent extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = '[classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"], embed[type="application/x-shockwave-flash"], object[type="application/x-shockwave-flash"]';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.flash_content),
              links: [],
              recommendations: [],
              severity: $severity.critical,
              type: CATEGORY_TYPE.BEST_PRACTICE
          };
      }
      validate(elements) {
          const reportFlash = (element) => {
              const problem = {
                  message: TranslateService.instant('flash_content_report_message'),
                  node: element,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(problem);
          };
          elements.forEach(reportFlash);
      }
  }

  class GroupElementsNameAttribute extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'input[name]:not([type="hidden"]):not([aria-hidden="true"])';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.group_elements_name_attribute),
              links: [
                  {
                      content: 'H71: Providing a description for groups of form controls using fieldset and legend elements',
                      url: 'http://www.w3.org/TR/2014/NOTE-WCAG20-TECHS-20140408/H71'
                  },
                  {
                      content: 'ARIA17: Using grouping roles to identify related form controls',
                      url: 'http://www.w3.org/TR/2014/NOTE-WCAG20-TECHS-20140408/ARIA17'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(inputElements) {
          const filteredNames = {};
          const sorted = {};
          const checkElement = (name) => {
              const fieldsetParent = DomUtility.getParentElement(filteredNames[name][0], 'fieldset');
              if (fieldsetParent !== null) {
                  return;
              }
              const reportIssue = (inputElement) => {
                  const report = {
                      message: TranslateService.instant('group_elements_name_attribute_report_message'),
                      node: inputElement,
                      ruleId: this.ruleConfig.id
                  };
                  this.validator.report(report);
              };
              filteredNames[name].forEach(reportIssue);
          };
          const saveAmountOfNames = (inputElement) => {
              const nameValue = inputElement.name;
              if (Object.prototype.hasOwnProperty.call(sorted, nameValue)) {
                  sorted[nameValue] += 1;
              }
              else {
                  sorted[nameValue] = 1;
              }
              return true;
          };
          const sortElements = (node) => {
              if (sorted[node.name] === 1) {
                  return false;
              }
              if (filteredNames[node.name] === undefined) {
                  filteredNames[node.name] = [];
              }
              filteredNames[node.name].push(node);
              return true;
          };
          inputElements.filter(saveAmountOfNames).forEach(sortElements);
          Object.keys(filteredNames).forEach(checkElement);
      }
  }

  class H1MustBe extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'h1';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.h1_must_be),
              links: [
                  {
                      content: 'Web Accessibility Tutorials: Headings',
                      url: 'https://www.w3.org/WAI/tutorials/page-structure/headings/'
                  }
              ],
              recommendations: [],
              severity: $severity.critical,
              type: CATEGORY_TYPE.BEST_PRACTICE
          };
      }
      validate(elements) {
          if (elements.length > 0) {
              return;
          }
          const report = {
              message: TranslateService.instant('h1_must_report_message'),
              node: null,
              ruleId: this.ruleConfig.id
          };
          this.validator.report(report);
      }
  }

  class HeadingsSiblingUnique extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'h1, h2, h3, h4, h5, h6';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.headings_sibling_unique),
              links: [
                  {
                      content: '2.4.6 Headings and Labels (Level AA, Primary Success Criterion)',
                      url: 'http://www.w3.org/TR/WCAG20/#navigation-mechanisms-descriptive'
                  },
                  {
                      content: 'G130: Providing descriptive headings',
                      url: 'http://www.w3.org/TR/WCAG20-TECHS/G130'
                  },
                  {
                      content: 'G141: Organizing a page using headings',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/G141.html'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.WCAG_AA
          };
      }
      validate(headings) {
          const checkForSiblings = (headingElement) => {
              const nextElementSibling = headingElement.nextElementSibling;
              if (nextElementSibling === null) {
                  return;
              }
              if (nextElementSibling.nodeName.toLowerCase() !== headingElement.nodeName.toLowerCase()) {
                  return;
              }
              const headingText = typeof headingElement.textContent === 'string' ? TextUtility.safeTrim(headingElement.textContent) : '';
              const nextElementSiblingText = typeof nextElementSibling.textContent === 'string' ? TextUtility.safeTrim(nextElementSibling.textContent) : '';
              if (TextUtility.areStringsTheSame(headingText, nextElementSiblingText) === false) {
                  return;
              }
              const report = {
                  message: TranslateService.instant('headings_sibling_unique_report_message', [headingElement.nodeName.toLowerCase(), nextElementSibling.textContent]),
                  node: headingElement,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(report);
          };
          headings.forEach(checkForSiblings);
      }
  }

  class HorizontalRule extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = `hr${[
            ':not([aria-hidden="true"])',
            ':not([role="presentation"])'
        ].join('')}`;
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.horizontal_rule),
              links: [],
              recommendations: [],
              severity: $severity.info,
              type: CATEGORY_TYPE.BEST_PRACTICE
          };
      }
      validate(elements) {
          const reportHR = (element) => {
              const reportMessage = TranslateService.instant('horizontal_rule_report_message', [TextUtility.escape('<hr>'), TextUtility.escape('<hr>'), TextUtility.escape('<div>'), TextUtility.escape('<hr>')]);
              const report = {
                  message: reportMessage,
                  node: element,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(report);
          };
          elements.forEach(reportHR);
      }
  }

  class IncorrectTechniqueForHidingContent extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = `*${[
            ':root',
            'head',
            'title',
            'style',
            'script',
            'noscript',
            'meta',
            'link',
            'br',
            'hr',
            'object',
            'path',
            'g',
            'desc',
            'filter',
            'img',
            'input',
            'iframe',
            'code',
            'defs',
            ':empty'
        ].map((i) => {
            return `:not(${i})`;
        }).join('')}`;
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.incorrect_technique_for_hiding_content),
              links: [
                  {
                      content: 'Hiding Content for Accessibility',
                      url: 'https://snook.ca/archives/html_and_css/hiding-content-for-accessibility'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.BEST_PRACTICE
          };
      }
      validate(elements) {
          if (ObjectUtility.isHostMethod(document, 'getSelection') === false && ObjectUtility.isHostMethod(document, 'createRange') === false) {
              return;
          }
          const reportNode = (element) => {
              const styles = Css.getComputedStyle(element);
              if (styles === null) {
                  return;
              }
              const textIndentValue = styles.getPropertyValue('text-indent');
              const indent = Number(textIndentValue.replace(/[^0-9]/g, ''));
              if (indent === 0) {
                  return;
              }
              const selection = document.getSelection();
              if (selection === null) {
                  return;
              }
              const range = document.createRange();
              range.selectNodeContents(element);
              selection.removeAllRanges();
              selection.addRange(range);
              for (let i = 0; i < selection.rangeCount; i += 1) {
                  if (DomUtility.isRangeOffPage(selection.getRangeAt(i))) {
                      const reportMessage = TranslateService.instant('incorrect_technique_for_hiding_content_report_message', [textIndentValue]);
                      const report = {
                          message: reportMessage,
                          node: element,
                          ruleId: this.ruleConfig.id
                      };
                      this.validator.report(report);
                      return;
                  }
              }
          };
          elements.forEach(reportNode);
      }
  }

  class IncorrectLabelPlacement extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'input[type="radio"],input[type="checkbox"]';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.incorrect_label_placement),
              links: [
                  {
                      content: 'H44: Using label elements to associate text labels with form controls',
                      url: 'http://www.w3.org/TR/WCAG20-TECHS/H44.html'
                  }
              ],
              recommendations: [],
              severity: $severity.low,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(inputElements) {
          const performRuleCheck = (inputElement) => {
              const parentElement = inputElement.parentElement;
              if (parentElement !== null &&
                  parentElement.tagName.toLowerCase() === 'label' &&
                  parentElement.getAttribute('for') === inputElement.id) {
                  return;
              }
              const inputLabel = this.context.querySelector(`label[for="${inputElement.id}"]`);
              if (inputLabel === null) {
                  return;
              }
              const successCode = Node.DOCUMENT_POSITION_FOLLOWING;
              let labelIsValid = (inputElement.compareDocumentPosition(inputLabel) & successCode) === successCode;
              if (labelIsValid) {
                  let afterInput = false;
                  const allNodes = document.getElementsByTagName('*');
                  for (const nodeId in allNodes) {
                      if (Object.prototype.hasOwnProperty.call(allNodes, nodeId) === false) {
                          continue;
                      }
                      const node = allNodes[nodeId];
                      if (afterInput === false) {
                          if (node === inputElement) {
                              afterInput = true;
                          }
                          continue;
                      }
                      if (node === inputLabel) {
                          labelIsValid = true;
                          break;
                      }
                      if ((typeof node.textContent === 'string' && node.textContent.trim()) !== (typeof inputLabel.textContent === 'string' && inputLabel.textContent.trim())) {
                          labelIsValid = false;
                          break;
                      }
                  }
              }
              if (labelIsValid) {
                  return;
              }
              const report = {
                  message: TranslateService.instant('incorrect_label_placement_for_associated_input_report_message'),
                  node: inputLabel,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(report);
          };
          inputElements.forEach(performRuleCheck);
      }
  }

  class InvalidAttributeDirValue extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = '[dir]:not([dir="rtl"]):not([dir="ltr"]):not([dir="auto"])';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.invalid_attribute_dir_value),
              links: [
                  {
                      content: 'H56: Using the dir attribute on an inline element to resolve problems with nested directional runs',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/H56.html'
                  }
              ],
              recommendations: [],
              severity: $severity.critical,
              type: CATEGORY_TYPE.BEST_PRACTICE
          };
      }
      validate(elements) {
          const checkValue = (element) => {
              const dirAttribute = element.getAttribute('dir');
              if (dirAttribute === null) {
                  return;
              }
              const reportMessage = TranslateService.instant('invalid_attribute_dir_value_report_message', [TextUtility.escape(dirAttribute)]);
              const report = {
                  message: reportMessage,
                  node: element,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(report);
          };
          elements.forEach(checkValue);
      }
  }

  class LabelDuplicatedContentTitle extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'label[title]';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.label_duplicated_content_title),
              links: [],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.BEST_PRACTICE
          };
      }
      validate(elements) {
          const checkLabel = (element) => {
              const labelContent = DomUtility.getText(element, true);
              const labelTitle = element.title;
              if (labelContent === labelTitle) {
                  const report = {
                      message: TranslateService.instant('label_duplicated_content_title_report_message'),
                      node: element,
                      ruleId: this.ruleConfig.id
                  };
                  this.validator.report(report);
              }
          };
          elements.forEach(checkLabel);
      }
  }

  class LabelImplicitlyAssociated extends AbstractRule {
      constructor() {
          super(...arguments);
          this.labelableElements = [
              'input',
              'meter',
              'output',
              'progress',
              'select',
              'textarea'
          ];
          this.selector = 'label';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.label_implicitly_associated),
              links: [
                  {
                      content: 'H44: Using label elements to associate text labels with form controls',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/H44.html'
                  }
              ],
              recommendations: [],
              severity: $severity.low,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(labelElements) {
          const checkLabelAssociation = (label) => {
              const forAttribute = label.getAttribute('for');
              const trimmedForValue = typeof forAttribute === 'string' ? TextUtility.safeTrim(forAttribute) : undefined;
              const labelableChildElements = label.querySelectorAll(this.labelableElements.join(','));
              if (labelableChildElements.length === 0 || labelableChildElements.length === 1 && (forAttribute === null || typeof forAttribute === 'string' && trimmedForValue.length > 0)) {
                  return;
              }
              let report;
              if (typeof forAttribute === 'string' && trimmedForValue.length === 0) {
                  report = {
                      message: TranslateService.instant('label_implicitly_associated_report_message_1', [DomUtility.getEscapedOuterHTML(label)]),
                      node: label,
                      ruleId: this.ruleConfig.id
                  };
              }
              else {
                  report = {
                      message: TranslateService.instant('label_implicitly_associated_report_message_2', [DomUtility.getEscapedOuterHTML(label)]),
                      node: label,
                      ruleId: this.ruleConfig.id
                  };
              }
              this.validator.report(report);
          };
          labelElements.forEach(checkLabelAssociation);
      }
  }

  class LabelInappropriateAssociation extends AbstractRule {
      constructor() {
          super(...arguments);
          this.labelableElements = [
              'input',
              'keygen',
              'meter',
              'output',
              'progress',
              'select',
              'textarea'
          ];
          this.selector = 'label';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.label_inappropriate_association),
              links: [
                  {
                      content: 'H44: Using label elements to associate text labels with form controls',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/H44.html'
                  }
              ],
              recommendations: [],
              severity: $severity.critical,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(labelElements) {
          const checkLabelAssociation = (label) => {
              const forAttribute = label.getAttribute('for');
              let report;
              if (forAttribute === null) {
                  return;
              }
              const associatedElement = document.getElementById(forAttribute);
              if (associatedElement === null) {
                  report = {
                      message: TranslateService.instant('label_inappropriate_association_report_message_1', [TextUtility.escape(`<label for="${forAttribute}">`)]),
                      node: label,
                      ruleId: this.ruleConfig.id
                  };
                  this.validator.report(report);
                  return;
              }
              if (this.labelableElements.indexOf(associatedElement.nodeName.toLowerCase()) === -1) {
                  report = {
                      message: TranslateService.instant('label_inappropriate_association_report_message_2', [TextUtility.escape(`<label for="${forAttribute}">`)]),
                      node: label,
                      ruleId: this.ruleConfig.id
                  };
                  this.validator.report(report);
              }
          };
          labelElements.forEach(checkLabelAssociation);
      }
  }

  class LabelVisuallyHiddenOnly extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'label[for]';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.label_visually_hidden_only),
              links: [
                  {
                      content: 'H44: Using label elements to associate text labels with form controls',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/H44.html'
                  }
              ],
              recommendations: [],
              severity: $severity.info,
              type: CATEGORY_TYPE.WCAG_AA
          };
      }
      validate(nodes) {
          const checkLabelVisibility = (label) => {
              if (DomUtility.isVisibleForAssistiveTechnologies(label) && DomUtility.isElementVisible(label) === false) {
                  const report = {
                      message: TranslateService.instant('label_visually_hidden_only_report_message', [TextUtility.escape('<label>')]),
                      node: label,
                      ruleId: this.ruleConfig.id
                  };
                  this.validator.report(report);
              }
          };
          nodes.forEach(checkLabelVisibility);
      }
  }

  class LegendFirstChildOfFieldSet extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'fieldset > :first-child';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.legend_first_child_of_fieldset),
              links: [
                  {
                      content: 'H71: Providing a description for groups of form controls using fieldset and legend elements',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/H71.html'
                  }
              ],
              recommendations: [],
              severity: $severity.low,
              type: CATEGORY_TYPE.WCAG_AA
          };
      }
      validate(elements) {
          const checkElement = (element) => {
              const report = {
                  message: '',
                  node: element,
                  ruleId: this.ruleConfig.id
              };
              if (element.nodeName.toLowerCase() !== 'legend') {
                  report.message = TranslateService.instant('legend_first_child_of_fieldset_report_message_1', [TextUtility.escape('<legend>'), TextUtility.escape('<fieldset>'), DomUtility.getEscapedOuterHTML(element)]);
                  this.validator.report(report);
                  return;
              }
              if (typeof element.textContent === 'string' && TextUtility.safeTrim(element.textContent).length === 0) {
                  report.message = TranslateService.instant('legend_first_child_of_fieldset_report_message_2', [TextUtility.escape('<legend>'), TextUtility.escape('<fieldset>'), DomUtility.getEscapedOuterHTML(element)]);
                  this.validator.report(report);
              }
          };
          elements.forEach(checkElement);
      }
  }

  class LinkButtonSpaceKey extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'a[role="button"]';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.link_button_space_key),
              links: [
                  {
                      content: 'SCR35: Making actions keyboard accessible by using the onclick event of anchors and buttons',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/SCR35'
                  }
              ],
              recommendations: [],
              severity: $severity.info,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(elements) {
          const reportNode = (element) => {
              const problem = {
                  message: TranslateService.instant('link_button_space_key_report_message', [TextUtility.escape('role="button"'), TextUtility.escape('<a>')]),
                  node: element,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(problem);
          };
          elements.forEach(reportNode);
      }
  }

  const UNCLEAR_LINK_PHRASES_ENGLISH = Object.freeze([
      'click here',
      'click this',
      'click to learn more',
      'continue reading',
      'continue',
      'download more information',
      'download',
      'go',
      'here',
      'information',
      'learn more',
      'more info',
      'more information',
      'more',
      'read more',
      'right here',
      'see how it works',
      'see more',
      'start',
      'tap here',
      'this'
  ]);

  class LinkWithUnclearPurpose extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'a:not(:empty)';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.link_with_unclear_purpose),
              links: [
                  {
                      content: 'G53: Identifying the purpose of a link using link text combined with the text of the enclosing sentence',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/G53.html'
                  },
                  {
                      content: 'G91: Providing link text that describes the purpose of a link',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/G91.html'
                  },
                  {
                      content: 'Understanding Success Criterion 2.4.9: Link Purpose (Link Only)',
                      url: 'https://www.w3.org/WAI/WCAG21/Understanding/link-purpose-link-only'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.BEST_PRACTICE
          };
      }
      validate(elements) {
          const processNode = (element) => {
              const text = DomUtility.getText(element, true)
                  .toLowerCase();
              if (text.length === 0) {
                  return;
              }
              const index = UNCLEAR_LINK_PHRASES_ENGLISH.indexOf(text);
              if (index === -1) {
                  return;
              }
              const nodeName = element.nodeName.toLowerCase();
              const report = {
                  message: '',
                  node: element,
                  ruleId: this.ruleConfig.id
              };
              if (nodeName === 'a') {
                  report.message = TranslateService.instant('link_with_unclear_purpose_report_message1', [text]);
              }
              else if (UNCLEAR_LINK_PHRASES_ENGLISH[index].length === text.length) {
                  report.message = TranslateService.instant('link_with_unclear_purpose_report_message2', [text]);
              }
              if (report.message.length === 0) {
                  return;
              }
              this.validator.report(report);
          };
          if (elements.length === 0) {
              return;
          }
          elements.forEach(processNode);
      }
  }

  class LinksLanguageDestination extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = () => {
              return Array.from(document.links);
          };
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.links_language_destination),
              links: [
                  {
                      content: 'Indicating the language of a link destination',
                      url: 'https://www.w3.org/International/questions/qa-link-lang'
                  }
              ],
              recommendations: [],
              severity: $severity.info,
              type: CATEGORY_TYPE.BEST_PRACTICE
          };
      }
      validate(links) {
          let baseURI;
          if (typeof document.baseURI === 'string') {
              baseURI = document.baseURI;
          }
          else {
              baseURI = document.URL || document.location.href;
          }
          const onlyIncludeExternalLinks = (link) => {
              if (link.hostname.length > 0 && link.href.length > 0) {
                  let baseHostname;
                  try {
                      const url = new URL(link.href, baseURI);
                      baseHostname = url.hostname;
                  }
                  catch (_) {
                      baseHostname = document.location.hostname;
                  }
                  return baseHostname !== window.location.hostname;
              }
              return false;
          };
          const externalLinks = links.filter(onlyIncludeExternalLinks);
          const reportIssue = (anchorElement) => {
              const reportMessage = TranslateService.instant('links_language_destination_report_message', [TextUtility.escape(anchorElement.href)]);
              const report = {
                  message: reportMessage,
                  node: anchorElement,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(report);
          };
          externalLinks.forEach(reportIssue);
      }
  }

  class LinksNewWindowMark extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'a';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.links_new_window_mark),
              links: [
                  {
                      content: 'G201: Giving users advanced warning when opening a new window',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/G201.html'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.WCAG_AAA
          };
      }
      validate(anchorElements) {
          const processAnchorElement = (anchorElement) => {
              if (typeof anchorElement.getAttribute('target') === 'string' && anchorElement.getAttribute('target') === '_blank') {
                  const report = {
                      message: TranslateService.instant('links_new_window_mark_report_message'),
                      node: anchorElement,
                      ruleId: this.ruleConfig.id
                  };
                  this.validator.report(report);
              }
          };
          anchorElements.forEach(processAnchorElement);
      }
  }

  class LinksSameContentDifferenceUrl extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'body a';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.links_same_content_different_url),
              links: [
                  {
                      content: 'H30: Providing link text that describes the purpose of a link for anchor elements',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/H30.html'
                  }
              ],
              recommendations: [],
              severity: $severity.info,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(nodes) {
          const links = nodes;
          const texts = new Map();
          const processLink = (anchorElement) => {
              const innerContent = DomUtility.getText(anchorElement, true, true);
              let anchors = texts.get(innerContent);
              if (typeof anchors === 'undefined') {
                  anchors = {};
              }
              anchors[anchorElement.href] = anchorElement;
              texts.set(innerContent, anchors);
          };
          const filterLinks = (anchors) => {
              const urls = Object.keys(anchors[1]);
              if (urls.length < 2) {
                  return;
              }
              const reportIssue = (url) => {
                  const report = {
                      message: TranslateService.instant('links_same_content_different_url_report_message'),
                      node: anchors[1][url],
                      ruleId: this.ruleConfig.id
                  };
                  this.validator.report(report);
              };
              urls.forEach(reportIssue);
          };
          if (links.length === 0) {
              return;
          }
          links.forEach(processLink);
          Array.from(texts).forEach(filterLinks);
      }
  }

  class MainElementOnlyOne extends AbstractRule {
      constructor() {
          super(...arguments);
          this.appConfig = Config.getInstance();
          this.selector = 'main';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.main_element_only_one),
              links: [
                  {
                      content: 'HTML/Elements/main',
                      url: 'https://www.w3.org/wiki/HTML/Elements/main#Point'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.BEST_PRACTICE
          };
      }
      elementShouldBeSkipped(element) {
          const styles = Css.getComputedStyle(element);
          const ariaHidden = DomUtility.getElementAttribute(element, 'aria-hidden');
          let elementShouldBeSkipped = true;
          if (ariaHidden && ariaHidden.value === 'true') {
              return elementShouldBeSkipped;
          }
          if (this.appConfig.get($runnerSettings.includeHidden)) {
              elementShouldBeSkipped = false;
              return elementShouldBeSkipped;
          }
          if (DomUtility.hasElementSemiOpacity(element, styles)) {
              return elementShouldBeSkipped;
          }
          return false;
      }
      validate(elements) {
          if (elements.length < 2) {
              return;
          }
          const checkForIssue = (element) => {
              if (this.elementShouldBeSkipped(element)) {
                  this.validator.report({
                      message: '',
                      node: element,
                      ruleId: this.ruleConfig.id,
                      skipReason: $auditRuleNodeSkipReason.excludedFromScanning
                  });
                  return;
              }
              const reportMessage = TranslateService.instant('main_element_only_one_report_message', [elements.length, TextUtility.escape('main')]);
              const report = {
                  message: reportMessage,
                  node: element,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(report);
          };
          elements.forEach(checkForIssue);
      }
  }

  class MainLandmarkMustBeTopLevel extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = '[role="main"]';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.main_landmark_must_be_top_level),
              links: [
                  {
                      content: 'Accessible Rich Internet Applications (WAI-ARIA) 1.0 Specification: main role',
                      url: 'http://www.w3.org/TR/wai-aria/roles#main'
                  },
                  {
                      content: 'ARIA11: Using ARIA landmarks to identify regions of a page',
                      url: 'http://www.w3.org/TR/WCAG20-TECHS/ARIA11'
                  },
                  {
                      content: 'HTML5: The MAIN element',
                      url: 'http://www.w3.org/TR/html5/sections.html#the-main-element'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.BEST_PRACTICE
          };
      }
      validate(elements) {
          let parent;
          let parentNodeWithRole = null;
          let role;
          const PARENT_ROLE_EXCEPTION = [
              'application',
              'document'
          ];
          if (elements.length === 0 || elements[0].parentElement === null) {
              return;
          }
          parent = elements[0].parentElement;
          while (parent && parent.getAttribute) {
              role = parent.getAttribute('role');
              if (typeof role === 'string' && PARENT_ROLE_EXCEPTION.indexOf(role) === -1) {
                  parentNodeWithRole = parent;
                  break;
              }
              parent = parent.parentElement;
          }
          if (parentNodeWithRole === null) {
              return;
          }
          const reportMessage = TranslateService.instant('main_landmark_must_be_top_level_report_message', [DomUtility.getEscapedOuterHTML(parentNodeWithRole)]);
          const report = {
              message: reportMessage,
              node: parentNodeWithRole,
              ruleId: this.ruleConfig.id
          };
          this.validator.report(report);
      }
  }

  class MinimumFontSize extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = `*${[
            ':root',
            'head',
            'title',
            'style',
            'script',
            'noscript',
            'meta',
            'link',
            'br',
            'hr',
            'object',
            'path',
            'g',
            'desc',
            'filter',
            'img',
            'input',
            'iframe',
            'code',
            'defs',
            ':empty'
        ].map((i) => {
            return `:not(${i})`;
        }).join('')}`;
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.minimum_font_size),
              links: [],
              recommendations: [],
              severity: $severity.info,
              type: CATEGORY_TYPE.BEST_PRACTICE
          };
      }
      validate(elements) {
          const checkFontSize = (element) => {
              if (DomUtility.hasDirectTextDescendant(element) === false) {
                  return;
              }
              const fontSizeStyle = Css.getStyle(element, 'font-size');
              if (fontSizeStyle === null) {
                  return;
              }
              const fontSize = parseInt(fontSizeStyle, 10);
              if (fontSize < 10) {
                  let report;
                  if (DomUtility.isElementVisible(element) === false) {
                      const reportMessage = TranslateService.instant('minimum_font_size_report_message_1', [fontSize]);
                      report = {
                          message: reportMessage,
                          node: element,
                          ruleId: this.ruleConfig.id
                      };
                  }
                  else {
                      const reportMessage = TranslateService.instant('minimum_font_size_report_message_2', [fontSize]);
                      report = {
                          message: reportMessage,
                          node: element,
                          ruleId: this.ruleConfig.id
                      };
                  }
                  this.validator.report(report);
              }
          };
          elements.forEach(checkFontSize);
      }
  }

  class MissingHrefOnA extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'a:not([href])';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.missing_href_on_a),
              links: [
                  {
                      content: 'F42: Failure of Success Criteria 1.3.1, 2.1.1, 2.1.3, or 4.1.2 when emulating links',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/F42.html'
                  }
              ],
              recommendations: [],
              severity: $severity.critical,
              type: CATEGORY_TYPE.BEST_PRACTICE
          };
      }
      validate(anchorElements) {
          const reportNodeWithoutHref = (anchorElement) => {
              const reportMessage = TranslateService.instant('missing_href_on_a_report_message', [TextUtility.escape('<a>')]);
              const report = {
                  message: reportMessage,
                  node: anchorElement,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(report);
          };
          anchorElements.forEach(reportNodeWithoutHref);
      }
  }

  class MissingLabel extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = [
              'input:not([type="hidden"]):not([type="submit"])',
              'meter',
              'output',
              'progress',
              'select',
              'textarea'
          ].join(',');
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.missing_label),
              links: [
                  {
                      content: 'H44: Using label elements to associate text labels with form controls',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/H44.html'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(elements) {
          const checkForLabel = (element) => {
              const nodeId = element.id;
              let report;
              if (nodeId.trim().length === 0) {
                  report = {
                      message: TranslateService.instant('missing_label_report_message_1', [DomUtility.getEscapedOuterHTML(element), TextUtility.escape('<label for="[id]">')]),
                      node: element,
                      ruleId: this.ruleConfig.id
                  };
                  this.validator.report(report);
                  return;
              }
              const labelElement = document.querySelectorAll(`label[for="${nodeId}"]`);
              if (labelElement.length === 0) {
                  report = {
                      message: TranslateService.instant('missing_label_report_message_2', [TextUtility.escape(`<label for="${nodeId}">`)]),
                      node: element,
                      ruleId: this.ruleConfig.id
                  };
                  this.validator.report(report);
                  return;
              }
              if (labelElement.length > 1) {
                  report = {
                      message: TranslateService.instant('missing_label_report_message_3', [TextUtility.escape(`<label for="${nodeId}">`)]),
                      node: element,
                      ruleId: this.ruleConfig.id
                  };
                  this.validator.report(report);
              }
          };
          elements.forEach(checkForLabel);
      }
  }

  class MissingSubmitButton extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'form';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.missing_submit_button),
              links: [
                  {
                      content: 'H32: Providing submit buttons',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/H32'
                  }
              ],
              recommendations: [],
              severity: $severity.low,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(nodes) {
          const checkForSubmitButton = (form) => {
              const isInputTypeSubmitAvailable = form.querySelectorAll('input[type="submit"], input[type="image"], button[type="submit"]');
              let report;
              if (isInputTypeSubmitAvailable.length > 0) {
                  return;
              }
              if (DomUtility.firstElementChild(form) === null) {
                  report = {
                      message: TranslateService.instant('missing_submit_button_report_message_1'),
                      node: form,
                      ruleId: this.ruleConfig.id
                  };
              }
              else if (form.querySelector('input[type="hidden"]') !== null) {
                  report = {
                      message: TranslateService.instant('missing_submit_button_report_message_2', [TextUtility.escape('input type="hidden"')]),
                      node: form,
                      ruleId: this.ruleConfig.id
                  };
              }
              else {
                  report = {
                      message: TranslateService.instant('missing_submit_button_report_message_3'),
                      node: form,
                      ruleId: this.ruleConfig.id
                  };
              }
              this.validator.report(report);
          };
          nodes.forEach(checkForSubmitButton);
      }
  }

  const FOCUSABLE_ELEMENTS = [
      '[contenteditable]',
      'a',
      'area',
      'audio',
      'button',
      'embed',
      'form',
      'iframe',
      'input',
      'label',
      'link',
      'object',
      'select',
      'summary',
      'textarea',
      'video'
  ];

  class MisusedAriaOnFocusableElement extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = FOCUSABLE_ELEMENTS
              .map((i) => {
              return `${i}[role="presentation"], ${i}[aria-hidden="true"]`;
          })
              .join(', ');
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.misused_aria_on_focusable_element),
              links: [
                  {
                      content: 'Do not use role="presentation" or aria-hidden="true" on a visible focusable element',
                      url: 'https://w3c.github.io/using-aria/#4thrule'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.BEST_PRACTICE
          };
      }
      validate(elements) {
          const checkSupportForTabindex = (element) => {
              const rolePresentation = element.getAttribute('role');
              const ariaHiddenTrue = element.getAttribute('aria-hidden');
              const attributesToReport = [];
              if (DomUtility.isElementHidden(element)) {
                  return;
              }
              if (rolePresentation) {
                  const attribute = TranslateService.instant('misused_aria_on_focusable_element_attribute_1');
                  attributesToReport.push(attribute);
              }
              if (ariaHiddenTrue === 'true') {
                  const attribute = TranslateService.instant('misused_aria_on_focusable_element_attribute_2');
                  attributesToReport.push(attribute);
              }
              const reportMessage = TranslateService.instant('misused_aria_on_focusable_element_report_message', [attributesToReport.join(', ')]);
              const report = {
                  message: reportMessage,
                  node: element,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(report);
          };
          elements.forEach(checkSupportForTabindex);
      }
  }

  class MisusedInputAttribute extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'input';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.misused_input_attribute),
              links: [
                  {
                      content: 'HTML5 form additions',
                      url: 'https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input'
                  },
                  {
                      content: 'Common input element attributes',
                      url: 'https://www.w3.org/TR/html5/forms.html#common-input-element-attributes'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.BEST_PRACTICE
          };
      }
      validate(elements) {
          const SUPPORTED_INPUT_ATTRIBUTES = [
              'accept',
              'accessKey',
              'autocapitalize',
              'autocomplete',
              'autofocus',
              'checked',
              'defaultChecked',
              'defaultValue',
              'dirName',
              'disabled',
              'indeterminate',
              'list',
              'maxLength',
              'minLength',
              'min',
              'max',
              'multiple',
              'name',
              'pattern',
              'placeholder',
              'readOnly',
              'required',
              'selectionDirection',
              'selectionEnd',
              'selectionStart',
              'size',
              'src',
              'step',
              'tabIndex',
              'type',
              'useMap',
              'value',
              'valueAsDate',
              'valueAsNumber',
              'width',
              'willValidate'
          ];
          const attributeAliases = {
              accesskey: 'accessKey',
              cellpadding: 'cellPadding',
              cellspacing: 'cellSpacing',
              class: 'className',
              codebase: 'codeBase',
              colspan: 'colSpan',
              defaultchecked: 'defaultChecked',
              defaultvalue: 'defaultValue',
              dirname: 'dirName',
              for: 'htmlFor',
              formaction: 'formAction',
              formenctype: 'formEncType',
              formmethod: 'formMethod',
              formnovalidate: 'formNoValidate',
              formtarget: 'formTarget',
              frameborder: 'frameBorder',
              framespacing: 'frameSpacing',
              ismap: 'isMap',
              longdesc: 'longDesc',
              maxlength: 'maxLength',
              nowrap: 'noWrap',
              placeholder: 'placeholder',
              readonly: 'readOnly',
              rowspan: 'rowSpan',
              selectiondirection: 'selectionDirection',
              selectionend: 'selectionEnd',
              selectionstart: 'selectionStart',
              tabindex: 'tabIndex',
              usemap: 'useMap',
              validationmessage: 'validationMessage',
              valueasdate: 'valueAsDate',
              valueasnumber: 'valueAsNumber',
              willvalidate: 'willValidate'
          };
          const isSupportedAttribute = (element, attribute) => {
              const alias = attributeAliases[attribute.toLowerCase()] || attribute;
              return alias in element;
          };
          const checkSupportForInputAttribute = (element) => {
              let nodeAttrValue;
              const checkAttributes = (attr) => {
                  nodeAttrValue = element.getAttribute(attr);
                  if (typeof nodeAttrValue === 'string' && isSupportedAttribute(element, attr) === false) {
                      const reportMessage = TranslateService.instant('misused_input_attribute_report_message', [attr]);
                      const report = {
                          message: reportMessage,
                          node: element,
                          ruleId: this.ruleConfig.id
                      };
                      this.validator.report(report);
                  }
              };
              SUPPORTED_INPUT_ATTRIBUTES.forEach(checkAttributes);
          };
          elements.forEach(checkSupportForInputAttribute);
      }
  }

  class MisusedRequiredAttribute extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = '[required][aria-required]';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.misused_required_attribute),
              links: [
                  {
                      content: 'Attribute required',
                      url: 'https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-required'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.BEST_PRACTICE
          };
      }
      validate(elements) {
          const requiredElms = elements;
          const notUseOnType = [
              'hidden',
              'image'
          ];
          const notUseOnButtonType = [
              'submit',
              'reset',
              'button'
          ];
          const showMessage = (element) => {
              let report;
              const ariaRequiredValue = element.getAttribute('aria-required');
              const elementRequiredValue = element.getAttribute('required');
              const nodeName = element.nodeName.toLowerCase();
              if (ariaRequiredValue && elementRequiredValue === null ||
                  (typeof element.type === 'string' && notUseOnType.indexOf(element.type) !== -1 ||
                      nodeName === 'button' && notUseOnButtonType.indexOf(element.type) !== -1)) {
                  const reportMessage = TranslateService.instant('misused_required_attribute_report_message1', [ariaRequiredValue]);
                  report = {
                      message: reportMessage,
                      node: element,
                      ruleId: this.ruleConfig.id
                  };
                  this.validator.report(report);
                  return;
              }
              if (elementRequiredValue === null) {
                  return;
              }
              if (elementRequiredValue === ariaRequiredValue) {
                  const reportMessage = TranslateService.instant('misused_required_attribute_report_message2', [ariaRequiredValue]);
                  report = {
                      message: reportMessage,
                      node: element,
                      ruleId: this.ruleConfig.id
                  };
              }
              else {
                  const reportMessage = TranslateService.instant('misused_required_attribute_report_message3', [ariaRequiredValue, element.getAttribute('required')]);
                  report = {
                      message: reportMessage,
                      node: element,
                      ruleId: this.ruleConfig.id
                  };
              }
              if (typeof report === 'undefined') {
                  return;
              }
              this.validator.report(report);
          };
          requiredElms.forEach(showMessage);
      }
  }

  class MisusedTabindexAttribute extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = FOCUSABLE_ELEMENTS.join(', ');
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.misused_tabindex_attribute),
              links: [
                  {
                      content: 'H4: Creating a logical tab order through links, form controls, and objects',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/H4.html'
                  }
              ],
              recommendations: [],
              severity: $severity.info,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(elements) {
          const checkSupportForTabindex = (element) => {
              const tabIndexAttribute = element.getAttribute('tabindex');
              if (tabIndexAttribute === null || tabIndexAttribute.trim().length === 0) {
                  return;
              }
              if (Number(tabIndexAttribute) === 0 && FOCUSABLE_ELEMENTS.indexOf(element.nodeName.toLowerCase()) !== -1) {
                  this.validator.report({
                      message: TranslateService.instant('misused_tabindex_attribute_report_message_1', [TextUtility.escape(`tabindex="${tabIndexAttribute}"`)]),
                      node: element,
                      ruleId: this.ruleConfig.id
                  });
              }
          };
          elements.forEach(checkSupportForTabindex);
      }
  }

  class NavigationLandmarkRestrictions extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = '[role="navigation"]';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.navigation_landmark_restrictions),
              links: [
                  {
                      content: 'Accessible Rich Internet Applications (WAI-ARIA) 1.0 Specification: navigation role',
                      url: 'https://www.w3.org/TR/wai-aria-1.1/#navigation'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.BEST_PRACTICE
          };
      }
      validate(elements) {
          const selector = '[role]:not([role="region"]):not([role="search"])';
          const reportMessage = TranslateService.instant('navigation_landmark_restrictions_report_message');
          const checkRoleNavigationContent = (htmlElement) => {
              const childs = DomUtility.querySelectorAll(selector, htmlElement);
              const reportIssue = (element) => {
                  const report = {
                      message: reportMessage,
                      node: element,
                      ruleId: this.ruleConfig.id
                  };
                  this.validator.report(report);
              };
              childs.forEach(reportIssue);
          };
          elements.forEach(checkRoleNavigationContent);
      }
  }

  class NoMetaHttpEquivRefresh extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'meta';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.no_meta_http_equiv_refresh),
              links: [
                  {
                      content: 'F41: Failure of Success Criterion 2.2.1, 2.2.4, and 3.2.5 due to using meta refresh to reload the page',
                      url: 'http://www.w3.org/TR/WCAG20-TECHS/F41.html'
                  }
              ],
              recommendations: [],
              severity: $severity.critical,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(htmlMetaElements) {
          const checkForHttpEquiv = (htmlMetaElement) => {
              const metaHttpEquivValue = htmlMetaElement.getAttribute('http-equiv');
              if (metaHttpEquivValue === null) {
                  return;
              }
              if (metaHttpEquivValue === 'refresh' || metaHttpEquivValue === 'Refresh') {
                  const report = {
                      message: TranslateService.instant('no_meta_http_equiv_refresh_report_message'),
                      node: htmlMetaElement,
                      ruleId: this.ruleConfig.id
                  };
                  this.validator.report(report);
              }
          };
          htmlMetaElements.forEach(checkForHttpEquiv);
      }
  }

  const OBSOLETE_HTML_ATTRIBUTES = {
      accept: ['form'],
      align: ['caption', 'col', 'div', 'embed', 'hr', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'iframe', 'input', 'img', 'legend', 'object', 'p', 'table', 'tbody', 'thead', 'tfoot', 'td', 'th', 'tr'],
      alink: ['body'],
      allowtransparency: ['iframe'],
      archive: ['object'],
      axis: ['td', 'th'],
      background: ['body', 'table', 'thead', 'tbody', 'tfoot', 'tr', 'td', 'th'],
      bgcolor: ['body', 'table', 'td', 'th', 'tr'],
      border: ['img', 'object'],
      bordercolor: ['table'],
      cellpadding: ['table'],
      cellspacing: ['table'],
      char: ['col', 'tbody', 'thead', 'tfoot', 'td', 'th', 'tr'],
      charoff: ['col', 'tbody', 'thead', 'tfoot', 'td', 'th', 'tr'],
      charset: ['a', 'link'],
      classid: ['object'],
      clear: ['br'],
      code: ['object'],
      codebase: ['object'],
      codetype: ['object'],
      color: ['hr'],
      compact: ['dl', 'ol', 'ul'],
      coords: ['a'],
      datafld: ['a', 'applet', 'button', 'div', 'fieldset', 'frame', 'iframe', 'img', 'input', 'label', 'legend', 'marquee', 'object', 'param', 'select', 'span', 'textarea'],
      dataformatas: ['button', 'div', 'input', 'label', 'legend', 'marquee', 'object', 'option', 'select', 'span', 'table'],
      datapagesize: ['table'],
      datasrc: ['a', 'applet', 'button', 'div', 'frame', 'iframe', 'img', 'input', 'label', 'legend', 'marquee', 'object', 'option', 'select', 'span', 'table', 'textarea'],
      declare: ['object'],
      event: ['script'],
      for: ['script'],
      frame: ['table'],
      frameborder: ['iframe'],
      height: ['td', 'th'],
      hspace: ['embed', 'iframe', 'input', 'img', 'object'],
      ismap: ['input'],
      language: ['script'],
      link: ['body'],
      lowsrc: ['img'],
      marginbottom: ['body'],
      marginheight: ['body', 'iframe'],
      marginleft: ['body'],
      marginright: ['body'],
      margintop: ['body'],
      marginwidth: ['body', 'iframe'],
      methods: ['a', 'link'],
      name: ['a', 'embed', 'img', 'option'],
      nohref: ['area'],
      noshade: ['hr'],
      nowrap: ['td', 'th'],
      profile: ['head'],
      rules: ['table'],
      scheme: ['meta'],
      scope: ['td'],
      scrolling: ['iframe'],
      shape: ['a'],
      size: ['hr'],
      standby: ['object'],
      summary: ['table'],
      target: ['link'],
      text: ['body'],
      type: ['param', 'li', 'ul'],
      urn: ['a', 'link'],
      usemap: ['input'],
      valign: ['col', 'tbody', 'thead', 'tfoot', 'td', 'th', 'tr'],
      valuetype: ['param'],
      version: ['html'],
      vlink: ['body'],
      vspace: ['embed', 'iframe', 'input', 'img', 'object'],
      width: ['col', 'hr', 'pre', 'table', 'td', 'th']
  };
  class ObsoleteHtmlAttributes extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = (() => {
              const createSelector = (elementData) => {
                  const attribute = elementData[0];
                  const elements = elementData[1];
                  const create = (elementName) => {
                      return `${elementName}[${attribute}]`;
                  };
                  return elements.map(create).join(',');
              };
              const selector = Object.entries(OBSOLETE_HTML_ATTRIBUTES).map(createSelector)
                  .join(',');
              return selector;
          })();
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.obsolete_html_attributes),
              links: [
                  {
                      content: 'Non-conforming features',
                      url: 'https://www.w3.org/TR/html5/obsolete.html#non-conforming-features'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.BEST_PRACTICE
          };
      }
      validate(elements) {
          const reportNode = (element) => {
              const attributes = Array.from(element.attributes);
              const foundedAttributes = [];
              const checkAttribute = (attr) => {
                  const elms = OBSOLETE_HTML_ATTRIBUTES[attr.localName];
                  if (Array.isArray(elms)) {
                      if (elms.includes(element.nodeName.toLowerCase())) {
                          foundedAttributes.push(attr.localName);
                      }
                  }
              };
              attributes.forEach(checkAttribute);
              if (foundedAttributes.length === 0) {
                  return;
              }
              const reportMessage = TranslateService.instant('obsolete_html_attributes_report_message', foundedAttributes.join(', '));
              const report = {
                  message: reportMessage,
                  node: element,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(report);
          };
          elements.forEach(reportNode);
      }
  }

  class ObsoleteHtmlElements extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = [
              'acronym',
              'applet',
              'basefont',
              'bgsound',
              'big',
              'blink',
              'center',
              'dir',
              'font',
              'frame',
              'frameset',
              'hgroup',
              'isindex',
              'listing',
              'marquee',
              'multicol',
              'nextid',
              'nobr',
              'noembed',
              'noframes',
              'plaintext',
              's',
              'spacer',
              'strike',
              'tt',
              'u',
              'xmp'
          ].join(', ');
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.obsolete_html_elements),
              links: [
                  {
                      content: 'Non-conforming features',
                      url: 'https://www.w3.org/TR/html5/obsolete.html#non-conforming-features'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.BEST_PRACTICE
          };
      }
      validate(elements) {
          const reportNode = (element) => {
              const problem = {
                  message: TranslateService.instant('obsolete_html_elements_report_message', [element.nodeName.toLowerCase()]),
                  node: element,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(problem);
          };
          elements.forEach(reportNode);
      }
  }

  class OutlineZero extends AbstractRule {
      constructor() {
          super(...arguments);
          this.appConfig = Config.getInstance();
          this.selector = () => {
              return Array.from(document.styleSheets);
          };
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.outline_zero),
              links: [
                  {
                      content: 'F55: Failure of Success Criteria 2.1.1, 2.4.7, and 3.2.1 due to using script to remove focus when focus is received',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/F55.html'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.BEST_PRACTICE
          };
      }
      validate(styleSheets) {
          if (styleSheets.length === 0) {
              return;
          }
          const findOutlineZero = (styles) => {
              let currentRule;
              let outlineWidthSize;
              let selector;
              let styleObject;
              let isCSSembededInline;
              let href;
              const defaultSizeValues = ['thin', 'medium', 'thick'];
              if (styles.hasOwnProperty('rules') === false || styles.href && styles.href.indexOf(this.appConfig.get('cssTitle')) !== -1) {
                  return;
              }
              const rules = styles.rules;
              const rulesLength = rules.length;
              for (let i = 0; i < rulesLength; i += 1) {
                  currentRule = rules[i];
                  styleObject = currentRule.style;
                  if (styleObject && styleObject.outlineWidth !== '' && defaultSizeValues.indexOf(styleObject.outlineWidth) === -1) {
                      outlineWidthSize = Number(styleObject.outlineWidth.replace(/[^\d.-]/g, ''));
                      if (outlineWidthSize === 0) {
                          href = currentRule.parentStyleSheet.href;
                          if (href) {
                              isCSSembededInline = TranslateService.instant('outline_zero_css_embeded_1', [href]);
                          }
                          else {
                              isCSSembededInline = TranslateService.instant('outline_zero_css_embeded_2', [DomUtility.getEscapedOuterHTML(currentRule.parentStyleSheet.ownerNode)]);
                          }
                          selector = currentRule.cssText.replace(/(outline.*?;)/i, '<em>$1</em>');
                          const reportMessage = TranslateService.instant('outline_zero_report_message', [styleObject.outlineWidth, selector, isCSSembededInline]);
                          const report = {
                              message: reportMessage,
                              node: null,
                              ruleId: this.ruleConfig.id
                          };
                          this.validator.report(report);
                      }
                  }
              }
          };
          styleSheets.forEach(findOutlineZero);
      }
  }

  class PositiveTabindex extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = '[tabindex]';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.positive_tabindex),
              links: [
                  {
                      content: 'H4: Creating a logical tab order through links, form controls, and objects',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/H4.html'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(htmlElements) {
          const checkTabindex = (htmlElement) => {
              const tabindexValue = htmlElement.tabIndex;
              if (tabindexValue < 1) {
                  return;
              }
              const report = {
                  message: TranslateService.instant('positive_tabindex_report_message', [tabindexValue]),
                  node: htmlElement,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(report);
          };
          htmlElements.forEach(checkTabindex);
      }
  }

  class RoleApplication extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = '[role="application"]';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.role_application),
              links: [
                  {
                      content: 'Using ARIA role=application',
                      url: 'https://w3c.github.io/aria-in-html/'
                  }
              ],
              recommendations: [],
              severity: $severity.critical,
              type: CATEGORY_TYPE.BEST_PRACTICE
          };
      }
      validate(elements) {
          const checkTabindex = (element) => {
              const report = {
                  message: TranslateService.instant('role_application_report_message'),
                  node: element,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(report);
          };
          elements.forEach(checkTabindex);
      }
  }

  class RtlContent extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = `*${[
            ':root',
            'head',
            'style',
            'script',
            'meta',
            'link',
            'br',
            'hr',
            'object',
            'path',
            'g',
            'filter',
            'img',
            'input',
            'iframe',
            'code',
            ':empty'
        ].map((i) => {
            return `:not(${i})`;
        }).join('')}`;
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.rtl_content),
              links: [
                  {
                      content: 'Right to left implementation tricks',
                      url: 'http://www.ctomczyk.pl/right-to-left-implementation-tricks/642/'
                  }
              ],
              recommendations: [],
              severity: $severity.info,
              type: CATEGORY_TYPE.BEST_PRACTICE
          };
      }
      validate(elements) {
          const nodesToReport = [];
          const reportRTL = (element) => {
              if (element.nodeType !== element.ELEMENT_NODE) {
                  return;
              }
              const direction = Css.getStyle(element, 'direction');
              if (typeof direction === 'string' && direction.toLowerCase() === 'rtl') {
                  nodesToReport.push(element);
              }
          };
          elements.forEach(reportRTL);
          const createReport = (element) => {
              const problem = {
                  message: TranslateService.instant('rtl_content_report_message'),
                  node: element,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(problem);
          };
          nodesToReport.forEach(createReport);
      }
  }

  class SelectInitialOption extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'select';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.select_initial_option),
              links: [
                  {
                      content: 'H91: Using HTML form controls and links',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/H91'
                  }
              ],
              recommendations: [],
              severity: $severity.low,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(selectElements) {
          const checkForOptionSelected = (select) => {
              const options = select.options;
              const optionsCount = options.length;
              for (let i = 0; i < optionsCount; i += 1) {
                  if (options[i].getAttribute('selected') !== null) {
                      return;
                  }
              }
              const report = {
                  message: TranslateService.instant('select_initial_option_report_message', [TextUtility.escape('<option>')]),
                  node: select,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(report);
          };
          selectElements.forEach(checkForOptionSelected);
      }
  }

  class TableMissingDescription extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'table';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.table_missing_description),
              links: [
                  {
                      content: 'H39: Using caption elements to associate data table captions with data tables',
                      url: 'http://www.w3.org/TR/WCAG20-TECHS/H39'
                  },
                  {
                      content: 'Tables > Caption & Summary',
                      url: 'http://www.w3.org/WAI/tutorials/tables/caption-summary/'
                  }
              ],
              recommendations: [],
              severity: $severity.low,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(tables) {
          const reportCaption = (table) => {
              const captionElement = table.querySelector('caption');
              const ariaLabelledBy = table.getAttribute('aria-labelledby');
              const ariaDescribedBy = table.getAttribute('aria-describedby');
              const summaryAttr = table.getAttribute('summary');
              const reportMessage = [];
              let ids;
              let missingAssociatedElements;
              if (captionElement !== null) {
                  const captionText = captionElement.textContent;
                  if (typeof captionText === 'string' && TextUtility.safeTrim(captionText).length === 0 || captionText === null) {
                      reportMessage.push(TranslateService.instant('table_missing_description_report_message_5', [captionElement.textContent]));
                  }
                  else {
                      return;
                  }
              }
              if (typeof summaryAttr === 'string') {
                  if (TextUtility.safeTrim(summaryAttr).length === 0) {
                      reportMessage.push(TranslateService.instant('table_missing_description_report_message_3', [`summary="${summaryAttr}"`]));
                  }
                  else {
                      return;
                  }
              }
              if (ariaLabelledBy !== null) {
                  if (TextUtility.safeTrim(ariaLabelledBy).length === 0) {
                      reportMessage.push(TranslateService.instant('table_missing_description_report_message_4', ['aria-labelledby']));
                  }
                  else {
                      ids = ariaLabelledBy.split(/\s+/);
                      const existingElements = (elementId) => {
                          return document.getElementById(elementId) === null;
                      };
                      missingAssociatedElements = ids.filter(existingElements);
                      if (missingAssociatedElements.length > 0) {
                          reportMessage.push(TranslateService.instant('table_missing_description_report_message_1', ['aria-labelledby', missingAssociatedElements.join(', ')]));
                      }
                  }
              }
              else if (ariaDescribedBy !== null) {
                  if (TextUtility.safeTrim(ariaDescribedBy).length === 0) {
                      reportMessage.push(TranslateService.instant('table_missing_description_report_message_4', ['aria-describedby']));
                  }
                  else {
                      ids = ariaDescribedBy.split(' ');
                      const existingElements = (elementId) => {
                          return document.getElementById(elementId) === null;
                      };
                      missingAssociatedElements = ids.filter(existingElements);
                      if (missingAssociatedElements.length > 0) {
                          reportMessage.push(TranslateService.instant('table_missing_description_report_message_1', ['aria-describedby', missingAssociatedElements.join(', ')]));
                      }
                  }
              }
              if (reportMessage.length === 0) {
                  if (captionElement === null && ariaLabelledBy === null && ariaDescribedBy === null) {
                      reportMessage.push(TranslateService.instant('table_missing_description_report_message_2'));
                  }
                  else {
                      return;
                  }
              }
              const report = {
                  message: reportMessage.join(' '),
                  node: table,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(report);
          };
          tables.forEach(reportCaption);
      }
  }

  class PageTitle extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = () => {
              return [DomUtility.getRootElement()];
          };
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.page_title),
              links: [
                  {
                      content: 'F25: Failure of Success Criterion 2.4.2 due to the title of a Web page not identifying the contents',
                      url: 'https://www.w3.org/WAI/GL/2016/WD-WCAG20-TECHS-20160105/F25'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(elements) {
          const titleElement = elements[0].querySelector('head title');
          if (titleElement === null) {
              return;
          }
          const pageTitle = titleElement.textContent;
          if (pageTitle === null) {
              return;
          }
          const unclearTitle = [
              'Enter the title of your HTML document here',
              'Untitled Document',
              'No Title',
              'Untitled Page',
              'New Page 1'
          ];
          const report = {
              message: '',
              node: titleElement,
              ruleId: this.ruleConfig.id
          };
          if (TextUtility.safeTrim(pageTitle).length === 0) {
              report.message = TranslateService.instant('title_element_report_message_2');
          }
          else if (unclearTitle.includes(pageTitle)) {
              report.message = TranslateService.instant('title_element_report_message_1', [pageTitle]);
          }
          if (report.message.length === 0) {
              return;
          }
          this.validator.report(report);
      }
  }

  class TitleForAbbr extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'abbr';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.title_for_abbr),
              links: [
                  {
                      content: 'H28: Providing definitions for abbreviations by using the abbr element',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/H28.html'
                  }
              ],
              recommendations: [],
              severity: $severity.low,
              type: CATEGORY_TYPE.WCAG_AAA
          };
      }
      validate(elements) {
          const reportTitle = (element) => {
              const report = {
                  message: TranslateService.instant('title_for_abbr_report_message_1'),
                  node: element,
                  ruleId: this.ruleConfig.id
              };
              const titleAttribute = element.getAttribute('title');
              if (typeof titleAttribute === 'string') {
                  if (TextUtility.safeTrim(titleAttribute).length === 0) {
                      report.message = TranslateService.instant('title_for_abbr_report_message_2');
                  }
                  else {
                      return;
                  }
              }
              this.validator.report(report);
          };
          elements.forEach(reportTitle);
      }
  }

  class UnclearAnchorUri extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'a[href="#"], a[href*=javascript\\:], a[href=""]';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.unclear_anchor_uri),
              links: [
                  {
                      content: 'Making AJAX applications crawlable',
                      url: 'https://developers.google.com/webmasters/ajax-crawling/docs/learn-more#what-the-user-sees-what-the-crawler-sees'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.BEST_PRACTICE
          };
      }
      validate(anchorElements) {
          const checkHref = (anchorElement) => {
              const hrefAttr = anchorElement.getAttribute('href');
              if (hrefAttr === null) {
                  return;
              }
              const report = {
                  message: TranslateService.instant('unclear_uri_on_a_report_message_1', [anchorElement.href]),
                  node: anchorElement,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(report);
          };
          const nodesLength = anchorElements.length;
          if (nodesLength) {
              anchorElements.forEach(checkHref);
          }
      }
  }

  Object.freeze({
      alert: {
          namefrom: ['author'],
          parent: ['region']
      },
      alertdialog: {
          namefrom: ['author'],
          namerequired: true,
          parent: ['alert', 'dialog']
      },
      application: {
          namefrom: ['author'],
          namerequired: true,
          parent: ['landmark']
      },
      article: {
          namefrom: ['author'],
          parent: ['document', 'region']
      },
      banner: {
          namefrom: ['author'],
          parent: ['landmark']
      },
      button: {
          childpresentational: true,
          namefrom: ['contents', 'author'],
          namerequired: true,
          parent: ['command'],
          properties: ['aria-expanded', 'aria-pressed']
      },
      checkbox: {
          namefrom: ['contents', 'author'],
          namerequired: true,
          parent: ['input'],
          properties: ['aria-checked'],
          requiredProperties: ['aria-checked']
      },
      columnheader: {
          namefrom: ['contents', 'author'],
          namerequired: true,
          parent: ['gridcell', 'sectionhead', 'widget'],
          properties: ['aria-sort'],
          scope: ['row']
      },
      combobox: {
          mustcontain: ['listbox', 'textbox'],
          namefrom: ['author'],
          namerequired: true,
          parent: ['select'],
          properties: ['aria-expanded', 'aria-autocomplete', 'aria-required'],
          requiredProperties: ['aria-expanded']
      },
      command: {
          abstract: true,
          namefrom: ['author'],
          parent: ['widget']
      },
      complementary: {
          namefrom: ['author'],
          parent: ['landmark']
      },
      composite: {
          abstract: true,
          childpresentational: false,
          namefrom: ['author'],
          parent: ['widget'],
          properties: ['aria-activedescendant']
      },
      contentinfo: {
          namefrom: ['author'],
          parent: ['landmark']
      },
      definition: {
          namefrom: ['author'],
          parent: ['section']
      },
      dialog: {
          namefrom: ['author'],
          namerequired: true,
          parent: ['window']
      },
      directory: {
          namefrom: ['contents', 'author'],
          parent: ['list']
      },
      document: {
          namefrom: [' author'],
          namerequired: true,
          parent: ['structure'],
          properties: ['aria-expanded']
      },
      form: {
          namefrom: ['author'],
          parent: ['landmark']
      },
      grid: {
          mustcontain: ['row', 'rowgroup'],
          namefrom: ['author'],
          namerequired: true,
          parent: ['composite', 'region'],
          properties: ['aria-level', 'aria-multiselectable', 'aria-readonly']
      },
      gridcell: {
          namefrom: ['contents', 'author'],
          namerequired: true,
          parent: ['section', 'widget'],
          properties: ['aria-readonly', 'aria-required', 'aria-selected'],
          scope: ['row']
      },
      group: {
          namefrom: [' author'],
          parent: ['section'],
          properties: ['aria-activedescendant']
      },
      heading: {
          namerequired: true,
          parent: ['sectionhead'],
          properties: ['aria-level']
      },
      img: {
          childpresentational: true,
          namefrom: ['author'],
          namerequired: true,
          parent: ['section']
      },
      input: {
          abstract: true,
          namefrom: ['author'],
          parent: ['widget']
      },
      landmark: {
          abstract: true,
          namefrom: ['contents', 'author'],
          namerequired: false,
          parent: ['region']
      },
      link: {
          namefrom: ['contents', 'author'],
          namerequired: true,
          parent: ['command'],
          properties: ['aria-expanded']
      },
      list: {
          mustcontain: ['group', 'listitem'],
          namefrom: ['author'],
          parent: ['region']
      },
      listbox: {
          mustcontain: ['option'],
          namefrom: ['author'],
          namerequired: true,
          parent: ['list', 'select'],
          properties: ['aria-multiselectable', 'aria-required']
      },
      listitem: {
          namefrom: ['contents', 'author'],
          namerequired: true,
          parent: ['section'],
          properties: ['aria-level', 'aria-posinset', 'aria-setsize'],
          scope: ['list']
      },
      log: {
          namefrom: [' author'],
          namerequired: true,
          parent: ['region']
      },
      main: {
          namefrom: ['author'],
          parent: ['landmark']
      },
      marquee: {
          namerequired: true,
          parent: ['section']
      },
      math: {
          childpresentational: true,
          namefrom: ['author'],
          parent: ['section']
      },
      menu: {
          mustcontain: [
              'group',
              'menuitemradio',
              'menuitem',
              'menuitemcheckbox'
          ],
          namefrom: ['author'],
          namerequired: true,
          parent: ['list', 'select']
      },
      menubar: {
          namefrom: ['author'],
          parent: ['menu']
      },
      menuitem: {
          namefrom: ['contents', 'author'],
          namerequired: true,
          parent: ['command'],
          scope: ['menu', 'menubar']
      },
      menuitemcheckbox: {
          namefrom: ['contents', 'author'],
          namerequired: true,
          parent: ['checkbox', 'menuitem'],
          scope: ['menu', 'menubar']
      },
      menuitemradio: {
          namefrom: ['contents', 'author'],
          namerequired: true,
          parent: ['menuitemcheckbox', 'radio'],
          scope: ['menu', 'menubar']
      },
      navigation: {
          namefrom: ['author'],
          parent: ['landmark']
      },
      note: {
          namefrom: ['author'],
          parent: ['section']
      },
      option: {
          namefrom: ['contents', 'author'],
          namerequired: true,
          parent: ['input'],
          properties: [
              'aria-checked',
              'aria-posinset',
              'aria-selected',
              'aria-setsize'
          ]
      },
      presentation: {
          parent: ['structure']
      },
      progressbar: {
          childpresentational: true,
          namefrom: ['author'],
          namerequired: true,
          parent: ['range']
      },
      radio: {
          namefrom: ['contents', 'author'],
          namerequired: true,
          parent: ['checkbox', 'option']
      },
      radiogroup: {
          mustcontain: ['radio'],
          namefrom: ['author'],
          namerequired: true,
          parent: ['select'],
          properties: ['aria-required']
      },
      range: {
          abstract: true,
          namefrom: ['author'],
          parent: ['widget'],
          properties: [
              'aria-valuemax',
              'aria-valuemin',
              'aria-valuenow',
              'aria-valuetext'
          ]
      },
      region: {
          namefrom: [' author'],
          parent: ['section']
      },
      roletype: {
          abstract: true,
          properties: [
              'aria-atomic',
              'aria-busy',
              'aria-controls',
              'aria-describedby',
              'aria-disabled',
              'aria-dropeffect',
              'aria-flowto',
              'aria-grabbed',
              'aria-haspopup',
              'aria-hidden',
              'aria-invalid',
              'aria-label',
              'aria-labelledby',
              'aria-live',
              'aria-owns',
              'aria-relevant'
          ]
      },
      row: {
          mustcontain: ['columnheader', 'gridcell', 'rowheader'],
          namefrom: ['contents', 'author'],
          parent: ['group', 'widget'],
          properties: ['aria-level', 'aria-selected'],
          scope: ['grid', 'rowgroup', 'treegrid']
      },
      rowgroup: {
          mustcontain: ['row'],
          namefrom: ['contents', 'author'],
          parent: ['group'],
          scope: ['grid']
      },
      rowheader: {
          namefrom: ['contents', 'author'],
          namerequired: true,
          parent: ['gridcell', 'sectionhead', 'widget'],
          properties: ['aria-sort'],
          scope: ['row']
      },
      scrollbar: {
          childpresentational: true,
          namefrom: ['author'],
          namerequired: false,
          parent: ['input', 'range'],
          properties: [
              'aria-controls',
              'aria-orientation',
              'aria-valuemax',
              'aria-valuemin',
              'aria-valuenow'
          ],
          requiredProperties: [
              'aria-controls',
              'aria-orientation',
              'aria-valuemax',
              'aria-valuemin',
              'aria-valuenow'
          ]
      },
      search: {
          namefrom: ['author'],
          parent: ['landmark']
      },
      section: {
          abstract: true,
          namefrom: ['contents', 'author'],
          parent: ['structure'],
          properties: ['aria-expanded']
      },
      sectionhead: {
          abstract: true,
          namefrom: ['contents', 'author'],
          parent: ['structure'],
          properties: ['aria-expanded']
      },
      select: {
          abstract: true,
          namefrom: ['author'],
          parent: ['composite', 'group', 'input']
      },
      separator: {
          childpresentational: true,
          namefrom: ['author'],
          parent: ['structure'],
          properties: ['aria-expanded', 'aria-orientation']
      },
      slider: {
          childpresentational: true,
          namefrom: ['author'],
          namerequired: true,
          parent: ['input', 'range'],
          properties: [
              'aria-valuemax',
              'aria-valuemin',
              'aria-valuenow',
              'aria-orientation'
          ],
          requiredProperties: ['aria-valuemax', 'aria-valuemin', 'aria-valuenow']
      },
      spinbutton: {
          namefrom: ['author'],
          namerequired: true,
          parent: ['input', 'range'],
          properties: [
              'aria-valuemax',
              'aria-valuemin',
              'aria-valuenow',
              'aria-required'
          ],
          requiredProperties: ['aria-valuemax', 'aria-valuemin', 'aria-valuenow']
      },
      status: {
          parent: ['region']
      },
      structure: {
          abstract: true,
          parent: ['roletype']
      },
      tab: {
          namefrom: ['contents', 'author'],
          parent: ['sectionhead', 'widget'],
          properties: ['aria-selected'],
          scope: ['tablist']
      },
      tablist: {
          mustcontain: ['tab'],
          namefrom: ['author'],
          parent: ['composite', 'directory'],
          properties: ['aria-level']
      },
      tabpanel: {
          namefrom: ['author'],
          namerequired: true,
          parent: ['region']
      },
      textbox: {
          namefrom: ['author'],
          namerequired: true,
          parent: ['input'],
          properties: [
              'aria-activedescendant',
              'aria-autocomplete',
              'aria-multiline',
              'aria-readonly',
              'aria-required'
          ]
      },
      timer: {
          namefrom: ['author'],
          namerequired: true,
          parent: ['status']
      },
      toolbar: {
          namefrom: ['author'],
          parent: ['group']
      },
      tooltip: {
          namerequired: true,
          parent: ['section']
      },
      tree: {
          mustcontain: ['group', 'treeitem'],
          namefrom: ['author'],
          namerequired: true,
          parent: ['select'],
          properties: ['aria-multiselectable', 'aria-required']
      },
      treegrid: {
          mustcontain: ['row'],
          namefrom: ['author'],
          namerequired: true,
          parent: ['grid', 'tree']
      },
      treeitem: {
          namefrom: ['contents', 'author'],
          namerequired: true,
          parent: ['listitem', 'option'],
          scope: ['group', 'tree']
      },
      widget: {
          abstract: true,
          parent: ['roletype']
      },
      window: {
          abstract: true,
          namefrom: [' author'],
          parent: ['roletype'],
          properties: ['aria-expanded']
      }
  });
  const TAG_TO_IMPLICIT_SEMANTIC_INFO = Object.freeze({
      A: [{
              allowed: [
                  'button',
                  'checkbox',
                  'menuitem',
                  'menuitemcheckbox',
                  'menuitemradio',
                  'tab',
                  'treeitem'
              ],
              role: 'link',
              selector: 'a[href]'
          }],
      ADDRESS: [{
              allowed: [
                  'contentinfo',
                  'presentation'
              ],
              role: ''
          }],
      AREA: [{
              role: 'link',
              selector: 'area[href]'
          }],
      ARTICLE: [{
              allowed: [
                  'presentation',
                  'article',
                  'document',
                  'application',
                  'main'
              ],
              role: 'article'
          }],
      ASIDE: [{
              allowed: [
                  'note',
                  'complementary',
                  'search',
                  'presentation'
              ],
              role: 'complementary'
          }],
      AUDIO: [{
              allowed: ['application', 'presentation'],
              role: ''
          }],
      BASE: [{
              reserved: true,
              role: ''
          }],
      BLOCKQUOTE: [{
              allowed: ['*'],
              role: ''
          }],
      BODY: [{
              allowed: ['presentation'],
              role: 'document'
          }],
      BUTTON: [{
              allowed: [
                  'link',
                  'menuitem',
                  'menuitemcheckbox',
                  'menuitemradio',
                  'radio'
              ],
              role: 'button',
              selector: 'button:not([aria-pressed]):not([type="menu"])'
          }, {
              allowed: ['button'],
              role: 'button',
              selector: 'button[aria-pressed]'
          }, {
              allowed: [
                  'link',
                  'menuitem',
                  'menuitemcheckbox',
                  'menuitemradio',
                  'radio'
              ],
              attributes: {
                  'aria-haspopup': true
              },
              role: 'button',
              selector: 'button[type="menu"]'
          }],
      CAPTION: [{
              allowed: ['presentation'],
              role: ''
          }],
      COL: [{
              reserved: true,
              role: ''
          }],
      COLGROUP: [{
              reserved: true,
              role: ''
          }],
      DATALIST: [{
              allowed: ['presentation'],
              attributes: {
                  'aria-multiselectable': false
              },
              role: 'listbox'
          }],
      DD: [{
              allowed: ['presentation'],
              role: ''
          }],
      DEL: [{
              allowed: ['*'],
              role: ''
          }],
      DETAILS: [{
              allowed: [
                  'group',
                  'presentation'
              ],
              role: 'group'
          }],
      DIALOG: [{
              allowed: ['dialog', 'alert', 'alertdialog', 'application', 'log', 'marquee', 'status'],
              role: 'dialog',
              selector: 'dialog[open]'
          }, {
              allowed: ['dialog', 'alert', 'alertdialog', 'application', 'log', 'marquee', 'status'],
              attributes: {
                  'aria-hidden': true
              },
              role: 'dialog',
              selector: 'dialog:not([open])'
          }],
      DIV: [{
              allowed: ['*'],
              role: ''
          }],
      DL: [{
              allowed: ['presentation'],
              role: 'list'
          }],
      DT: [{
              allowed: ['presentation'],
              role: ''
          }],
      EMBED: [{
              allowed: [
                  'application',
                  'document',
                  'img',
                  'presentation'
              ],
              role: ''
          }],
      FIGURE: [{
              allowed: ['*'],
              role: ''
          }],
      FOOTER: [{
              allowed: ['contentinfo', 'presentation'],
              role: ''
          }],
      FORM: [{
              allowed: ['presentation'],
              role: 'form'
          }],
      H1: [{
              role: 'heading'
          }],
      H2: [{
              role: 'heading'
          }],
      H3: [{
              role: 'heading'
          }],
      H4: [{
              role: 'heading'
          }],
      H5: [{
              role: 'heading'
          }],
      H6: [{
              role: 'heading'
          }],
      HEAD: [{
              reserved: true,
              role: ''
          }],
      HEADER: [{
              allowed: [
                  'banner',
                  'presentation'
              ],
              role: ''
          }],
      HR: [{
              allowed: ['presentation'],
              role: 'separator'
          }],
      HTML: [{
              reserved: true,
              role: ''
          }],
      IFRAME: [{
              allowed: [
                  'application',
                  'document',
                  'img',
                  'presentation'
              ],
              role: '',
              selector: 'iframe:not([seamless])'
          }, {
              allowed: [
                  'application',
                  'document',
                  'img',
                  'presentation',
                  'group'
              ],
              role: '',
              selector: 'iframe[seamless]'
          }],
      IMG: [{
              reserved: true,
              role: 'presentation',
              selector: 'img[alt=""]'
          }, {
              allowed: ['*'],
              role: 'img',
              selector: 'img[alt]:not([alt=""])'
          }],
      INPUT: [{
              allowed: [
                  'link',
                  'menuitem',
                  'menuitemcheckbox',
                  'menuitemradio',
                  'radio'
              ],
              role: 'button',
              selector: 'input[type="button"]:not([aria-pressed])'
          }, {
              allowed: ['button'],
              role: 'button',
              selector: 'input[type="button"][aria-pressed]'
          }, {
              allowed: ['checkbox'],
              role: 'checkbox',
              selector: 'input[type="checkbox"]'
          }, {
              role: '',
              selector: 'input[type="color"]'
          }, {
              role: '',
              selector: 'input[type="date"]'
          }, {
              role: '',
              selector: 'input[type="datetime"]'
          }, {
              role: 'textbox',
              selector: 'input[type="email"]:not([list])'
          }, {
              role: '',
              selector: 'input[type="file"]'
          }, {
              reserved: true,
              role: '',
              selector: 'input[type="hidden"]'
          }, {
              allowed: ['button'],
              role: 'button',
              selector: 'input[type="image"][aria-pressed]'
          }, {
              allowed: [
                  'link',
                  'menuitem',
                  'menuitemcheckbox',
                  'menuitemradio',
                  'radio'
              ],
              role: 'button',
              selector: 'input[type="image"]:not([aria-pressed])'
          }, {
              role: '',
              selector: 'input[type="month"]'
          }, {
              role: '',
              selector: 'input[type="number"]'
          }, {
              role: 'textbox',
              selector: 'input[type="password"]'
          }, {
              allowed: ['menuitemradio'],
              role: 'radio',
              selector: 'input[type="radio"]'
          }, {
              role: 'slider',
              selector: 'input[type="range"]'
          }, {
              role: 'button',
              selector: 'input[type="reset"]'
          }, {
              role: 'combobox',
              selector: 'input[type="search"][list]'
          }, {
              role: 'textbox',
              selector: 'input[type="search"]:not([list])'
          }, {
              role: 'button',
              selector: 'input[type="submit"]'
          }, {
              role: 'combobox',
              selector: 'input[type="tel"][list]'
          }, {
              role: 'textbox',
              selector: 'input[type="tel"]:not([list])'
          }, {
              role: 'combobox',
              selector: 'input[type="text"][list]'
          }, {
              role: 'textbox',
              selector: 'input[type="text"]:not([list])'
          }, {
              role: 'textbox',
              selector: 'input:not([type])'
          }, {
              role: '',
              selector: 'input[type="time"]'
          }, {
              role: 'combobox',
              selector: 'input[type="url"][list]'
          }, {
              role: 'textbox',
              selector: 'input[type="url"]:not([list])'
          }, {
              role: '',
              selector: 'input[type="week"]'
          }],
      INS: [{
              allowed: ['*'],
              role: ''
          }],
      KEYGEN: [{
              role: ''
          }],
      LABEL: [{
              allowed: ['presentation'],
              role: ''
          }],
      LI: [{
              allowed: [
                  'menuitem',
                  'menuitemcheckbox',
                  'menuitemradio',
                  'option',
                  'tab',
                  'treeitem',
                  'presentation'
              ],
              role: 'listitem',
              selector: 'ol:not([role="presentation"])>li, ul:not([role="presentation"])>li'
          }, {
              allowed: [
                  'listitem',
                  'menuitem',
                  'menuitemcheckbox',
                  'menuitemradio',
                  'option',
                  'tab',
                  'treeitem',
                  'presentation'
              ],
              role: 'listitem',
              selector: 'ol[role="presentation"]>li, ul[role="presentation"]>li'
          }],
      LINK: [{
              reserved: true,
              role: 'link',
              selector: 'link[href]'
          }],
      MAIN: [{
              allowed: [
                  'main',
                  'presentation'
              ],
              role: ''
          }],
      MAP: [{
              reserved: true,
              role: ''
          }],
      MATH: [{
              allowed: ['presentation'],
              role: ''
          }],
      MENU: [{
              role: 'toolbar',
              selector: 'menu[type="toolbar"]'
          }],
      MENUITEM: [{
              role: 'menuitem',
              selector: 'menuitem[type="command"]'
          }, {
              role: 'menuitemcheckbox',
              selector: 'menuitem[type="checkbox"]'
          }, {
              role: 'menuitemradio',
              selector: 'menuitem[type="radio"]'
          }],
      META: [{
              reserved: true,
              role: ''
          }],
      METER: [{
              allowed: ['presentation'],
              role: 'progressbar'
          }],
      NAV: [{
              allowed: ['navigation', 'presentation'],
              role: 'navigation'
          }],
      NOSCRIPT: [{
              reserved: true,
              role: ''
          }],
      OBJECT: [{
              allowed: ['application', 'document', 'img', 'presentation'],
              role: ''
          }],
      OL: [{
              allowed: ['directory', 'group', 'listbox', 'menu', 'menubar', 'tablist', 'toolbar', 'tree', 'presentation'],
              role: 'list'
          }],
      OPTGROUP: [{
              allowed: ['presentation'],
              role: ''
          }],
      OPTION: [{
              role: 'option'
          }],
      OUTPUT: [{
              allowed: ['*'],
              role: 'status'
          }],
      P: [{
              allowed: ['*'],
              role: ''
          }],
      PARAM: [{
              reserved: true,
              role: ''
          }],
      PICTURE: [{
              reserved: true,
              role: ''
          }],
      PRE: [{
              allowed: ['*'],
              role: ''
          }],
      PROGRESS: [{
              allowed: ['presentation'],
              role: 'progressbar'
          }],
      SCRIPT: [{
              reserved: true,
              role: ''
          }],
      SECTION: [{
              allowed: [
                  'alert',
                  'alertdialog',
                  'application',
                  'banner',
                  'contentinfo',
                  'complementary',
                  'contentinfo',
                  'dialog',
                  'document',
                  'feed',
                  'log',
                  'main',
                  'marquee',
                  'navigation',
                  'search',
                  'status',
                  'tabpanel'
              ],
              role: 'region'
          }],
      SELECT: [{
              role: 'listbox'
          }],
      SOURCE: [{
              reserved: true,
              role: ''
          }],
      SPAN: [{
              allowed: ['*'],
              role: ''
          }],
      STYLE: [{
              reserved: true,
              role: ''
          }],
      SUMMARY: [{
              allowed: ['presentation'],
              role: ''
          }],
      SVG: [{
              allowed: [
                  'application',
                  'document',
                  'img',
                  'presentation'
              ],
              role: ''
          }],
      TABLE: [{
              allowed: ['*'],
              role: ''
          }],
      TBODY: [{
              allowed: ['*'],
              role: 'rowgroup'
          }],
      TD: [{
              allowed: ['*'],
              role: ''
          }],
      TEMPLATE: [{
              reserved: true,
              role: ''
          }],
      TEXTAREA: [{
              role: 'textbox'
          }],
      TFOOT: [{
              allowed: ['*'],
              role: 'rowgroup'
          }],
      TH: [{
              allowed: ['*'],
              role: ''
          }],
      THEAD: [{
              allowed: ['*'],
              role: 'rowgroup'
          }],
      TITLE: [{
              reserved: true,
              role: ''
          }],
      TR: [{
              allowed: ['*'],
              role: ''
          }],
      TRACK: [{
              reserved: true,
              role: ''
          }],
      UL: [{
              allowed: [
                  'directory',
                  'group',
                  'listbox',
                  'menu',
                  'menubar',
                  'presentation',
                  'tablist',
                  'toolbar',
                  'tree'
              ],
              role: 'list'
          }],
      VIDEO: [{
              allowed: ['application', 'presentation'],
              role: ''
          }]
  });

  class UnsupportedRoleOnElement extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'a[href="#"], a[href*=javascript\\:], a[href=""]';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.unsupported_role_on_element),
              links: [],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.BEST_PRACTICE
          };
      }
      validate(anchorElements) {
          const checkSingleNode = (anchorElement) => {
              const tagName = anchorElement.nodeName.toUpperCase();
              const roleValue = anchorElement.getAttribute('role');
              if (typeof TAG_TO_IMPLICIT_SEMANTIC_INFO[tagName] === 'undefined') {
                  return;
              }
              if (roleValue === null) {
                  return;
              }
              if (Array.isArray(TAG_TO_IMPLICIT_SEMANTIC_INFO[tagName][0].allowed) &&
                  TAG_TO_IMPLICIT_SEMANTIC_INFO[tagName][0].allowed.indexOf(roleValue) !== -1) {
                  return;
              }
              const reportMessage = TranslateService.instant('unsupported_role_on_element_report_message', [roleValue]);
              const report = {
                  message: reportMessage,
                  node: anchorElement,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(report);
          };
          const nodesLength = anchorElements.length;
          if (nodesLength > 0) {
              anchorElements.forEach(checkSingleNode);
          }
      }
  }

  class AppletMissingAlt extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'applet';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.applet_missing_alt),
              links: [
                  {
                      content: 'H35: Providing text alternatives on <code>applet</code> elements',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/H35.html'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(appletElements) {
          const reportNode = (appletElement) => {
              let message = '';
              const altContent = appletElement.getAttribute('alt');
              const altContentLength = typeof altContent === 'string' ? altContent.length : 0;
              const altContentTrimLength = typeof altContent === 'string' ? altContent.trim().length : 0;
              if (typeof altContent === 'string' && altContentTrimLength > 0) {
                  return;
              }
              if (altContent === null) {
                  message = TranslateService.instant('applet_missing_alt_report_message_1');
              }
              else if (altContentLength === 0) {
                  message = TranslateService.instant('applet_missing_alt_report_message_2');
              }
              else if (altContentTrimLength === 0) {
                  message = TranslateService.instant('applet_missing_alt_report_message_3');
              }
              const report = {
                  message: message,
                  node: appletElement,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(report);
          };
          appletElements.forEach(reportNode);
      }
  }

  class AppletMissingBody extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'applet';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.applet_missing_body),
              links: [
                  {
                      content: 'H35: Providing text alternatives on <code>applet</code> elements',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/H35.html'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(elements) {
          const reportNode = (element) => {
              let message;
              const textContent = DomUtility.nodesToText(element);
              const textContentTrimLength = TextUtility.trim(textContent).length;
              const textContentLength = textContent.length;
              if (textContentTrimLength > 0) {
                  return;
              }
              if (textContentLength > 0) {
                  message = TranslateService.instant('applet_missing_body_report_message_1', [TextUtility.escape('<applet>'), TextUtility.escape('<applet>')]);
              }
              else {
                  message = TranslateService.instant('applet_missing_body_report_message_2', [TextUtility.escape('<applet>'), TextUtility.escape('<applet>'), TextUtility.escape('<applet>')]);
              }
              const report = {
                  message: message,
                  node: element,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(report);
          };
          elements.forEach(reportNode);
      }
  }

  class AudioAlternative extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'bgsound, audio, object';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.audio_alternative),
              links: [
                  {
                      content: 'G158: Providing an alternative for time-based media for audio-only content',
                      url: 'https://www.w3.org/TR/2016/NOTE-WCAG20-TECHS-20161007/G158'
                  }
              ],
              recommendations: [],
              severity: $severity.info,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(elements) {
          const reportNode = (element) => {
              const nodeName = element.nodeName.toLowerCase();
              let message = TranslateService.instant('audio_alternative_report_message_1');
              if (nodeName === 'audio' && DomUtility.querySelectorAll('track', element).length === 0) {
                  message += TranslateService.instant('audio_alternative_report_message_2');
              }
              else if (nodeName === 'bgsound') {
                  message += TranslateService.instant('audio_alternative_report_message_3');
              }
              else if (nodeName === 'object') {
                  message += TranslateService.instant('audio_alternative_report_message_4');
              }
              const report = {
                  message: '',
                  node: element,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(ObjectUtility.extend(report, {
                  message: message
              }));
          };
          elements.forEach(reportNode);
      }
  }

  class GeneralAlt extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = '[role="img"][alt], input[type="image"][alt]';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.general_alt),
              links: [
                  {
                      content: 'H37: Using <code>alt</code> attributes on <code>img</code> elements',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/H37.html'
                  }
              ],
              recommendations: [],
              severity: $severity.info,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(htmlElements) {
          const reportNode = (htmlElement) => {
              const altContent = htmlElement.getAttribute('alt');
              const altContentLength = typeof altContent === 'string' ? altContent.length : 0;
              const altContentTrimLength = typeof altContent === 'string' ? altContent.trim().length : 0;
              if (typeof altContent === 'string' && altContentLength === 0 || altContentTrimLength === 0) {
                  return;
              }
              const report = {
                  message: TranslateService.instant('general_alt_report_message'),
                  node: htmlElement,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(report);
          };
          htmlElements.forEach(reportNode);
      }
  }

  class ImgEmptyAltInLink extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'a img';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.img_empty_alt_in_link),
              links: [
                  {
                      content: 'H30: Providing link text that describes the purpose of a link for anchor elements',
                      url: 'https://www.w3.org/TR/2016/NOTE-WCAG20-TECHS-20161007/H30'
                  }
              ],
              recommendations: [],
              severity: $severity.critical,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(nodes) {
          const reportNode = (node) => {
              let report;
              const nodeToReport = DomUtility.getParentElement(node, 'a');
              const altAttribute = node.getAttribute('alt');
              if (nodeToReport === null || altAttribute === null) {
                  return;
              }
              const nodeText = nodeToReport.textContent;
              if (nodeText === null || typeof nodeText === 'string' && nodeText.trim().length > 0) {
                  return;
              }
              const altContentLength = altAttribute.length;
              const altContentTrimLength = altAttribute.trim().length;
              if (typeof altAttribute === 'string') {
                  if (altContentLength === 0) {
                      report = {
                          message: TranslateService.instant('img_empty_alt_in_link_report_message_1'),
                          node: nodeToReport,
                          ruleId: this.ruleConfig.id
                      };
                  }
                  else if (altContentTrimLength === 0) {
                      report = {
                          message: TranslateService.instant('img_empty_alt_in_link_report_message_2'),
                          node: nodeToReport,
                          ruleId: this.ruleConfig.id
                      };
                  }
                  if (typeof report === 'undefined') {
                      return;
                  }
                  this.validator.report(report);
              }
          };
          nodes.forEach(reportNode);
      }
  }

  class ImgEmptyAltWithEmptyTitle extends AbstractRule {
      constructor() {
          super(...arguments);
          this.appConfig = Config.getInstance();
          this.selector = 'img[alt]';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.img_empty_alt_with_empty_title),
              links: [
                  {
                      content: 'H67: Using null alt text and no title attribute on img elements for images that AT should ignore',
                      url: 'https://www.w3.org/TR/2016/NOTE-WCAG20-TECHS-20161007/H67'
                  }
              ],
              recommendations: [],
              severity: $severity.info,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      elementShouldBeSkipped(element) {
          const styles = Css.getComputedStyle(element);
          let elementShouldBeSkipped = true;
          if (this.appConfig.get($runnerSettings.includeHidden)) {
              elementShouldBeSkipped = false;
              return elementShouldBeSkipped;
          }
          if (DomUtility.hasElementSemiOpacity(element, styles)) {
              return elementShouldBeSkipped;
          }
          return false;
      }
      validate(imageElements) {
          const reportNode = (imageElement) => {
              let message = '';
              const titleAttribute = imageElement.getAttribute('title');
              const altAttribute = imageElement.getAttribute('alt');
              if (titleAttribute === null || altAttribute === null) {
                  return;
              }
              if (this.elementShouldBeSkipped(imageElement)) {
                  this.validator.report({
                      message: '',
                      node: imageElement,
                      ruleId: this.ruleConfig.id,
                      skipReason: $auditRuleNodeSkipReason.excludedFromScanning
                  });
                  return;
              }
              const altContainsOnlyWhiteSpaces = TextUtility.containsOnlyWhiteSpaces(altAttribute);
              if (altAttribute.length > 0 && altContainsOnlyWhiteSpaces === false) {
                  return;
              }
              if (TextUtility.containsOnlyWhiteSpaces(titleAttribute)) {
                  return;
              }
              message += TranslateService.instant('img_empty_alt_with_empty_title_report_message');
              if (altContainsOnlyWhiteSpaces) {
                  message += ` ${TranslateService.instant('img_empty_alt_with_empty_title_report_message_alt_whitespaces')}`;
              }
              const report = {
                  message: message,
                  node: imageElement,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(report);
          };
          imageElements.forEach(reportNode);
      }
  }

  class ImgAdjacentDuplicateTextLink extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'a';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.img_adjacent_duplicate_text_link),
              links: [
                  {
                      content: 'H2: Combining adjacent image and text links for the same resource',
                      url: 'https://www.w3.org/TR/2016/NOTE-WCAG20-TECHS-20161007/H2'
                  }
              ],
              recommendations: [],
              severity: $severity.low,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(anchorElements) {
          const reportNode = (anchorElement) => {
              const report = {
                  message: '',
                  node: anchorElement,
                  ruleId: this.ruleConfig.id
              };
              let nextElemSibling = anchorElement.nextElementSibling;
              let textInBetween = '';
              while (nextElemSibling && nextElemSibling.nodeName.toLowerCase() !== 'a') {
                  textInBetween += DomUtility.getText(nextElemSibling).trim();
                  nextElemSibling = nextElemSibling.nextElementSibling;
              }
              if (nextElemSibling && textInBetween.length === 0) {
                  const currNodeImgChildren = DomUtility.querySelectorAll('img', anchorElement);
                  const nextNodeImgChildren = DomUtility.querySelectorAll('img', nextElemSibling);
                  let nodeWithIcon;
                  if (currNodeImgChildren.length === nextNodeImgChildren.length || currNodeImgChildren.length !== 1 && nextNodeImgChildren.length !== 1) {
                      nodeWithIcon = null;
                  }
                  else if (currNodeImgChildren.length === 1) {
                      nodeWithIcon = anchorElement;
                  }
                  else {
                      nodeWithIcon = nextElemSibling;
                  }
                  let nodeWithText = anchorElement;
                  if (nodeWithIcon === null) {
                      nodeWithText = anchorElement;
                  }
                  else if (nodeWithIcon === anchorElement) {
                      nodeWithText = nextElemSibling;
                  }
                  report.node = anchorElement;
                  if (nodeWithIcon && nodeWithText && nodeWithIcon.getAttribute('href') === nodeWithText.getAttribute('href')) {
                      const nodeWithTextContent = DomUtility.getText(nodeWithText).replace(/\s+/g, ' ')
                          .trim()
                          .toLowerCase();
                      const nodeWithIconContent = DomUtility.getText(nodeWithIcon).replace(/\s+/g, ' ')
                          .trim()
                          .toLowerCase();
                      const nodeWithIconAltText = (DomUtility.querySelectorAll('img', nodeWithIcon)[0].getAttribute('alt') || '').trim().toLowerCase();
                      if (nodeWithIconContent.length === 0 && nodeWithIconAltText && nodeWithTextContent === nodeWithIconAltText) {
                          report.message = TranslateService.instant('img_adjacent_duplicate_text_link_report_message_1');
                      }
                      else if (nodeWithIconContent.length === 0 && nodeWithIconAltText.length === 0) {
                          report.message = TranslateService.instant('img_adjacent_duplicate_text_link_report_message_2');
                      }
                  }
              }
              if (report.message) {
                  this.validator.report(report);
              }
          };
          anchorElements.forEach(reportNode);
      }
  }

  class ImgAltDuplicateTextLink extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'a';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.img_alt_duplicate_text_link),
              links: [
                  {
                      content: 'H2: Combining adjacent image and text links for the same resource',
                      url: 'https://www.w3.org/TR/2016/NOTE-WCAG20-TECHS-20161007/H2'
                  }
              ],
              recommendations: [],
              severity: $severity.low,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(anchorElements) {
          const reportNode = (anchorElement) => {
              const nodeTextContent = TextUtility.safeTrim(DomUtility.getText(anchorElement, false, false)).toLowerCase();
              const nodeImgChildren = DomUtility.querySelectorAll('img', anchorElement);
              const nodeFirstImgAlt = nodeImgChildren.length ?
                  TextUtility.safeTrim(nodeImgChildren[0].getAttribute('alt') || '').toLowerCase() :
                  null;
              if (nodeImgChildren.length === 1 && (nodeTextContent && nodeTextContent === nodeFirstImgAlt)) {
                  const report = {
                      message: TranslateService.instant('img_alt_duplicate_text_link_report_message'),
                      node: anchorElement,
                      ruleId: this.ruleConfig.id
                  };
                  this.validator.report(report);
              }
          };
          anchorElements.forEach(reportNode);
      }
  }

  class InputImageMissingAlt extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'input[type="image"]';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.input_image_missing_alt),
              links: [
                  {
                      content: 'H36: Using alt attributes on images used as submit buttons',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/H36.html'
                  }
              ],
              recommendations: [],
              severity: $severity.critical,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(inputElements) {
          const reportNode = (inputElement) => {
              let message = '';
              const altContent = inputElement.getAttribute('alt');
              const altContentTrimLength = typeof altContent === 'string' ? altContent.trim().length : 0;
              const altContentLength = typeof altContent === 'string' ? altContent.length : 0;
              if (typeof altContent === 'string' && altContentTrimLength > 0) {
                  return;
              }
              if (altContent === null) {
                  message = TranslateService.instant('input_image_missing_alt_report_message_1');
              }
              else if (altContentLength === 0) {
                  message = TranslateService.instant('input_image_missing_alt_report_message_2');
              }
              else if (altContentTrimLength === 0) {
                  message = TranslateService.instant('input_image_missing_alt_report_message_3');
              }
              const report = {
                  message: message,
                  node: inputElement,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(report);
          };
          inputElements.forEach(reportNode);
      }
  }

  class ObjectGeneralAlt extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'object';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.object_general_alt),
              links: [],
              recommendations: [],
              severity: $severity.info,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(objectElements) {
          const reportNode = (objectElement) => {
              const textContent = DomUtility.nodesToText(objectElement);
              const textContentLength = TextUtility.trim(textContent).length;
              const message = TranslateService.instant('object_general_alt_report_message');
              if (textContentLength === 0) {
                  return;
              }
              const report = {
                  message: message,
                  node: objectElement,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(report);
          };
          objectElements.forEach(reportNode);
      }
  }

  class ObjectMissingBody extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'object';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.object_missing_body),
              links: [
                  {
                      content: '§ 1194.22 (a) A text equivalent for every non-text element shall be provided (e.g., via "alt", "longdesc", or in element content).',
                      url: 'https://www.access-board.gov/guidelines-and-standards/communications-and-it/about-the-section-508-standards/section-508-standards'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(objectElements) {
          const reportNode = (objectElement) => {
              const textContent = DomUtility.nodesToText(objectElement);
              const textContentTrimLength = TextUtility.trim(textContent).length;
              const textContentLength = TextUtility.trim(textContent).length;
              let message;
              if (textContentTrimLength > 0) {
                  return;
              }
              if (textContentLength > 0) {
                  message = TranslateService.instant('object_missing_body_report_message_1', [TextUtility.escape('<object>'), TextUtility.escape('<object>')]);
              }
              else {
                  message = TranslateService.instant('object_missing_body_report_message_2', [TextUtility.escape('<object>'), TextUtility.escape('<object>'), TextUtility.escape('<object>')]);
              }
              const report = {
                  message: message,
                  node: objectElement,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(report);
          };
          objectElements.forEach(reportNode);
      }
  }

  class AudioVideoCaptions extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'audio, video';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.audio_video_captions),
              links: [
                  {
                      content: 'H95: Using the track element to provide captions',
                      url: 'https://www.w3.org/TR/2016/NOTE-WCAG20-TECHS-20161007/H95'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(elements) {
          const reportNode = (element) => {
              const nodeTrackCaptions = element.querySelectorAll('track[kind="captions"]');
              if (nodeTrackCaptions.length > 0) {
                  return;
              }
              const report = {
                  message: TranslateService.instant('audio_video_captions_report_message', [TextUtility.escape('<track>')]),
                  node: element,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(report);
          };
          elements.forEach(reportNode);
      }
  }

  class VideoAudioDescriptions extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'video';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.video_audio_descriptions),
              links: [
                  {
                      content: 'H96: Using the track element to provide audio descriptions',
                      url: 'https://www.w3.org/TR/2016/NOTE-WCAG20-TECHS-20161007/H96.html'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(videoElements) {
          const reportNode = (videoElement) => {
              const nodeAudioSources = videoElement.querySelectorAll('source[type^="audio/"]');
              const nodeTrackDescriptions = videoElement.querySelectorAll('track[kind="descriptions"]');
              if (nodeAudioSources.length === 0 && nodeTrackDescriptions.length === 0) {
                  const report = {
                      message: TranslateService.instant('video_audio_descriptions_report_message', [TextUtility.escape('<track>'), TextUtility.escape('<source>')]),
                      node: videoElement,
                      ruleId: this.ruleConfig.id
                  };
                  this.validator.report(report);
              }
          };
          videoElements.forEach(reportNode);
      }
  }

  class MeaningfulContentSequence extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = () => {
              return [DomUtility.getRootElement()];
          };
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.meaningful_content_sequence),
              links: [
                  {
                      content: 'G57: Ordering the content in a meaningful sequence',
                      url: 'https://www.w3.org/TR/2016/NOTE-WCAG20-TECHS-20161007/G57'
                  }
              ],
              recommendations: [],
              severity: $severity.info,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(htmlElements) {
          const reportNode = (htmlElement) => {
              const message = TranslateService.instant('meaningful_content_sequence_report_message');
              const report = {
                  message: message,
                  node: htmlElement,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(report);
          };
          htmlElements.forEach(reportNode);
      }
  }

  class TableRowAndColumnHeaders extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'table';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.table_row_and_column_headers),
              links: [
                  {
                      content: 'H51: Using table markup to present tabular information',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/H51.html'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(tableElements) {
          const reportNode = (tableElement) => {
              const message = [];
              if (tableElement.querySelector('th') !== null) {
                  return;
              }
              message.push(TranslateService.instant('table_row_and_column_headers_report_message_1', [TextUtility.escape('<th>')]));
              if (tableElement.tBodies.length === 0) {
                  message.push(TranslateService.instant('table_row_and_column_headers_report_message_2', [TextUtility.escape('<tbody>')]));
              }
              if (tableElement.tHead === null) {
                  message.push(TranslateService.instant('table_row_and_column_headers_report_message_3', [TextUtility.escape('<thead>')]));
              }
              if (message.length === 0) {
                  return;
              }
              const report = {
                  message: message.join(' '),
                  node: tableElement,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(report);
          };
          tableElements.forEach(reportNode);
      }
  }

  class TitleiFrame extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'iframe, object';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.title_iframe),
              links: [
                  {
                      content: 'H64: Using the <code>title</code> attribute of the <code>frame</code> and <code>iframe</code> elements',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/H64.html'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(elements) {
          const reportNode = (element) => {
              let report;
              const titleContent = element.getAttribute('title');
              if (titleContent === null) {
                  report = {
                      message: TranslateService.instant('title_iframe_report_message_1', [TextUtility.escape(element.nodeName.toLowerCase())]),
                      node: element,
                      ruleId: this.ruleConfig.id
                  };
              }
              else {
                  const titleContentLength = TextUtility.safeTrim(titleContent).length;
                  if (titleContentLength === 0) {
                      report = {
                          message: TranslateService.instant('title_iframe_report_message_2', [TextUtility.escape(element.nodeName.toLowerCase())]),
                          node: element,
                          ruleId: this.ruleConfig.id
                      };
                  }
              }
              if (typeof report === 'undefined') {
                  return;
              }
              this.validator.report(report);
          };
          elements.forEach(reportNode);
      }
  }

  class Flickering extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = () => {
              return [DomUtility.getRootElement()];
          };
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.flickering),
              links: [
                  {
                      content: 'G19: Ensuring that no component of the content flashes more than three times in any 1-second period',
                      url: 'https://www.w3.org/TR/2016/NOTE-WCAG20-TECHS-20161007/G19'
                  }
              ],
              recommendations: [],
              severity: $severity.info,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(elements) {
          if (elements.length === 0) {
              return;
          }
          const report = {
              message: TranslateService.instant('flickering_report_message'),
              node: elements[0],
              ruleId: this.ruleConfig.id
          };
          this.validator.report(report);
      }
  }

  class CssImagesConveyInformation extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = `*${[
            ':not(:root)',
            ':not(head)',
            ':not(title)',
            ':not(body)',
            ':not(link)',
            ':not(meta)',
            ':not(title)',
            ':not(style)',
            ':not(script)',
            ':not(noscript)',
            ':not(iframe)'
        ].join('')}`;
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.css_images_convey_information),
              links: [
                  {
                      content: 'F3: Failure of Success Criterion 1.1.1 due to using CSS to include images that convey important information',
                      url: 'https://www.w3.org/WAI/GL/2016/WD-WCAG20-TECHS-20160105/F3'
                  }
              ],
              recommendations: [],
              severity: $severity.info,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(elements) {
          const reportNode = (element) => {
              const backgroundImage = Css.getStyle(element, 'background-image');
              if (DomUtility.hasDirectTextDescendant(element) === false || backgroundImage === null || backgroundImage === 'none' || DomUtility.isElementVisible(element) === false) {
                  return;
              }
              const report = {
                  message: TranslateService.instant('css_images_convey_information_report_message', [TextUtility.truncateInTheMiddle(backgroundImage)]),
                  node: element,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(report);
          };
          elements.forEach(reportNode);
      }
  }

  class MissingAltAttribute extends AbstractRule {
      constructor() {
          super(...arguments);
          this.appConfig = Config.getInstance();
          this.selector = 'img:not([alt]), area:not([alt]), input[type="image"]:not([alt]), [role="img"]:not([alt])';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.missing_alt_attribute),
              links: [
                  {
                      content: 'F65: Failure of Success Criterion 1.1.1 due to omitting the alt attribute or text alternative on img elements, area elements, and input elements of type "image"',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/F65.html'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      elementShouldBeSkipped(element) {
          let elementShouldBeSkipped = true;
          if (this.appConfig.get($runnerSettings.includeHidden)) {
              elementShouldBeSkipped = false;
              return elementShouldBeSkipped;
          }
          const styles = Css.getComputedStyle(element);
          const ariaHidden = DomUtility.getElementAttribute(element, 'aria-hidden');
          if (ariaHidden && ariaHidden.value === 'true') {
              return elementShouldBeSkipped;
          }
          if (DomUtility.isElementVisible(element) === false) {
              return elementShouldBeSkipped;
          }
          if (DomUtility.hasElementSemiOpacity(element, styles)) {
              return elementShouldBeSkipped;
          }
          return false;
      }
      validate(htmlElements) {
          const reportNode = (htmlElement) => {
              if (this.elementShouldBeSkipped(htmlElement)) {
                  this.validator.report({
                      message: '',
                      node: htmlElement,
                      ruleId: this.ruleConfig.id,
                      skipReason: $auditRuleNodeSkipReason.excludedFromScanning
                  });
                  return;
              }
              const report = {
                  message: TranslateService.instant('missing_alt_attribute_report_message'),
                  node: htmlElement,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(report);
          };
          htmlElements.forEach(reportNode);
      }
  }

  class CaptchaGoogle extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'iframe[src^="https://www.google.com/recaptcha/api2"]:not([title])';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.captcha_google),
              links: [
                  {
                      content: 'G144: Ensuring that the Web Page contains another CAPTCHA serving the same purpose using a different modality',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/G144.html'
                  },
                  {
                      content: 'Inaccessibility of CAPTCHA',
                      url: 'http://www.w3.org/TR/turingtest/'
                  },
                  {
                      content: 'Note on CAPTCHA',
                      url: 'https://www.w3.org/TR/UNDERSTANDING-WCAG20/complete.html#text-equiv-all-9-head'
                  },
                  {
                      content: 'Captcha Alternatives and thoughts',
                      url: 'https://www.w3.org/WAI/GL/wiki/Captcha_Alternatives_and_thoughts'
                  }
              ],
              recommendations: [],
              severity: $severity.info,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(iFrameElements) {
          const reportNode = (iFrameElement) => {
              const report = {
                  message: TranslateService.instant('captcha_google_link_report_message'),
                  node: iFrameElement,
                  ruleId: this.ruleConfig.id
              };
              try {
                  if (ObjectUtility.getTypeOf(Global.context.grecaptcha) === 'object') {
                      const res = Global.context.grecaptcha.getResponse();
                      const isReCaptchaV2 = typeof res === 'string';
                      if (isReCaptchaV2) {
                          this.validator.report(report);
                      }
                  }
              }
              catch (e) {
              }
          };
          iFrameElements.forEach(reportNode);
      }
  }

  class AreaMissingAlt extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'area';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.area_missing_alt),
              links: [
                  {
                      content: 'H24: Providing text alternatives for the <code>area</code> elements of image maps',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/H24.html'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(areaElements) {
          const reportNode = (areaElement) => {
              let message;
              const altContent = areaElement.getAttribute('alt');
              const altContentLength = typeof altContent === 'string' ? altContent.length : 0;
              const altContentTrimLength = typeof altContent === 'string' ? altContent.trim().length : 0;
              if (typeof altContent === 'string' && altContentTrimLength > 0) {
                  return;
              }
              if (altContent === null) {
                  message = TranslateService.instant('area_missing_alt_report_message_1');
              }
              else if (altContentLength === 0) {
                  message = TranslateService.instant('area_missing_alt_report_message_2');
              }
              else if (altContentTrimLength === 0) {
                  message = TranslateService.instant('area_missing_alt_report_message_3');
              }
              const report = {
                  message: message,
                  node: areaElement,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(report);
          };
          areaElements.forEach(reportNode);
      }
  }

  class AriaDescribedbyAssociation extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'iframe';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.aria_describedby_association),
              links: [
                  {
                      content: 'ARIA1: Using the aria-describedby property to provide a descriptive label for user interface controls',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/ARIA1.html'
                  }
              ],
              recommendations: [],
              severity: $severity.critical,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(iframeElements) {
          const checkAssociations = (iframeElement) => {
              let idReferences = iframeElement.getAttribute('aria-describedby');
              if (idReferences === null) {
                  return;
              }
              let ids;
              const isElementExists = (id) => {
                  const refNode = document.getElementById(id);
                  if (refNode === null) {
                      const report = {
                          message: TranslateService.instant('aria_describedby_association_report_message_1', [id, id]),
                          node: iframeElement,
                          ruleId: this.ruleConfig.id
                      };
                      this.validator.report(report);
                  }
              };
              idReferences = idReferences.trim();
              if (idReferences.length === 0) {
                  const report = {
                      message: TranslateService.instant('aria_describedby_association_report_message_2', [DomUtility.getEscapedOuterHTML(iframeElement)]),
                      node: iframeElement,
                      ruleId: this.ruleConfig.id
                  };
                  this.validator.report(report);
              }
              else {
                  ids = idReferences.split(/ +/).map(Function.prototype.call, String.prototype.trim);
                  ids.forEach(isElementExists);
              }
          };
          iframeElements.forEach(checkAssociations);
      }
  }

  class HeadingsHierarchy extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'h1, h2, h3, h4, h5, h6';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.headings_hierarchy),
              links: [
                  {
                      content: 'H42: Using h1-h6 to identify headings',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/H42.html'
                  },
                  {
                      content: 'G141: Organizing a page using headings',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/G141.html'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(headingElements) {
          const hierarchy = [];
          const sorted = [];
          const buildHeadersCollection = (headingElement) => {
              const currentElementName = headingElement.nodeName.toLowerCase();
              const currentElementIndex = parseInt(currentElementName.replace(/\D/g, ''), 10);
              const elementData = {
                  expectedIndex: 0,
                  headerIndex: currentElementIndex,
                  node: headingElement
              };
              hierarchy.push(elementData);
          };
          const report = (headingElement) => {
              if (headingElement.headerIndex === headingElement.expectedIndex) {
                  return;
              }
              const _report = {
                  expected: {
                      tag: `H${String(headingElement.expectedIndex)}`
                  },
                  message: TranslateService.instant('headings_hierarchy_report_message', [DomUtility.getNodeWithTextContent(headingElement.node), String(headingElement.expectedIndex)]),
                  node: headingElement.node,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(_report);
          };
          const sortHeaders = (item, index) => {
              const hierarchyDistance = index === 0 ? 0 : item.headerIndex - sorted[index - 1].expectedIndex;
              let validHeaderIndex = item.headerIndex;
              if (index === 0 && item.headerIndex !== 1) {
                  validHeaderIndex = 1;
              }
              else if (hierarchyDistance < -1) {
                  validHeaderIndex = hierarchy[index - 1].headerIndex + hierarchyDistance + 1;
              }
              else if (hierarchyDistance > 1) {
                  validHeaderIndex = item.headerIndex - hierarchyDistance + 1;
              }
              const sortedElementData = {
                  expectedIndex: validHeaderIndex,
                  headerIndex: item.headerIndex,
                  node: item.node
              };
              sorted.push(sortedElementData);
          };
          headingElements.forEach(buildHeadersCollection);
          hierarchy.forEach(sortHeaders);
          sorted.forEach(report);
      }
  }

  const NAMED_COLORS = Object.freeze([
      'abbey',
      'acadia',
      'acapulco',
      'aero blue',
      'affair',
      'akaroa',
      'alabaster',
      'albescent white',
      'algae green',
      'alice blue',
      'alizarin crimson',
      'allports',
      'almond frost',
      'almond',
      'alpine',
      'alto',
      'aluminium',
      'amaranth',
      'amazon',
      'amber',
      'americano',
      'amethyst smoke',
      'amethyst',
      'amour',
      'amulet',
      'anakiwa',
      'antique brass',
      'antique bronze',
      'anzac',
      'apache',
      'apple blossom',
      'apple green',
      'apple',
      'apricot peach',
      'apricot white',
      'apricot',
      'aqua deep',
      'aqua forest',
      'aqua haze',
      'aqua island',
      'aqua spring',
      'aqua squeeze',
      'aquamarine blue',
      'aquamarine',
      'arapawa',
      'armadillo',
      'arrowtown',
      'ash',
      'asparagus',
      'asphalt',
      'astra',
      'astral',
      'astronaut blue',
      'astronaut',
      'athens gray',
      'aths special',
      'atlantis',
      'atoll',
      'atomic tangerine',
      'au chico',
      'aubergine',
      'australian mint',
      'avocado',
      'axolotl',
      'azalea',
      'aztec',
      'azure radiance',
      'azure',
      'baby blue',
      'bahama blue',
      'bahia',
      'baja white',
      'bali hai',
      'baltic sea',
      'bamboo',
      'banana mania',
      'bandicoot',
      'barberry',
      'barley corn',
      'barley white',
      'barossa',
      'bastille',
      'battleship gray',
      'bay leaf',
      'bay of many',
      'bazaar',
      'bean  ',
      'beauty bush',
      'beaver',
      'beeswax',
      'beige',
      'bermuda gray',
      'bermuda',
      'beryl green',
      'bianca',
      'big stone',
      'bilbao',
      'biloba flower',
      'birch',
      'bird flower',
      'biscay',
      'bismark',
      'bison hide',
      'bistre',
      'bitter lemon',
      'bitter',
      'bittersweet',
      'bizarre',
      'black bean',
      'black forest',
      'black haze',
      'black marlin',
      'black olive',
      'black pearl',
      'black rock',
      'black rose',
      'black russian',
      'black squeeze',
      'black white',
      'black',
      'blackberry',
      'blackcurrant',
      'blaze orange',
      'bleach white',
      'bleached cedar',
      'blizzard blue',
      'blossom',
      'blue bayoux',
      'blue bell',
      'blue chalk',
      'blue charcoal',
      'blue chill',
      'blue diamond',
      'blue dianne',
      'blue gem',
      'blue haze',
      'blue lagoon',
      'blue marguerite',
      'blue ribbon',
      'blue romance',
      'blue smoke',
      'blue stone',
      'blue violet',
      'blue whale',
      'blue zodiac',
      'blue',
      'blumine',
      'blush pink',
      'blush',
      'bombay',
      'bon jour',
      'bondi blue',
      'bone',
      'bordeaux',
      'bossanova',
      'boston blue',
      'botticelli',
      'bottle green',
      'boulder',
      'bouquet',
      'bourbon',
      'bracken',
      'brandy punch',
      'brandy rose',
      'brandy',
      'breaker bay',
      'brick red',
      'bridal heath',
      'bridesmaid',
      'bright gray',
      'bright green',
      'bright red',
      'bright sun',
      'bright turquoise',
      'brilliant rose',
      'brink pink',
      'bronco',
      'bronze olive',
      'bronze',
      'bronzetone',
      'broom',
      'brown bramble',
      'brown derby',
      'brown pod',
      'brown rust',
      'brown tumbleweed',
      'brown',
      'bubbles',
      'buccaneer',
      'bud',
      'buddha gold',
      'buff',
      'bulgarian rose',
      'bull shot',
      'bunker',
      'bunting',
      'burgundy',
      'burnham',
      'burning orange',
      'burning sand',
      'burnt maroon',
      'burnt orange',
      'burnt sienna',
      'burnt umber',
      'bush',
      'buttercup',
      'buttered rum',
      'butterfly bush',
      'buttermilk',
      'buttery white',
      'cab sav',
      'cabaret',
      'cabbage pont',
      'cactus',
      'cadet blue',
      'cadillac',
      'cafe royale',
      'calico',
      'california',
      'calypso',
      'camarone',
      'camelot',
      'cameo',
      'camouflage green',
      'camouflage',
      'can can',
      'canary',
      'candlelight',
      'candy corn',
      'cannon black',
      'cannon pink',
      'cape cod',
      'cape honey',
      'cape palliser',
      'caper',
      'caramel',
      'cararra',
      'cardin green',
      'cardinal pink',
      'cardinal',
      'careys pink',
      'caribbean green',
      'carissma',
      'carla',
      'carmine',
      'carnaby tan',
      'carnation pink',
      'carnation',
      'carousel pink',
      'carrot orange',
      'casablanca',
      'casal',
      'cascade',
      'cashmere',
      'casper',
      'castro',
      'catalina blue',
      'catskill white',
      'cavern pink',
      'cedar wood finish',
      'cedar',
      'celadon',
      'celery',
      'celeste',
      'cello',
      'celtic',
      'cement',
      'ceramic',
      'cerise red',
      'cerise',
      'cerulean blue',
      'cerulean',
      'chablis',
      'chalet green',
      'chalky',
      'chambray',
      'chamois',
      'champagne',
      'chantilly',
      'charade',
      'chardon',
      'chardonnay',
      'charlotte',
      'charm',
      'chartreuse yellow',
      'chartreuse',
      'chateau green',
      'chatelle',
      'chathams blue',
      'chelsea cucumber',
      'chelsea gem',
      'chenin',
      'cherokee',
      'cherry pie',
      'cherrywood',
      'cherub',
      'chestnut rose',
      'chestnut',
      'chetwode blue',
      'chicago',
      'chiffon',
      'chilean fire',
      'chilean heath',
      'china ivory',
      'chino',
      'chinook',
      'chocolate',
      'christalle',
      'christi',
      'christine',
      'chrome white',
      'cinder',
      'cinderella',
      'cinnabar',
      'cinnamon',
      'cioccolato',
      'citrine white',
      'citron',
      'citrus',
      'clairvoyant',
      'clam shell',
      'claret',
      'classic rose',
      'clay ash',
      'clay creek',
      'clear day',
      'clementine',
      'clinker',
      'cloud burst',
      'cloud',
      'cloudy',
      'clover',
      'cobalt',
      'cocoa bean',
      'cocoa brown',
      'coconut cream',
      'cod gray',
      'coffee bean',
      'coffee',
      'cognac',
      'cola',
      'cold purple',
      'cold turkey',
      'colonial white',
      'comet',
      'como',
      'conch',
      'concord',
      'concrete',
      'confetti',
      'congo brown',
      'congress blue',
      'conifer',
      'contessa',
      'copper canyon',
      'copper rose',
      'copper rust',
      'copper',
      'copperfield',
      'coral red',
      'coral reef',
      'coral tree',
      'coral',
      'corduroy',
      'coriander',
      'cork',
      'corn field',
      'corn harvest',
      'corn',
      'cornflower blue',
      'cornflower lilac',
      'cornflower',
      'corvette',
      'cosmic',
      'cosmos',
      'costa del sol',
      'cotton candy',
      'cotton seed',
      'county green',
      'cowboy',
      'crail',
      'cranberry',
      'crater brown',
      'cream brulee',
      'cream can',
      'cream',
      'creole',
      'crete',
      'crimson',
      'crocodile',
      'crown of thorns',
      'crowshead',
      'cruise',
      'crusoe',
      'crusta',
      'cumin',
      'cumulus',
      'cupid',
      'curious blue',
      'cutty sark',
      'cyan / aqua',
      'cyprus',
      'daintree',
      'dairy cream',
      'daisy bush',
      'dallas',
      'dandelion',
      'danube',
      'dark blue',
      'dark burgundy',
      'dark ebony',
      'dark fern',
      'dark tan',
      'dawn pink',
      'dawn',
      'de york',
      'deco',
      'deep blue',
      'deep blush',
      'deep bronze',
      'deep cerulean',
      'deep cove',
      'deep fir',
      'deep forest green',
      'deep koamaru',
      'deep oak',
      'deep sapphire',
      'deep sea green',
      'deep sea',
      'deep teal',
      'del rio',
      'dell',
      'delta',
      'deluge',
      'denim',
      'derby',
      'desert sand',
      'desert storm',
      'desert',
      'dew',
      'di serria',
      'diesel',
      'dingley',
      'disco',
      'dixie',
      'dodger blue',
      'dolly',
      'dolphin',
      'domino',
      'don juan',
      'donkey brown',
      'dorado',
      'double colonial white',
      'double pearl lusta',
      'double spanish white',
      'dove gray',
      'downriver',
      'downy',
      'driftwood',
      'drover',
      'dull lavender',
      'dune',
      'dust storm',
      'dusty gray',
      'eagle',
      'earls green',
      'early dawn',
      'east bay',
      'east side',
      'eastern blue',
      'ebb',
      'ebony clay',
      'ebony',
      'eclipse',
      'ecru white',
      'ecstasy',
      'eden',
      'edgewater',
      'edward',
      'egg sour',
      'egg white',
      'eggplant',
      'el paso',
      'el salva',
      'electric lime',
      'electric violet',
      'elephant',
      'elf green',
      'elm',
      'emerald',
      'eminence',
      'emperor',
      'empress',
      'endeavour',
      'energy yellow',
      'english holly',
      'english walnut',
      'envy',
      'equator',
      'espresso',
      'eternity',
      'eucalyptus',
      'eunry',
      'evening sea',
      'everglade',
      'faded jade',
      'fair pink',
      'falcon',
      'fall green',
      'falu red',
      'fantasy',
      'fedora',
      'feijoa',
      'fern frond',
      'fern green',
      'fern',
      'ferra',
      'festival',
      'feta',
      'fiery orange',
      'finch',
      'finlandia',
      'finn',
      'fiord',
      'fire bush',
      'fire',
      'firefly',
      'flame pea',
      'flamenco',
      'flamingo',
      'flax smoke',
      'flax',
      'flesh',
      'flint',
      'flirt',
      'flush mahogany',
      'flush orange',
      'foam',
      'fog',
      'foggy gray',
      'forest green',
      'forget me not',
      'fountain blue',
      'frangipani',
      'french gray',
      'french lilac',
      'french pass',
      'french rose',
      'fresh eggplant',
      'friar gray',
      'fringy flower',
      'froly',
      'frost',
      'frosted mint',
      'frostee',
      'fruit salad',
      'fuchsia blue',
      'fuchsia pink',
      'fuego',
      'fuel yellow',
      'fun blue',
      'fun green',
      'fuscous gray',
      'fuzzy wuzzy brown',
      'gable green',
      'gallery',
      'galliano',
      'gamboge',
      'geebung',
      'genoa',
      'geraldine',
      'geyser',
      'ghost',
      'gigas',
      'gimblet',
      'gin fizz',
      'gin',
      'givry',
      'glacier',
      'glade green',
      'go ben',
      'goblin',
      'gold drop',
      'gold sand',
      'gold tips',
      'gold',
      'golden bell',
      'golden dream',
      'golden fizz',
      'golden glow',
      'golden grass',
      'golden sand',
      'golden tainoi',
      'goldenrod',
      'gondola',
      'gordons green',
      'gorse',
      'gossamer',
      'gossip',
      'gothic',
      'governor bay',
      'grain brown',
      'grandis',
      'granite green',
      'granny apple',
      'granny smith apple',
      'granny smith',
      'grape',
      'graphite',
      'gravel',
      'gray asparagus',
      'gray chateau',
      'gray nickel',
      'gray nurse',
      'gray olive',
      'gray suit',
      'gray',
      'green haze',
      'green house',
      'green kelp',
      'green leaf',
      'green mist',
      'green pea',
      'green smoke',
      'green spring',
      'green vogue',
      'green waterloo',
      'green white',
      'green yellow',
      'green',
      'grenadier',
      'guardsman red',
      'gulf blue',
      'gulf stream',
      'gull gray',
      'gum leaf',
      'gumbo',
      'gun powder',
      'gunsmoke',
      'gurkha',
      'hacienda',
      'hairy heath',
      'haiti',
      'half and half',
      'half baked',
      'half colonial white',
      'half dutch white',
      'half spanish white',
      'hampton',
      'harlequin',
      'harp',
      'harvest gold',
      'havelock blue',
      'hawaiian tan',
      'hawkes blue',
      'heath',
      'heather',
      'heathered gray',
      'heavy metal',
      'heliotrope',
      'hemlock',
      'hemp',
      'hibiscus',
      'highland',
      'hillary',
      'himalaya',
      'hint of green',
      'hint of red',
      'hint of yellow',
      'hippie blue',
      'hippie green',
      'hippie pink',
      'hit gray',
      'hit pink',
      'hokey pokey',
      'hoki',
      'holly',
      'hollywood cerise',
      'honey flower',
      'honeysuckle',
      'hopbush',
      'horizon',
      'horses neck',
      'hot cinnamon',
      'hot pink',
      'hot toddy',
      'humming bird',
      'hunter green',
      'hurricane',
      'husk',
      'ice cold',
      'iceberg',
      'illusion',
      'inch worm',
      'indian khaki',
      'indian tan',
      'indigo',
      'indochine',
      'international klein blue',
      'international orange',
      'irish coffee',
      'iroko',
      'iron',
      'ironside gray',
      'ironstone',
      'island spice',
      'ivory',
      'jacaranda',
      'jacarta',
      'jacko bean',
      'jacksons purple',
      'jade',
      'jaffa',
      'jagged ice',
      'jagger',
      'jaguar',
      'jambalaya',
      'janna',
      'japanese laurel',
      'japanese maple',
      'japonica',
      'java',
      'jazzberry jam',
      'jelly bean',
      'jet stream',
      'jewel',
      'jon',
      'jonquil',
      'jordy blue',
      'judge gray',
      'jumbo',
      'jungle green',
      'jungle mist',
      'juniper',
      'just right',
      'kabul',
      'kaitoke green',
      'kangaroo',
      'karaka',
      'karry',
      'kashmir blue',
      'kelp',
      'kenyan copper',
      'keppel',
      'key lime pie',
      'khaki',
      'kidnapper',
      'kilamanjaro',
      'killarney',
      'kimberly',
      'kingfisher daisy',
      'kobi',
      'kokoda',
      'korma',
      'koromiko',
      'kournikova',
      'kumera',
      'la palma',
      'la rioja',
      'las palmas',
      'laser lemon',
      'laser',
      'laurel',
      'lavender blush',
      'lavender gray',
      'lavender magenta',
      'lavender pink',
      'lavender purple',
      'lavender rose',
      'lavender',
      'leather',
      'lemon chiffon',
      'lemon ginger',
      'lemon grass',
      'lemon',
      'light apricot',
      'light orchid',
      'light wisteria',
      'lightning yellow',
      'lilac bush',
      'lilac',
      'lily white',
      'lily',
      'lima',
      'lime',
      'limeade',
      'limed ash',
      'limed oak',
      'limed spruce',
      'linen',
      'link water',
      'lipstick',
      'lisbon brown',
      'livid brown',
      'loafer',
      'loblolly',
      'lochinvar',
      'lochmara',
      'locust',
      'log cabin',
      'logan',
      'lola',
      'london hue',
      'lonestar',
      'lotus',
      'loulou',
      'lucky point',
      'lucky',
      'lunar green',
      'luxor gold',
      'lynch',
      'mabel',
      'macaroni and cheese',
      'madang',
      'madison',
      'madras',
      'magenta / fuchsia',
      'magic mint',
      'magnolia',
      'mahogany',
      'mai tai',
      'maize',
      'makara',
      'mako',
      'malachite',
      'malibu',
      'mallard',
      'malta',
      'mamba',
      'manatee',
      'mandalay',
      'mandy',
      'mandys pink',
      'mango tango',
      'manhattan',
      'mantis',
      'mantle',
      'manz',
      'mardi gras',
      'marigold yellow',
      'marigold',
      'mariner',
      'maroon flush',
      'maroon oak',
      'maroon',
      'marshland',
      'martini',
      'martinique',
      'marzipan',
      'masala',
      'matisse',
      'matrix',
      'matterhorn',
      'mauve',
      'mauvelous',
      'maverick',
      'medium carmine',
      'medium purple',
      'medium red violet',
      'melanie',
      'melanzane',
      'melon',
      'melrose',
      'mercury',
      'merino',
      'merlin',
      'merlot',
      'metallic bronze',
      'metallic copper',
      'meteor',
      'meteorite',
      'mexican red',
      'mid gray',
      'midnight blue',
      'midnight moss',
      'midnight',
      'mikado',
      'milan',
      'milano red',
      'milk punch',
      'millbrook',
      'mimosa',
      'mindaro',
      'mine shaft',
      'mineral green',
      'ming',
      'minsk',
      'mint green',
      'mint julep',
      'mint tulip',
      'mirage',
      'mischka',
      'mist gray',
      'mobster',
      'moccaccino',
      'mocha',
      'mojo',
      'mona lisa',
      'monarch',
      'mondo',
      'mongoose',
      'monsoon',
      'monte carlo',
      'monza',
      'moody blue',
      'moon glow',
      'moon mist',
      'moon raker',
      'morning glory',
      'morocco brown',
      'mortar',
      'mosque',
      'moss green',
      'mountain meadow',
      'mountain mist',
      'mountbatten pink',
      'muddy waters',
      'muesli',
      'mulberry wood',
      'mulberry',
      'mule fawn',
      'mulled wine',
      'mustard',
      'my pink',
      'my sin',
      'mystic',
      'nandor',
      'napa',
      'narvik',
      'natural gray',
      'navajo white',
      'navy blue',
      'nebula',
      'negroni',
      'neon carrot',
      'nepal',
      'neptune',
      'nero',
      'nevada',
      'new orleans',
      'new york pink',
      'niagara',
      'night rider',
      'night shadz',
      'nile blue',
      'nobel',
      'nomad',
      'norway',
      'nugget',
      'nutmeg wood finish',
      'nutmeg',
      'oasis',
      'observatory',
      'ocean green',
      'ochre',
      'off green',
      'off yellow',
      'oil',
      'old brick',
      'old copper',
      'old gold',
      'old lace',
      'old lavender',
      'old rose',
      'olive drab',
      'olive green',
      'olive haze',
      'olive',
      'olivetone',
      'olivine',
      'onahau',
      'onion',
      'opal',
      'opium',
      'oracle',
      'orange peel',
      'orange roughy',
      'orange white',
      'orange',
      'orchid white',
      'orchid',
      'oregon',
      'orient',
      'oriental pink',
      'orinoco',
      'oslo gray',
      'ottoman',
      'outer space',
      'outrageous orange',
      'oxford blue',
      'oxley',
      'oyster bay',
      'oyster pink',
      'paarl',
      'pablo',
      'pacific blue',
      'pacifika',
      'paco',
      'padua',
      'pale canary',
      'pale leaf',
      'pale oyster',
      'pale prim',
      'pale rose',
      'pale sky',
      'pale slate',
      'palm green',
      'palm leaf',
      'pampas',
      'panache',
      'pancho',
      'papaya whip',
      'paprika',
      'paradiso',
      'parchment',
      'paris daisy',
      'paris m',
      'paris white',
      'parsley',
      'pastel green',
      'pastel pink',
      'patina',
      'pattens blue',
      'paua',
      'pavlova',
      'peach cream',
      'peach orange',
      'peach schnapps',
      'peach yellow',
      'peach',
      'peanut',
      'pear',
      'pearl bush',
      'pearl lusta',
      'peat',
      'pelorous',
      'peppermint',
      'perano',
      'perfume',
      'periglacial blue',
      'periwinkle gray',
      'periwinkle',
      'persian blue',
      'persian green',
      'persian indigo',
      'persian pink',
      'persian plum',
      'persian red',
      'persian rose',
      'persimmon',
      'peru tan',
      'pesto',
      'petite orchid',
      'pewter',
      'pharlap',
      'picasso',
      'pickled bean',
      'pickled bluewood',
      'picton blue',
      'pig pink',
      'pigeon post',
      'pigment indigo',
      'pine cone',
      'pine glade',
      'pine green',
      'pine tree',
      'pink flamingo',
      'pink flare',
      'pink lace',
      'pink lady',
      'pink salmon',
      'pink swan',
      'pink',
      'piper',
      'pipi',
      'pippin',
      'pirate gold',
      'pistachio',
      'pixie green',
      'pizazz',
      'pizza',
      'plantation',
      'plum',
      'pohutukawa',
      'polar',
      'polo blue',
      'pomegranate',
      'pompadour',
      'porcelain',
      'porsche',
      'port gore',
      'portafino',
      'portage',
      'portica',
      'pot pourri',
      'potters clay',
      'powder ash',
      'powder blue',
      'prairie sand',
      'prelude',
      'prim',
      'primrose',
      'provincial pink',
      'prussian blue',
      'puce',
      'pueblo',
      'puerto rico',
      'pumice',
      'pumpkin skin',
      'pumpkin',
      'punch',
      'punga',
      'purple heart',
      'purple mountain\'s majesty',
      'purple pizzazz',
      'purple',
      'putty',
      'quarter pearl lusta',
      'quarter spanish white',
      'quicksand',
      'quill gray',
      'quincy',
      'racing green',
      'radical red',
      'raffia',
      'rainee',
      'rajah',
      'rangitoto',
      'rangoon green',
      'raven',
      'raw sienna',
      'raw umber',
      'razzle dazzle rose',
      'razzmatazz',
      'rebel',
      'red beech',
      'red berry',
      'red damask',
      'red devil',
      'red orange',
      'red oxide',
      'red ribbon',
      'red robin',
      'red stage',
      'red violet',
      'red',
      'redwood',
      'reef gold',
      'reef',
      'regal blue',
      'regent gray',
      'regent st blue',
      'remy',
      'reno sand',
      'resolution blue',
      'revolver',
      'rhino',
      'rice cake',
      'rice flower',
      'rich gold',
      'rio grande',
      'ripe lemon',
      'ripe plum',
      'riptide',
      'river bed',
      'rob roy',
      'robin\'s egg blue',
      'rock blue',
      'rock spray',
      'rock',
      'rodeo dust',
      'rolling stone',
      'roman coffee',
      'roman',
      'romance',
      'romantic',
      'ronchi',
      'roof terracotta',
      'rope',
      'rose bud cherry',
      'rose bud',
      'rose fog',
      'rose of sharon',
      'rose white',
      'rose',
      'rosewood',
      'roti',
      'rouge',
      'royal blue',
      'royal heath',
      'royal purple',
      'rum swizzle',
      'rum',
      'russet',
      'russett',
      'rust',
      'rustic red',
      'rusty nail',
      'saddle brown',
      'saddle',
      'saffron mango',
      'saffron',
      'sage',
      'sahara sand',
      'sahara',
      'sail',
      'salem',
      'salmon',
      'salomie',
      'salt box',
      'saltpan',
      'sambuca',
      'san felix',
      'san juan',
      'san marino',
      'sand dune',
      'sandal',
      'sandrift',
      'sandstone',
      'sandwisp',
      'sandy beach',
      'sandy brown',
      'sangria',
      'sanguine brown',
      'santa fe',
      'santas gray',
      'sapling',
      'sapphire',
      'saratoga',
      'satin linen',
      'sauvignon',
      'sazerac',
      'scampi',
      'scandal',
      'scarlet gum',
      'scarlet',
      'scarlett',
      'scarpa flow',
      'schist',
      'school bus yellow',
      'schooner',
      'science blue',
      'scooter',
      'scorpion',
      'scotch mist',
      'screamin\' green',
      'sea buckthorn',
      'sea green',
      'sea mist',
      'sea nymph',
      'sea pink',
      'seagull',
      'seance',
      'seashell peach',
      'seashell',
      'seaweed',
      'selago',
      'selective yellow',
      'sepia black',
      'sepia skin',
      'sepia',
      'serenade',
      'shadow green',
      'shadow',
      'shady lady',
      'shakespeare',
      'shalimar',
      'shamrock',
      'shark',
      'sherpa blue',
      'sherwood green',
      'shilo',
      'shingle fawn',
      'ship cove',
      'ship gray',
      'shiraz',
      'shocking pink',
      'shocking',
      'shuttle gray',
      'siam',
      'sidecar',
      'silk',
      'silver chalice',
      'silver rust',
      'silver sand',
      'silver tree',
      'silver',
      'sinbad',
      'siren',
      'sirocco',
      'sisal',
      'skeptic',
      'sky blue',
      'slate gray',
      'smalt blue',
      'smalt',
      'smoky',
      'snow drift',
      'snow flurry',
      'snowy mint',
      'snuff',
      'soapstone',
      'soft amber',
      'soft peach',
      'solid pink',
      'solitaire',
      'solitude',
      'sorbus',
      'sorrell brown',
      'soya bean',
      'spanish green',
      'spectra',
      'spice',
      'spicy mix',
      'spicy mustard',
      'spicy pink',
      'spindle',
      'spray',
      'spring green',
      'spring leaves',
      'spring rain',
      'spring sun',
      'spring wood',
      'sprout',
      'spun pearl',
      'squirrel',
      'st tropaz',
      'stack',
      'star dust',
      'stark white',
      'starship',
      'steel blue',
      'steel gray',
      'stiletto',
      'stonewall',
      'storm dust',
      'storm gray',
      'stratos',
      'straw',
      'strikemaster',
      'stromboli',
      'studio',
      'submarine',
      'sugar cane',
      'sulu',
      'summer green',
      'sun',
      'sundance',
      'sundown',
      'sunflower',
      'sunglo',
      'sunglow',
      'sunset orange',
      'sunshade',
      'supernova',
      'surf crest',
      'surf',
      'surfie green',
      'sushi',
      'suva gray',
      'swamp green',
      'swamp',
      'swans down',
      'sweet corn',
      'sweet pink',
      'swirl',
      'swiss coffee',
      'sycamore',
      'tabasco',
      'tacao',
      'tacha',
      'tahiti gold',
      'tahuna sands',
      'tall poppy',
      'tallow',
      'tamarillo',
      'tamarind',
      'tan hide',
      'tan',
      'tana',
      'tangaroa',
      'tangerine',
      'tango',
      'tapa',
      'tapestry',
      'tara',
      'tarawera',
      'tasman',
      'taupe gray',
      'taupe',
      'tawny port',
      'te papa green',
      'tea green',
      'tea',
      'teak',
      'teal blue',
      'teal',
      'temptress',
      'tenn',
      'tequila',
      'terracotta',
      'texas rose',
      'texas',
      'thatch green',
      'thatch',
      'thistle green',
      'thistle',
      'thunder',
      'thunderbird',
      'tia maria',
      'tiara',
      'tiber',
      'tickle me pink',
      'tidal',
      'tide',
      'timber green',
      'timberwolf',
      'titan white',
      'toast',
      'tobacco brown',
      'toledo',
      'tolopea',
      'tom thumb',
      'tonys pink',
      'topaz',
      'torch red',
      'torea bay',
      'tory blue',
      'tosca',
      'totem pole',
      'tower gray',
      'tradewind',
      'tranquil',
      'travertine',
      'tree poppy',
      'treehouse',
      'trendy green',
      'trendy pink',
      'trinidad',
      'tropical blue',
      'tropical rain forest',
      'trout',
      'true v',
      'tuatara',
      'tuft bush',
      'tulip tree',
      'tumbleweed',
      'tuna',
      'tundora',
      'turbo',
      'turkish rose',
      'turmeric',
      'turquoise blue',
      'turquoise',
      'turtle green',
      'tuscany',
      'tusk',
      'tussock',
      'tutu',
      'twilight blue',
      'twilight',
      'twine',
      'tyrian purple',
      'ultramarine',
      'valencia',
      'valentino',
      'valhalla',
      'van cleef',
      'vanilla ice',
      'vanilla',
      'varden',
      'venetian red',
      'venice blue',
      'venus',
      'verdigris',
      'verdun green',
      'vermilion',
      'vesuvius',
      'victoria',
      'vida loca',
      'viking',
      'vin rouge',
      'viola',
      'violent violet',
      'violet eggplant',
      'violet red',
      'violet',
      'viridian green',
      'viridian',
      'vis vis',
      'vista blue',
      'vista white',
      'vivid tangerine',
      'vivid violet',
      'voodoo',
      'vulcan',
      'wafer',
      'waikawa gray',
      'waiouru',
      'walnut',
      'wasabi',
      'water leaf',
      'watercourse',
      'waterloo ',
      'wattle',
      'watusi',
      'wax flower',
      'we peep',
      'web orange',
      'wedgewood',
      'well read',
      'west coast',
      'west side',
      'westar',
      'wewak',
      'wheat',
      'wheatfield',
      'whiskey',
      'whisper',
      'white ice',
      'white lilac',
      'white linen',
      'white pointer',
      'white rock',
      'white',
      'wild blue yonder',
      'wild rice',
      'wild sand',
      'wild strawberry',
      'wild watermelon',
      'wild willow',
      'william',
      'willow brook',
      'willow grove',
      'windsor',
      'wine berry',
      'winter hazel',
      'wisp pink',
      'wisteria',
      'wistful',
      'witch haze',
      'wood bark',
      'woodland',
      'woodrush',
      'woodsmoke',
      'woody brown',
      'xanadu',
      'yellow green',
      'yellow metal',
      'yellow orange',
      'yellow sea',
      'yellow',
      'your pink',
      'yukon gold',
      'yuma',
      'zambezi',
      'zanah',
      'zest',
      'zeus',
      'ziggurat',
      'zinnwaldite',
      'zircon',
      'zombie',
      'zorba',
      'zuccini',
      'zumthor'
  ]);

  const reg$1 = RegExp(`\\b(${NAMED_COLORS.join('|')})\\b`, 'igm');
  class AltColorConveyInformation extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = '[alt]';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.alt_color_convey_information),
              links: [
                  {
                      content: 'F13: Failure of Success Criterion 1.1.1 and 1.4.1 due to having a text alternative that does not include information that is conveyed by color differences in the image',
                      url: 'https://www.w3.org/WAI/GL/2016/WD-WCAG20-TECHS-20160105/F13'
                  }
              ],
              recommendations: [],
              severity: $severity.info,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(nodes) {
          const reportNode = (element) => {
              const altContent = element.getAttribute('alt');
              if (altContent === null || TextUtility.safeTrim(altContent).length === 0) {
                  return;
              }
              const altContentLowerCase = altContent.toLowerCase();
              const matches = altContentLowerCase.match(reg$1);
              if (Array.isArray(matches) && matches.length > 0) {
                  const report = {
                      message: TranslateService.instant('alt_color_convey_information_report_message', [matches.join(', ')]),
                      node: element,
                      ruleId: this.ruleConfig.id
                  };
                  this.validator.report(report);
              }
          };
          nodes.forEach(reportNode);
      }
  }

  const skipElements = [
      'body',
      'br',
      'code',
      'defs',
      'desc',
      'filter',
      'g',
      'head',
      'hr',
      'iframe',
      'img',
      'input',
      'linearGradient',
      'link',
      'meta',
      'noscript',
      'object',
      'path',
      'script',
      'stop',
      'style',
      'title'
  ];
  const reg = RegExp(`\\b(${NAMED_COLORS.join('|')})\\b`, 'igm');
  class TextColorConveyInformation extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'body';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.text_color_convey_information),
              links: [
                  {
                      content: 'G14: Ensuring that information conveyed by color differences is also available in text',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/G14.html'
                  }
              ],
              recommendations: [],
              severity: $severity.info,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(htmlElements) {
          if (htmlElements.length === 0) {
              return;
          }
          const rootElement = htmlElements[0];
          const nodeIterator = document.createNodeIterator(rootElement, NodeFilter.SHOW_TEXT, {
              acceptNode(node) {
                  return node.nodeType === Node.ELEMENT_NODE && skipElements.includes(node.nodeName.toLowerCase()) || node.nodeType === Node.TEXT_NODE && node.parentNode && skipElements.includes(node.parentNode.nodeName.toLowerCase()) ? NodeFilter.FILTER_REJECT : NodeFilter.FILTER_ACCEPT;
              }
          });
          let textnode = nodeIterator.nextNode();
          if (textnode === null) {
              return;
          }
          while (textnode && textnode.textContent) {
              const textContent = textnode.textContent.trim();
              if (textContent.length > 0) {
                  const matches = textContent.match(reg);
                  if (Array.isArray(matches) && matches.length > 0) {
                      const report = {
                          message: TranslateService.instant('text_color_convey_information_report_message', [matches.join(', ')]),
                          node: textnode.parentElement,
                          ruleId: this.ruleConfig.id
                      };
                      this.validator.report(report);
                  }
              }
              textnode = nodeIterator.nextNode();
          }
      }
  }

  class AutoplayAudioVideo extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'iframe[allow*="autoplay=1"], iframe[src*="autoplay=1"], [autoplay]';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.autoplay_audio_video),
              links: [
                  {
                      content: 'Audio Control: Understanding SC 1.4.2',
                      url: 'https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-dis-audio.html'
                  },
                  {
                      content: 'Pause, Stop, Hide: Understanding SC 2.2.2',
                      url: 'https://www.w3.org/TR/UNDERSTANDING-WCAG20/time-limits-pause.html'
                  }
              ],
              recommendations: [],
              severity: $severity.critical,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(mediaElements) {
          const reportAutoPlay = (mediaElement) => {
              const problem = {
                  message: '',
                  node: mediaElement,
                  ruleId: this.ruleConfig.id
              };
              if (typeof mediaElement.autoplay === 'boolean' && mediaElement.autoplay) {
                  problem.message = TranslateService.instant('autoplay_audio_video_report_message', ['autoplay="true"']);
                  this.validator.report(problem);
              }
              else if (mediaElement.nodeName.toLowerCase() === 'iframe') {
                  problem.message = TranslateService.instant('autoplay_audio_video_report_message', [mediaElement.allow]);
                  this.validator.report(problem);
              }
          };
          mediaElements.forEach(reportAutoPlay);
      }
  }

  class ZoomDisabled extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'meta';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.zoom_disabled),
              links: [
                  {
                      content: 'G142: Using a technology that has commonly-available user agents that support zoom',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/G142.html'
                  },
                  {
                      content: 'Resize text: Understanding Success Criterion 1.4.4',
                      url: 'http://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-scale.html'
                  }
              ],
              recommendations: [],
              severity: $severity.critical,
              type: CATEGORY_TYPE.WCAG_AA
          };
      }
      validate(metaElements) {
          const checkForUserScalable = (metaElement) => {
              const parameters = [];
              if ((/user-scalable\s*=\s*no/).test(metaElement.content)) {
                  parameters.push('user-scalable=no');
              }
              if ((/user-scalable\s*=\s*0/).test(metaElement.content)) {
                  parameters.push('user-scalable=0');
              }
              if ((/maximum-scale/).test(metaElement.content)) {
                  parameters.push('maximum-scale');
              }
              if ((/minimum-scale/).test(metaElement.content)) {
                  parameters.push('minimum-scale');
              }
              if (parameters.length === 0) {
                  return;
              }
              const report = {
                  message: TranslateService.instant('zoom_disabled_report_message', [parameters.join(', ')]),
                  node: metaElement,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(report);
          };
          metaElements.forEach(checkForUserScalable);
      }
  }

  class Animation extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = `*${[
            ':root',
            'head',
            'body',
            'title',
            'style',
            'script',
            'noscript',
            'meta',
            'link',
            'br',
            'hr',
            'object',
            'path',
            'g',
            'linearGradient',
            'stop',
            'desc',
            'filter',
            'img',
            'input',
            'iframe',
            'code',
            'defs',
            ':empty'
        ].map((i) => {
            return `:not(${i})`;
        }).join('')}`;
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.animation),
              links: [
                  {
                      content: 'Pause, Stop, Hide',
                      url: 'https://www.w3.org/TR/UNDERSTANDING-WCAG20/time-limits-pause.html'
                  },
                  {
                      content: 'F16: Failure of Success Criterion 2.2.2 due to including scrolling content where movement is not essential to the activity without also including a mechanism to pause and restart the content',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/F16.html'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(htmlElements) {
          const ONE_SECOND_IN_MILISECONDS = 1000;
          const reportNode = (htmlElement) => {
              let duration = Css.getStyle(htmlElement, 'animation-duration');
              const animationIterationCount = Css.getStyle(htmlElement, 'animation-iteration-count');
              if (duration === null || animationIterationCount === null) {
                  return;
              }
              if ((/\d*\s*(ms)$/).test(duration)) {
                  duration = String(Number(duration) / ONE_SECOND_IN_MILISECONDS);
              }
              const report = {
                  message: '',
                  node: htmlElement,
                  ruleId: this.ruleConfig.id
              };
              const reportMessage = [];
              if (Number(duration.replace(/[^\d.-]/g, '')) > 5) {
                  reportMessage.push(TranslateService.instant('animation_report_message_1', [duration]));
              }
              if (animationIterationCount === 'infinite') {
                  reportMessage.push(TranslateService.instant('animation_report_message_2', [animationIterationCount, DomUtility.getEscapedNodeHTML(htmlElement)]));
              }
              if (reportMessage.length === 0) {
                  return;
              }
              reportMessage.push(TranslateService.instant('animation_report_message_0'));
              report.message = reportMessage.join(' ');
              this.validator.report(report);
          };
          htmlElements.forEach(reportNode);
      }
  }

  class BlinkElement extends AbstractRule {
      constructor() {
          super(...arguments);
          this.appConfig = Config.getInstance();
          this.selector = 'blink';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.blink_element),
              links: [
                  {
                      content: 'Pause, Stop, Hide',
                      url: 'https://www.w3.org/TR/2016/NOTE-UNDERSTANDING-WCAG20-20161007/time-limits-pause.html'
                  },
                  {
                      content: 'F47: Failure of Success Criterion 2.2.2 due to using the blink element',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/F47.html'
                  }
              ],
              recommendations: [],
              severity: $severity.info,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(elements) {
          const includeHidden = this.appConfig.get($runnerSettings.includeHidden);
          const reportNode = (element) => {
              const report = {
                  message: '',
                  node: element,
                  ruleId: this.ruleConfig.id
              };
              if (includeHidden === false && (DomUtility.isElementVisible(element) === false || DomUtility.isHiddenByParent(element))) {
                  report.message = TranslateService.instant('skip_reason_hidden_option');
                  report.skipReason = $auditRuleNodeSkipReason.excludedFromScanning;
              }
              else if (DomUtility.isElementVisible(element) === false || DomUtility.isHiddenByParent(element)) {
                  report.message = TranslateService.instant('blink_element_report_message_2', [DomUtility.getEscapedNodeHTML(element)]);
                  report.skipReason = $auditRuleNodeSkipReason.excludedFromScanning;
              }
              else {
                  report.message = TranslateService.instant('blink_element_report_message_1', [DomUtility.getEscapedNodeHTML(element)]);
              }
              this.validator.report(report);
          };
          elements.forEach(reportNode);
      }
  }

  class AriaLabelledbyAssociation extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = '[aria-labelledby]';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.aria_labelledby_association),
              links: [
                  {
                      content: '2.4.4 Link Purpose (In Context)',
                      url: 'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#navigation-mechanisms-refs'
                  },
                  {
                      content: 'ARIA7: Using aria-labelledby for link purpose',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/ARIA7.html'
                  }
              ],
              recommendations: [],
              severity: $severity.critical,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(elements) {
          const processNodes = (element) => {
              const idReferences = element.getAttribute('aria-labelledby');
              let ids;
              let report;
              const isElementExists = (id) => {
                  const refNode = document.getElementById(id);
                  if (refNode !== null) {
                      return;
                  }
                  report = {
                      message: TranslateService.instant('aria_labelledby_association_report_message_1', [id, DomUtility.getEscapedOuterHTML(element)]),
                      node: element,
                      ruleId: this.ruleConfig.id
                  };
              };
              if (typeof idReferences === 'string') {
                  if (idReferences.trim().length === 0) {
                      report = {
                          message: TranslateService.instant('aria_labelledby_association_report_message_2', [DomUtility.getEscapedOuterHTML(element)]),
                          node: element,
                          ruleId: this.ruleConfig.id
                      };
                      this.validator.report(report);
                  }
                  else {
                      ids = idReferences.split(/ +/).map(Function.prototype.call, String.prototype.trim);
                      ids.forEach(isElementExists);
                  }
              }
          };
          elements.forEach(processNodes);
      }
  }

  class ClickVerb extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'a';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.click_verb),
              links: [
                  {
                      content: 'Link Purpose (In Context)',
                      url: 'https://www.w3.org/TR/WCAG21/#link-purpose-in-context'
                  },
                  {
                      content: 'Don\'t use "click here" as link text',
                      url: 'https://www.w3.org/QA/Tips/noClickHere'
                  }
              ],
              recommendations: [],
              severity: $severity.low,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(nodes) {
          const STRING_OUT_OF_CONTEXT = new Set([
              'click',
              'click here',
              'click this',
              'click me'
          ]);
          const reportNode = (element) => {
              if (element.hasChildNodes() === false) {
                  return;
              }
              const content = TextUtility.safeTrim(DomUtility.nodesToText(element));
              if (STRING_OUT_OF_CONTEXT.has(content.toLowerCase()) === false) {
                  return;
              }
              const report = {
                  message: TranslateService.instant('click_verb_report_message'),
                  node: element,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(report);
          };
          nodes.forEach(reportNode);
      }
  }

  class NoHeadings extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'h1, h2, h3, h4, h5, h6';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.no_headings),
              links: [
                  {
                      content: 'Section headings are used to organize the content.',
                      url: 'https://www.w3.org/TR/UNDERSTANDING-WCAG20/navigation-mechanisms-headings.html'
                  }
              ],
              recommendations: [],
              severity: $severity.info,
              type: CATEGORY_TYPE.WCAG_AAA
          };
      }
      validate(nodes) {
          if (nodes.length > 0) {
              return;
          }
          const report = {
              message: TranslateService.instant('no_headings_report_message'),
              node: null,
              ruleId: this.ruleConfig.id
          };
          this.validator.report(report);
      }
  }

  class FontStyleItalic extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = `*${[
            ':root',
            'head',
            'style',
            'script',
            'noscript',
            'meta',
            'link',
            'br',
            'hr',
            'object',
            'svg',
            'path',
            'defs',
            'rect',
            'clippath',
            'use',
            'g',
            'b',
            'filter',
            'img',
            'picture',
            'input',
            'iframe',
            'code',
            'metadata',
            ':empty'
        ].map((i) => {
            return `:not(${i})`;
        }).join('')}`;
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.font_style_italic),
              links: [
                  {
                      content: 'Avoiding chunks of italic text',
                      url: 'https://www.w3.org/TR/UNDERSTANDING-WCAG20/meaning.html'
                  }
              ],
              recommendations: [],
              severity: $severity.info,
              type: CATEGORY_TYPE.BEST_PRACTICE
          };
      }
      validate(elements) {
          const reportNode = (element) => {
              let isItalic = false;
              const textContent = DomUtility.getTextFromDescendantContent(element).trim();
              const textContentLength = textContent.length;
              const REASONABLE_LONG_TEXT = 80;
              if (Css.getStyle(element, 'font-style') === 'italic' || typeof element.style === 'object' && element.style.fontStyle === 'italic') {
                  isItalic = true;
              }
              if (isItalic === false || textContentLength < REASONABLE_LONG_TEXT) {
                  return;
              }
              const report = {
                  message: TranslateService.instant('font_style_italic_report_message', [textContentLength]),
                  node: element,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(report);
          };
          elements.forEach(reportNode);
      }
  }

  class HtmlLangAttr extends AbstractRule {
      constructor(root = document.documentElement) {
          super();
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.html_lang_attr),
              links: [
                  {
                      content: 'H57: Using language attributes on the html element',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/H57.html'
                  },
                  {
                      content: '8.1 Specifying the language of content: the lang attribute',
                      url: 'https://www.w3.org/TR/html4/struct/dirlang.html'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.WCAG_A
          };
          this.root = root;
      }
      async run(context, validator, options) {
          if (CommonUtility.hasKey(context, 'nodeType') && context.nodeType !== NODE_TYPE.DOCUMENT_NODE) {
              return;
          }
          this.root = DomUtility.getRootElement();
          await super.run(context, validator, options);
      }
      validate() {
          const root = this.root;
          if (typeof root !== 'object') {
              return;
          }
          const report = {
              message: '',
              node: root,
              ruleId: this.ruleConfig.id
          };
          const langAttribute = root.getAttribute('lang');
          if (typeof langAttribute === 'string') {
              if (TextUtility.safeTrim(langAttribute).length === 0) {
                  report.message = TranslateService.instant('html_lang_attr_report_message_3', [DomUtility.getEscapedOuterHTML(root), langAttribute]);
              }
              else {
                  const langCodes = langAttribute.split('-');
                  const langCodesLength = langCodes.length;
                  if (langCodesLength > 3) {
                      report.message = TranslateService.instant('html_lang_attr_report_message_1', [langAttribute]);
                  }
              }
          }
          else {
              report.message = TranslateService.instant('html_lang_attr_report_message_2', [DomUtility.getEscapedOuterHTML(root)]);
          }
          if (report.message.length === 0) {
              return;
          }
          this.validator.report(report);
      }
  }

  class DuplicatedIdAttribute extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = '[id]';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.duplicated_id_attribute),
              links: [
                  {
                      content: 'H93: Ensuring that id attributes are unique on a Web page',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/H93.html'
                  },
                  {
                      content: 'F77: Failure of Success Criterion 4.1.1 due to duplicate values of type ID',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/F77.html'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(elements) {
          const ids = {};
          const checkIdAttribute = (element) => {
              const idAttr = element.getAttribute('id');
              if (idAttr === null || idAttr.length === 0 || TextUtility.containsSpaceCharacter(idAttr)) {
                  return;
              }
              if (ids[element.id]) {
                  ids[element.id].elements.push(element);
              }
              else {
                  ids[element.id] = {
                      elements: [element]
                  };
              }
          };
          const showReport = (id) => {
              const counter = ids[id].elements.length;
              if (counter > 1) {
                  const reportIssue = (element) => {
                      const report = {
                          message: TranslateService.instant('duplicated_id_attribute_report_message', [id, counter]),
                          node: element,
                          ruleId: this.ruleConfig.id
                      };
                      this.validator.report(report);
                  };
                  ids[id].elements.forEach(reportIssue);
              }
          };
          elements.forEach(checkIdAttribute);
          Object.keys(ids).forEach(showReport);
      }
  }

  class PositionSticky extends AbstractRule {
      constructor(styleSheets = []) {
          super();
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.position_sticky),
              links: [
                  {
                      content: 'Success Criterion 1.4.8 Visual Presentation',
                      url: 'https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-visual-presentation.html'
                  }
              ],
              recommendations: [],
              severity: $severity.low,
              type: CATEGORY_TYPE.WCAG_AAA
          };
          this.styleSheets = styleSheets;
      }
      validateFromContext(elements) {
          const checkForPositionSticky = (element) => {
              const computedPosition = Css.getStyle(element, 'position');
              if (computedPosition === 'sticky') {
                  const report = {
                      message: TranslateService.instant('position_sticky_context_css_report_message', [DomUtility.getEscapedOuterHTML(element)]),
                      node: element,
                      ruleId: this.ruleConfig.id
                  };
                  this.validator.report(report);
              }
              else {
                  const inlineStylePosition = Css.getStyle(element, 'position');
                  if (inlineStylePosition && inlineStylePosition.length > 0 && inlineStylePosition === 'sticky') {
                      const report = {
                          message: TranslateService.instant('position_sticky_context_inline_report_message', [DomUtility.getEscapedOuterHTML(element)]),
                          node: element,
                          ruleId: this.ruleConfig.id
                      };
                      this.validator.report(report);
                  }
              }
          };
          if (elements === null) {
              return;
          }
          elements.forEach(checkForPositionSticky);
      }
      async run(context, validator, options) {
          if (CommonUtility.hasKey(context, 'nodeType') && context.nodeType === NODE_TYPE.DOCUMENT_NODE) {
              this.styleSheets = Array.from(document.styleSheets);
              await super.run(context, validator, options);
              return;
          }
          const nonExistsElements = (element) => {
              return element !== null;
          };
          const excludeContainers = Config.excludeContainers.filter(nonExistsElements);
          const excludeElements = [];
          const nodes = DomUtility.querySelectorAllExclude('*', context, excludeContainers, excludeElements);
          this.validateFromContext(nodes);
      }
      validate() {
          if (this.styleSheets.length === 0) {
              return;
          }
          const findPositionStickyInWholeHTML = (styleSheet) => {
              let currentRule;
              let selector;
              let styleObject;
              let isCSSembededInline;
              let href;
              if (styleSheet.hasOwnProperty('rules') === false || styleSheet.href) {
                  return;
              }
              const rules = styleSheet.rules;
              const len = rules.length;
              for (let i = 0; i < len; i += 1) {
                  currentRule = rules[i];
                  styleObject = currentRule.style;
                  if (currentRule === null || currentRule.parentStyleSheet === null || typeof styleObject === 'undefined' || styleObject.position.length === 0 || styleObject.position.indexOf('sticky') === -1) {
                      continue;
                  }
                  href = currentRule.parentStyleSheet.href;
                  if (typeof href === 'string') {
                      isCSSembededInline = TranslateService.instant('position_sticky_embeded_inline_1', [href]);
                  }
                  else {
                      isCSSembededInline = TranslateService.instant('position_sticky_embeded_inline_2', [DomUtility.getEscapedOuterHTML(currentRule.parentStyleSheet.ownerNode)]);
                  }
                  selector = currentRule.cssText;
                  const report = {
                      message: TranslateService.instant('position_sticky_report_message', [selector, isCSSembededInline]),
                      node: null,
                      ruleId: this.ruleConfig.id
                  };
                  this.validator.report(report);
              }
          };
          this.styleSheets.forEach(findPositionStickyInWholeHTML);
      }
  }

  class TableCaptionSummaryIdentical extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'table[summary]';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.table_caption_summary_identical),
              links: [
                  {
                      content: 'H39: Using caption elements to associate data table captions with data tables',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/H39.html'
                  },
                  {
                      content: 'H73: Using the summary attribute of the table element to give an overview of data tables',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/H73.html'
                  }
              ],
              recommendations: [],
              severity: $severity.low,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(tables) {
          const reportNode = (table) => {
              const summaryText = table.getAttribute('summary');
              const captionElement = table.querySelector('caption');
              if (captionElement === null) {
                  return;
              }
              const captionText = captionElement.textContent;
              if (summaryText !== captionText) {
                  return;
              }
              const report = {
                  message: TranslateService.instant('table_caption_summary_identical_report_message', [TextUtility.escape('<caption>')]),
                  node: table,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(report);
          };
          tables.forEach(reportNode);
      }
  }

  class DuplicatedForAttribute extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'label[for]';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.duplicated_for_attribute),
              links: [
                  {
                      content: 'H93: Ensuring that id attributes are unique on a Web page',
                      url: 'https://www.w3.org/TR/WCAG20-TECHS/H93.html'
                  }
              ],
              recommendations: [],
              severity: $severity.critical,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(labelElements) {
          const fors = {};
          const checkForAttribute = (labelElement) => {
              const forValue = labelElement.getAttribute('for');
              if (forValue === null) {
                  return;
              }
              if (fors[forValue]) {
                  fors[forValue].elements.push(labelElement);
                  return;
              }
              fors[forValue] = {
                  elements: [labelElement]
              };
          };
          const showReport = (forValue) => {
              const counter = fors[forValue].elements.length;
              if (counter > 1) {
                  const reportIssue = (element) => {
                      const report = {
                          message: TranslateService.instant('duplicated_for_attribute_report_message', [forValue, String(counter)]),
                          node: element,
                          ruleId: this.ruleConfig.id
                      };
                      this.validator.report(report);
                  };
                  fors[forValue].elements.forEach(reportIssue);
              }
          };
          labelElements.forEach(checkForAttribute);
          Object.keys(fors).forEach(showReport);
      }
  }

  const suggestedSolutions = `${TextUtility.escape('<title>, <desc>, <text>, aria-label, aria-labelledby, aria-describedby, aria-roledescription')}`;
  class AccessibleSvg extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'svg:not([role="presentation"])';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.accessible_svg),
              links: [
                  {
                      content: 'Writing accessible SVG',
                      url: 'https://w3c.github.io/writing-accessible-svg/accessible-svg.html'
                  },
                  {
                      content: 'Appendix C: Accessibility Support',
                      url: 'https://www.w3.org/TR/SVG2/access.html'
                  },
                  {
                      content: 'Success Criterion 1.1.1 Non-text Content',
                      url: 'https://www.w3.org/TR/WCAG21/#non-text-content'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(htmlOrSVGElements) {
          const checkForAnAccessibilityIssues = (svgElement) => {
              const role = svgElement.getAttribute('role');
              if (typeof role === 'string' && role === 'presentation') {
                  return;
              }
              const isHiddenForATbyParent = DomUtility.isHiddenForAT(svgElement);
              if (isHiddenForATbyParent) {
                  return;
              }
              const report = {
                  message: '',
                  node: svgElement,
                  ruleId: this.ruleConfig.id
              };
              const reportMessage = [];
              const titleElement = svgElement.querySelector('title');
              const descElement = svgElement.querySelector('desc');
              const textElement = svgElement.querySelector('text');
              const ariaLabel = svgElement.getAttribute('aria-label');
              const ariaLabelledBy = svgElement.getAttribute('aria-labelledby');
              const ariaDescribedby = svgElement.getAttribute('aria-describedby');
              const ariaRoleDescription = svgElement.getAttribute('aria-roledescription');
              const tabIndex = svgElement.getAttribute('tabindex');
              if (typeof tabIndex === 'string' && ObjectUtility.isNumber(tabIndex) === false) {
                  reportMessage.push(TranslateService.instant('accessible_svg_report_message_4', [svgElement.getAttribute('tabindex')]));
              }
              if (titleElement === null && descElement === null && textElement === null && ariaLabel === null && ariaRoleDescription === null && ariaLabelledBy === null && ariaDescribedby === null) {
                  reportMessage.push(TranslateService.instant('accessible_svg_report_message_1', [svgElement.nodeName.toLowerCase(), suggestedSolutions]));
                  report.message = this.validator.createReportMessage(reportMessage);
                  this.validator.report(report);
                  return;
              }
              if (titleElement !== null) {
                  if (typeof titleElement.textContent !== 'string' || titleElement.textContent.trim().length === 0) {
                      reportMessage.push(TranslateService.instant('accessible_svg_report_message_2', svgElement.nodeName.toLowerCase()));
                  }
                  else {
                      return;
                  }
              }
              if (descElement !== null) {
                  if (typeof descElement.textContent !== 'string' || descElement.textContent.trim().length === 0) {
                      reportMessage.push(TranslateService.instant('accessible_svg_report_message_2', svgElement.nodeName.toLowerCase()));
                  }
                  else {
                      return;
                  }
              }
              if (textElement !== null) {
                  if (typeof textElement.textContent !== 'string' || textElement.textContent.trim().length === 0) {
                      reportMessage.push(TranslateService.instant('accessible_svg_report_message_2', svgElement.nodeName.toLowerCase()));
                  }
                  else {
                      return;
                  }
              }
              if (ariaLabel !== null) {
                  if (ariaLabel.trim().length === 0) {
                      reportMessage.push(TranslateService.instant('accessible_svg_report_message_2', ['aria-label']));
                  }
                  else {
                      return;
                  }
              }
              if (ariaRoleDescription !== null) {
                  if (ariaRoleDescription.trim().length === 0) {
                      reportMessage.push(TranslateService.instant('accessible_svg_report_message_2', ['aria-roledescription']));
                  }
                  else {
                      return;
                  }
              }
              if (typeof ariaLabelledBy === 'string') {
                  const ids = ariaLabelledBy.split(/\s+/);
                  const existingElements = (elementId) => {
                      return document.getElementById(elementId) === null;
                  };
                  const missingAssociatedElements = ids.filter(existingElements);
                  if (missingAssociatedElements.length > 0) {
                      reportMessage.push(TranslateService.instant('accessible_svg_report_message_3', ['aria-labelledby', missingAssociatedElements.join(', ')]));
                  }
                  else {
                      return;
                  }
              }
              if (typeof ariaDescribedby === 'string') {
                  const ids = ariaDescribedby.split(/\s+/);
                  const existingElements = (elementId) => {
                      return document.getElementById(elementId) === null;
                  };
                  const missingAssociatedElements = ids.filter(existingElements);
                  if (missingAssociatedElements.length > 0) {
                      reportMessage.push(TranslateService.instant('accessible_svg_report_message_3', ['aria-describedby', missingAssociatedElements.join(', ')]));
                  }
                  else {
                      return;
                  }
              }
              if (reportMessage.length === 0) {
                  return;
              }
              report.message = reportMessage.join('\n\n');
              this.validator.report(report);
          };
          htmlOrSVGElements.forEach(checkForAnAccessibilityIssues);
      }
  }

  class OrientationRule extends AbstractRule {
      constructor() {
          super(...arguments);
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.orientation),
              links: [
                  {
                      content: 'Understanding Success Criterion 1.3.4: Orientation',
                      url: 'https://www.w3.org/WAI/WCAG21/Understanding/orientation'
                  }
              ],
              recommendations: [],
              severity: $severity.info,
              type: CATEGORY_TYPE.WCAG_AA
          };
      }
      processStyleSheet(styleSheet, originalHref) {
          let report;
          const len = styleSheet.cssRules.length;
          for (let i = 0; i < len; i += 1) {
              const cssMediaRule = styleSheet.cssRules[i];
              if (styleSheet.cssRules[i] instanceof CSSMediaRule && cssMediaRule.media instanceof MediaList) {
                  for (let j = 0, styleSheetMediaLength = cssMediaRule.media.length; j < styleSheetMediaLength; j += 1) {
                      if (cssMediaRule.media[j].search(/orientation: portrait/) !== -1 || cssMediaRule.media[j].search(/orientation: landscape/) !== -1) {
                          const debugDetails = [];
                          if (typeof originalHref === 'string') {
                              debugDetails.push(`location: <code>${originalHref}</code>`);
                          }
                          else {
                              debugDetails.push(`location: <code>${styleSheet.href}</code>`);
                          }
                          if (styleSheet.cssRules.length > 0 && typeof styleSheet.cssRules[i].cssText === 'string') {
                              debugDetails.push(`cssText: <code>${TextUtility.truncate(styleSheet.cssRules[i].cssText, 100)}</code>`);
                          }
                          report = {
                              message: TranslateService.instant('orientation_rule_report_message_1', [cssMediaRule.media[j], debugDetails.join(', ')]),
                              node: null,
                              ruleId: this.ruleConfig.id
                          };
                          this.validator.report(report);
                      }
                  }
              }
          }
          if (styleSheet.media instanceof MediaList) {
              const styleSheetTotal = styleSheet.media.length;
              for (let i = 0; i < styleSheetTotal; i += 1) {
                  if (styleSheet.media[i].search(/orientation: portrait/) !== -1 || styleSheet.media[i].search(/orientation: landscape/) !== -1) {
                      let href = '';
                      if (typeof styleSheet.href === 'string' && styleSheet.href.length > 0) {
                          href = styleSheet.href;
                      }
                      else if (typeof originalHref === 'string' && originalHref.length > 0) {
                          href = originalHref;
                      }
                      const debugDetails = [];
                      debugDetails.push(`location: <code>${href}</code>`);
                      if (styleSheet.cssRules.length > 0 && typeof styleSheet.cssRules[i].cssText === 'string') {
                          debugDetails.push(`cssText: <code>${TextUtility.truncate(styleSheet.cssRules[i].cssText, 100)}</code>`);
                      }
                      report = {
                          message: TranslateService.instant('orientation_rule_report_message_1', [styleSheet.media[i], debugDetails.join(', ')]),
                          node: null,
                          ruleId: this.ruleConfig.id
                      };
                      this.validator.report(report);
                  }
              }
          }
      }
      async validate(styleSheetList) {
          const handleResponse = async (styleSheet, res) => {
              if (res.status >= 200 || res.status < 400) {
                  return await res.text();
              }
              const report = {
                  message: TranslateService.instant('orientation_rule_report_message_2', [styleSheet.href, res.status]),
                  node: null,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(report);
              return Promise.resolve();
          };
          for (let i = 0, len = styleSheetList.length; i < len; i += 1) {
              const styleSheet = styleSheetList[i];
              try {
                  if (typeof styleSheet.cssRules === 'object') {
                      this.processStyleSheet(styleSheet);
                  }
              }
              catch (e) {
                  let styleContent;
                  if (typeof styleSheet.href === 'string') {
                      styleContent = await window.fetch(styleSheet.href, {
                          mode: 'no-cors'
                      })
                          .then(handleResponse.bind(this, styleSheet));
                  }
                  if (typeof styleContent === 'undefined') {
                      return;
                  }
                  const copyStyle = DomUtility.createCSS(styleContent, undefined, styleSheet.media.mediaText);
                  const sheet = copyStyle.sheet;
                  this.processStyleSheet(sheet, styleSheet.href);
                  document.head.removeChild(copyStyle);
              }
          }
      }
      async run() {
          await this.validate(document.styleSheets);
      }
  }

  class Reflow extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = () => {
              return [DomUtility.getRootElement()];
          };
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.reflow),
              links: [
                  {
                      content: 'Understanding Success Criterion 1.4.10: Reflow',
                      url: 'https://www.w3.org/WAI/WCAG21/Understanding/reflow.html'
                  }
              ],
              recommendations: [],
              severity: $severity.info,
              type: CATEGORY_TYPE.WCAG_AA
          };
      }
      validate(elements) {
          if (elements.length === 0) {
              return;
          }
          const report = {
              message: TranslateService.instant('reflow_report_message'),
              node: elements[0],
              ruleId: this.ruleConfig.id
          };
          this.validator.report(report);
      }
  }

  class Overlay extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'script';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.overlay),
              links: [
                  {
                      content: 'The Many Pitfalls of Accessibility Overlays',
                      url: 'https://www.essentialaccessibility.com/blog/the-many-pitfalls-of-accessibility-overlays'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.BEST_PRACTICE
          };
      }
      validate(scripts) {
          const overlay = {
              AccessiBe: ['acsbap.com', 'acsbapp.com'],
              AudioEye: ['audioeye.com'],
              EqualWeb: ['nagich.com', 'nagich.co.il'],
              MaxAccess: ['maxaccess.io'],
              TruAbilities: ['truabilities.com'],
              User1st: ['user1st.info'],
              UserWay: ['userway.org']
          };
          const overlayEntries = Object.entries(overlay);
          if (scripts.length === 0) {
              return;
          }
          const findOverlay = (script) => {
              let url;
              if (script.src.length === 0) {
                  return;
              }
              try {
                  url = new URL(script.src);
              }
              catch (_) {
                  url = null;
              }
              if (url === null) {
                  return;
              }
              const hostname = url.hostname;
              const foundedOverlays = new Map();
              for (const [overlayName, overlayUrls] of overlayEntries) {
                  for (const overlayUrl of overlayUrls) {
                      if (hostname.includes(overlayUrl)) {
                          foundedOverlays.set(overlayName, null);
                      }
                  }
              }
              if (Array.from(foundedOverlays).length === 0) {
                  return;
              }
              const reportMessage = TranslateService.instant('overlay_report_message', Array.from(foundedOverlays.keys()).join(', '));
              const report = {
                  message: reportMessage,
                  node: script,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(report);
          };
          scripts.forEach(findOverlay);
      }
  }

  class AriaRoleDialog extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = '[role="dialog"], [role="alertdialog"]';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.aria_role_dialog),
              links: [],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.BEST_PRACTICE
          };
      }
      validate(elements) {
          const reportProblem = (element) => {
              const ariaLabelledby = element.getAttribute('aria-labelledby');
              const ariaLabel = element.getAttribute('aria-label');
              const titleAttr = element.getAttribute('title');
              const roleAttr = element.getAttribute('role');
              let reportMessage = '';
              if (typeof ariaLabelledby === 'string') {
                  if (ariaLabelledby.trim().length > 0) {
                      return;
                  }
                  reportMessage = TranslateService.instant('aria_role_dialog_report_message_1', [TextUtility.escape(`role="${roleAttr}"`), TextUtility.escape('aria-labelledby')]);
              }
              else if (typeof ariaLabel === 'string') {
                  if (ariaLabel.trim().length > 0) {
                      return;
                  }
                  reportMessage = TranslateService.instant('aria_role_dialog_report_message_1', [TextUtility.escape(`role="${roleAttr}"`), TextUtility.escape('aria-label')]);
              }
              else if (typeof titleAttr === 'string') {
                  if (titleAttr.trim().length > 0) {
                      return;
                  }
                  reportMessage = TranslateService.instant('aria_role_dialog_report_message_1', [TextUtility.escape(`role="${roleAttr}"`), TextUtility.escape('title')]);
              }
              else {
                  reportMessage = TranslateService.instant('aria_role_dialog_report_message_2', [TextUtility.escape(`role="${roleAttr}"`)]);
              }
              const problem = {
                  message: reportMessage,
                  node: element,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(problem);
          };
          elements.forEach(reportProblem);
      }
  }

  class IdentifyInputPurpose extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = '[autocomplete]';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.identify_input_purpose),
              links: [
                  {
                      content: '4.10.18.7.1. Autofilling form controls: the autocomplete attribute',
                      url: 'https://www.w3.org/TR/html52/sec-forms.html#autofilling-form-controls-the-autocomplete-attribute'
                  },
                  {
                      content: 'WCAG 2.1 - 1.3.5 Identify Input Purpose Level AA',
                      url: 'https://www.w3.org/WAI/WCAG21/Understanding/identify-input-purpose.html'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.WCAG_AA
          };
      }
      validate(elements) {
          const completion = [
              'on',
              'off'
          ];
          const paymentAndAddress = [
              'billing',
              'shipping'
          ];
          const detailedCompletion = [
              'additional-name',
              'address-level1',
              'address-level2',
              'address-level3',
              'address-level4',
              'address-line1',
              'address-line2',
              'address-line3',
              'bday',
              'bday-day',
              'bday-month',
              'bday-year',
              'cc-additional-name',
              'cc-csc',
              'cc-exp',
              'cc-exp-month',
              'cc-exp-year',
              'cc-family-name',
              'cc-given-name',
              'cc-name',
              'cc-number',
              'cc-type',
              'country',
              'country-name',
              'current-password',
              'family-name',
              'given-name',
              'honorific-prefix',
              'honorific-suffix',
              'language',
              'name',
              'new-password',
              'nickname',
              'one-time-code',
              'organization',
              'organization-title',
              'photo',
              'postal-code',
              'sex',
              'street-address',
              'transaction-amount',
              'transaction-currency',
              'url',
              'username'
          ];
          const contactType = [
              'fax',
              'home',
              'mobile',
              'pager',
              'work'
          ];
          const contactCompletion = [
              'email',
              'impp',
              'tel',
              'tel-area-code',
              'tel-country-code',
              'tel-extension',
              'tel-local',
              'tel-local-prefix',
              'tel-local-suffix',
              'tel-national'
          ];
          const validateElement = (element) => {
              let autocompleteAttr = element.getAttribute('autocomplete');
              if (autocompleteAttr === null) {
                  return;
              }
              autocompleteAttr = autocompleteAttr.trim();
              if (completion.includes(autocompleteAttr) || autocompleteAttr.length === 0) {
                  return;
              }
              const problem = {
                  message: '',
                  node: element,
                  ruleId: this.ruleConfig.id
              };
              const tokens = autocompleteAttr.split(/\s+/g).map((token) => {
                  return token.trim();
              });
              if ((/section-.*/).test(tokens[0])) {
                  tokens.shift();
              }
              if (paymentAndAddress.includes(tokens[0])) {
                  tokens.shift();
              }
              if (contactType.includes(tokens[0])) {
                  tokens.shift();
                  if (contactCompletion.includes(tokens[0]) === false) {
                      problem.message = TranslateService.instant('identify_input_purpose_report_message_1', [contactCompletion.join(', '), tokens[0]]);
                  }
              }
              if (tokens.length > 0) {
                  const invalidTokens = [];
                  for (const token of tokens) {
                      if (detailedCompletion.includes(token) === false) {
                          invalidTokens.push(token);
                      }
                  }
                  if (invalidTokens.length > 0) {
                      problem.message = TranslateService.instant('identify_input_purpose_report_message_2', [invalidTokens.join(', ')]);
                  }
              }
              if (problem.message.length === 0) {
                  return;
              }
              this.validator.report(problem);
          };
          elements.forEach(validateElement);
      }
  }

  class EmptyHeading extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'h1, h2, h3, h4, h5, h6, [role="heading"]';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.empty_heading),
              links: [
                  {
                      content: 'G130: Providing descriptive headings',
                      url: 'https://www.w3.org/TR/2012/NOTE-WCAG20-TECHS-20120103/G130'
                  },
                  {
                      content: 'Success Criterion 2.4.6 (Headings and Labels)',
                      url: 'https://www.w3.org/WAI/WCAG21/Understanding/headings-and-labels.html'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.WCAG_AA
          };
      }
      validate(elements) {
          const checkContent = (element) => {
              let nodeText;
              let result = false;
              if (element.hasChildNodes() === false) {
                  result = true;
              }
              else {
                  nodeText = DomUtility.nodesToText(element);
                  if (TextUtility.safeTrim(nodeText).length === 0) {
                      result = true;
                  }
              }
              if (result === false) {
                  return;
              }
              const report = {
                  message: TranslateService.instant('empty_heading_report_message'),
                  node: element,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(report);
          };
          elements.forEach(checkContent);
      }
  }

  class AltTextIncludeFilename extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = '[alt]';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.alt_text_include_filename),
              links: [
                  {
                      content: 'F30: Failure of Success Criterion 1.1.1 and 1.2.1 due to using text alternatives that are not alternatives (e.g., filenames or placeholder text)',
                      url: 'http://www.w3.org/TR/WCAG20-TECHS/F30'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(htmlElements) {
          const imageExtensions = [
              'apng',
              'avif',
              'bmp',
              'gif',
              'jpeg',
              'jpg',
              'png',
              'svg',
              'tif',
              'tiff',
              'webp'
          ];
          const reportNode = (htmlElement) => {
              const altText = htmlElement.getAttribute('alt');
              if (altText === null || altText.trim().length === 0) {
                  return;
              }
              const extension = altText.split('.').pop();
              if (typeof extension === 'undefined') {
                  return;
              }
              if (imageExtensions.includes(extension) === false) {
                  return;
              }
              const report = {
                  message: TranslateService.instant('alt_text_include_filename_report_message', altText),
                  node: htmlElement,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(report);
          };
          htmlElements.forEach(reportNode);
      }
  }

  class LinksNotVisuallyEvidentWithoutColorVision extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'a:not(:empty)';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.links_not_visually_evident_without_color_vision),
              links: [
                  {
                      content: 'Failure of Success Criterion 1.4.1 due to creating links that are not visually evident without color vision',
                      url: 'https://www.w3.org/WAI/WCAG21/Techniques/failures/F73'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(elements) {
          const checkLink = (element) => {
              const problem = {
                  message: '',
                  node: element,
                  ruleId: this.ruleConfig.id
              };
              const textContent = DomUtility.getTextFromDescendantContent(element);
              if (DomUtility.hasDirectTextDescendant(element) === false || textContent.trim().length === 0) {
                  return;
              }
              const element_computedStyle = Css.getComputedStyle(element);
              const parentElement = element.parentElement;
              if (element_computedStyle === null || parentElement === null) {
                  return;
              }
              const parent_computedStyle = Css.getComputedStyle(parentElement);
              if (parent_computedStyle === null) {
                  return;
              }
              const element_background = element_computedStyle.getPropertyValue('background');
              const element_color = element_computedStyle.getPropertyValue('color');
              const element_fontStyle = element_computedStyle.getPropertyValue('font-style');
              const element_textDecoration = element_computedStyle.getPropertyValue('text-decoration');
              const parent_background = parent_computedStyle.getPropertyValue('background');
              const parent_color = parent_computedStyle.getPropertyValue('color');
              const parent_fontStyle = parent_computedStyle.getPropertyValue('font-style');
              const parent_textDecoration = parent_computedStyle.getPropertyValue('text-decoration');
              if (element_fontStyle !== parent_fontStyle || element_textDecoration !== parent_textDecoration || element_background !== parent_background || element_color !== parent_color) {
                  return;
              }
              problem.message = TranslateService.instant('links_not_visually_evident_without_color_vision_report_message', [`background: ${element_background}; color: ${element_color}; font-style: ${element_fontStyle}; text-decoration: ${element_textDecoration}`, `background: ${parent_background}; color: ${parent_color}; font-style: ${parent_fontStyle}; text-decoration: ${parent_textDecoration}`]);
              this.validator.report(problem);
          };
          elements.forEach(checkLink);
      }
  }

  class MotionActuation extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = () => {
              return [DomUtility.getRootElement()];
          };
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.motion_actuation),
              links: [
                  {
                      content: 'Provide conventional controls and an application setting for motion activated input',
                      url: 'https://www.w3.org/WAI/WCAG21/Techniques/general/G213.html'
                  },
                  {
                      content: 'Understanding Success Criterion 2.5.4: Motion Actuation',
                      url: 'https://www.w3.org/WAI/WCAG21/Understanding/motion-actuation.html'
                  }
              ],
              recommendations: [],
              severity: $severity.info,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(elements) {
          const validateElement = (element) => {
              const isDeviceOrientationApiAvailable = ObjectUtility.isHostMethod(window, 'DeviceMotionEvent') && ObjectUtility.isHostMethod(window, 'DeviceOrientationEvent');
              const problem = {
                  message: TranslateService.instant('motion_actuation_report_message_1', [String(isDeviceOrientationApiAvailable)]),
                  node: element,
                  ruleId: this.ruleConfig.id
              };
              this.validator.report(problem);
          };
          elements.forEach(validateElement);
      }
  }

  class EmptyButtonDescription extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'button, [role="button"]';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.empty_button_description),
              links: [
                  {
                      content: 'H91: Using HTML form controls and links',
                      url: 'https://www.w3.org/WAI/WCAG21/Techniques/html/H91.html'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(elements) {
          const reportEmptyButtonDescription = (element) => {
              const content = DomUtility.nodesToText(element);
              const reportMessage = [];
              const ariaHidden = element.getAttribute('aria-hidden');
              const ariaLabel = element.getAttribute('aria-label');
              const ariaLabelledBy = element.getAttribute('aria-labelledby');
              const reportIssue = {
                  message: '',
                  node: element,
                  ruleId: this.ruleConfig.id
              };
              if (typeof ariaHidden === 'string' && ariaHidden === 'true') {
                  return;
              }
              const contentTrimmed = TextUtility.safeTrim(content);
              if (content.length > 0 && TextUtility.containsOnlyWhiteSpaces(content)) {
                  reportMessage.push(TranslateService.instant('empty_button_description_report_message_1'));
              }
              else if (element.childNodes.length === 0 || content.length === 0) {
                  reportMessage.push(TranslateService.instant('empty_button_description_report_message_2'));
              }
              if (typeof ariaLabel === 'string' && ariaLabel.trim().length > 0) {
                  if (contentTrimmed.length === 0) {
                      reportMessage.push(TranslateService.instant('empty_button_description_report_message_3', [`aria-label="${ariaLabel}"`]));
                  }
              }
              if (typeof ariaLabelledBy === 'string') {
                  const ids = ariaLabelledBy.split(/\s+/);
                  const existingElements = (elementId) => {
                      return document.getElementById(elementId) === null;
                  };
                  const missingAssociatedElements = ids.filter(existingElements);
                  if (missingAssociatedElements.length > 0) {
                      reportMessage.push(TranslateService.instant('empty_button_description_additional_message', [ariaLabelledBy, missingAssociatedElements.join(' ')]));
                  }
              }
              if (reportMessage.length === 0) {
                  return;
              }
              reportIssue.message = reportMessage.join(' ');
              this.validator.report(reportIssue);
          };
          elements.forEach(reportEmptyButtonDescription);
      }
  }

  class BrokenSamePageLink extends AbstractRule {
      constructor() {
          super(...arguments);
          this.selector = 'a';
          this.ruleConfig = {
              id: TextUtility.convertUnderscoresToDashes($accessibilityAuditRules.broken_same_page_link),
              links: [
                  {
                      content: '2.1.1 Keyboard (Level A)',
                      url: 'https://www.w3.org/WAI/WCAG21/Understanding/keyboard.html'
                  }
              ],
              recommendations: [],
              severity: $severity.high,
              type: CATEGORY_TYPE.WCAG_A
          };
      }
      validate(elements) {
          const reportEmptyLink = (element) => {
              const href = element.href;
              let url;
              try {
                  url = new URL(href);
              }
              catch (_) {
                  url = null;
              }
              if (url === null) {
                  return;
              }
              if (url.hostname !== window.location.hostname || url.pathname !== window.location.pathname) {
                  return;
              }
              const hash = url.hash.split('#')[1];
              if (url.hash === '#' || typeof hash === 'string' && hash.length > 0 && document.getElementById(hash) === null) {
                  const reportIssue = {
                      message: TranslateService.instant('broken_same_page_link_report_message', [hash]),
                      node: element,
                      ruleId: this.ruleConfig.id
                  };
                  this.validator.report(reportIssue);
              }
          };
          elements.forEach(reportEmptyLink);
      }
  }

  class LoadRules {
      constructor() {
          this.defaultRuleInstances = [];
          this.configInstance = Config.getInstance();
      }
      get defaultRules() {
          if (Array.isArray(this.defaultRuleInstances) && this.defaultRuleInstances.length > 0) {
              return this.defaultRuleInstances;
          }
          this.defaultRuleInstances = [
              new AccessibleSvg(),
              new AltTextIncludeFilename(),
              new AriaHiddenFalse(),
              new AriaRoleDialog(),
              new BrokenSamePageLink(),
              new CapitalLettersWords(),
              new ContentEditableMissingAttributes(),
              new ContentinfoLandmarkOnlyOne(),
              new ElementsNotAllowed(),
              new EmptyButtonDescription(),
              new EmptyLinkElement(),
              new EmptyTitleAttribute(),
              new FieldsetNoLegend(),
              new FlashContent(),
              new GroupElementsNameAttribute(),
              new H1MustBe(),
              new HeadingsSiblingUnique(),
              new HorizontalRule(),
              new IdentifyInputPurpose(),
              new IncorrectTechniqueForHidingContent(),
              new InvalidAttributeDirValue(),
              new LabelDuplicatedContentTitle(),
              new LabelImplicitlyAssociated(),
              new LabelInappropriateAssociation(),
              new LabelVisuallyHiddenOnly(),
              new LegendFirstChildOfFieldSet(),
              new LinkButtonSpaceKey(),
              new LinksNotVisuallyEvidentWithoutColorVision(),
              new LinkWithUnclearPurpose(),
              new LinksLanguageDestination(),
              new LinksNewWindowMark(),
              new LinksSameContentDifferenceUrl(),
              new MainElementOnlyOne(),
              new MainLandmarkMustBeTopLevel(),
              new MinimumFontSize(),
              new MissingHrefOnA(),
              new MissingLabel(),
              new MissingSubmitButton(),
              new MisusedAriaOnFocusableElement(),
              new MisusedInputAttribute(),
              new MisusedRequiredAttribute(),
              new MisusedTabindexAttribute(),
              new NavigationLandmarkRestrictions(),
              new EmptyHeading(),
              new NoMetaHttpEquivRefresh(),
              new ObsoleteHtmlAttributes(),
              new ObsoleteHtmlElements(),
              new OutlineZero(),
              new PositiveTabindex(),
              new RoleApplication(),
              new RtlContent(),
              new SelectInitialOption(),
              new TableMissingDescription(),
              new PageTitle(),
              new TitleForAbbr(),
              new UnclearAnchorUri(),
              new UnsupportedRoleOnElement(),
              new AreaMissingAlt(),
              new AppletMissingAlt(),
              new AppletMissingBody(),
              new AudioAlternative(),
              new GeneralAlt(),
              new ImgEmptyAltInLink(),
              new ImgEmptyAltWithEmptyTitle(),
              new ImgAdjacentDuplicateTextLink(),
              new ImgAltDuplicateTextLink(),
              new InputImageMissingAlt(),
              new ObjectGeneralAlt(),
              new ObjectMissingBody(),
              new Overlay(),
              new AudioVideoCaptions(),
              new VideoAudioDescriptions(),
              new MeaningfulContentSequence(),
              new TableRowAndColumnHeaders(),
              new TitleiFrame(),
              new Flickering(),
              new EmptyLabelElement(),
              new IncorrectLabelPlacement(),
              new ColorContrastA2(),
              new ColorContrastStatePseudoClassesActive(),
              new ColorContrastStatePseudoClassesFocus(),
              new ColorContrastStatePseudoClassesHover(),
              new ColorContrastA3(),
              new CssImagesConveyInformation(),
              new MissingAltAttribute(),
              new CaptchaGoogle(),
              new AriaDescribedbyAssociation(),
              new HeadingsHierarchy(),
              new AltColorConveyInformation(),
              new TextColorConveyInformation(),
              new AutoplayAudioVideo(),
              new ZoomDisabled(),
              new Animation(),
              new BlinkElement(),
              new AriaLabelledbyAssociation(),
              new ClickVerb(),
              new NoHeadings(),
              new FontStyleItalic(),
              new HtmlLangAttr(),
              new DuplicatedIdAttribute(),
              new PositionSticky(),
              new TableCaptionSummaryIdentical(),
              new DuplicatedForAttribute(),
              new OrientationRule(),
              new Reflow(),
              new MotionActuation()
          ];
          return this.defaultRuleInstances;
      }
      get defaultRulesNames() {
          const getRuleId = (rule) => {
              return rule.id;
          };
          return this.defaultRules.map(getRuleId);
      }
      registerDefaultRulesForValidator() {
          const registerRule = (rule) => {
              const accessibilityStandards = Validator.getAccessibilityStandards();
              const ruleId = TextUtility.convertDashesToUnderscores(rule.id);
              const customRuleConfig = this.configInstance.get($runnerSettings.rules)[rule.id];
              if (ObjectUtility.getTypeOf(customRuleConfig) === 'object') {
                  this.configInstance.get($runnerSettings.rules)[rule.id] = ObjectUtility.deepMerge(accessibilityStandards[ruleId], customRuleConfig);
              }
              else {
                  this.configInstance.get($runnerSettings.rules)[rule.id] = ObjectUtility.deepMerge(accessibilityStandards[ruleId], rule.config);
              }
              rule.registerValidator();
          };
          this.defaultRules
              .forEach(registerRule);
      }
  }

  class RuleFactory extends AbstractRule {
      constructor(ruleConfig, selector) {
          super();
          this.selector = '';
          this.ruleConfig = {
              id: '',
              links: [],
              recommendations: [],
              severity: $severity.info,
              type: CATEGORY_TYPE.BEST_PRACTICE
          };
          this.ruleConfig = ruleConfig;
          this.selector = selector;
      }
      validate(_nodes) { }
  }

  class App {
      constructor() {
          this.references = {};
          this.configInstance = Config.getInstance();
          this.loadRules = new LoadRules();
          this.version = version;
          Console.init();
      }
      initEvents() {
          this.references.dispose = this.dispose.bind(this);
          Bus.subscribe(busEvent.onApplicationDispose, this.references.dispose);
          Bus.subscribe(busEvent.onValidatorComplete, this.configInstance.get($runnerSettings.resultsCallback));
      }
      dispose() {
          console.log('[App] %cdispose', 'color: blue');
          if (this.mutationObserver instanceof MutationObserver) {
              this.mutationObserver.disconnect();
          }
          Bus.unsubscribe(busEvent.onApplicationDispose, this.references.dispose);
          Bus.unsubscribe(busEvent.onValidatorComplete, this.configInstance.get($runnerSettings.resultsCallback));
      }
      runValidatorTests(context) {
          Validator.runTests(context);
      }
      watchContextMutations(context, runner) {
          if (this.mutationObserver instanceof MutationObserver) {
              this.mutationObserver.disconnect();
          }
          const mutationCallback = (mutationsList) => {
              for (const mutation of mutationsList) {
                  if (['attributes', 'childList'].includes(mutation.type)) {
                      let node = mutation.target;
                      if (node === document.head) {
                          continue;
                      }
                      while (node.nodeType === Node.ELEMENT_NODE && node.parentNode) {
                          if (node.getAttribute('id') === this.configInstance.get('containerId')) {
                              continue;
                          }
                          node = node.parentNode;
                      }
                      runner();
                      break;
                  }
              }
          };
          this.mutationObserver = new MutationObserver(mutationCallback);
          this.mutationObserver.observe(context, {
              attributes: true,
              childList: true,
              subtree: true
          });
      }
      config(runnerOptions = {}) {
          this.configInstance.init(Object.assign({}, runnerOptions));
          return this;
      }
      setLocale(locale) {
          TranslateService.setCurrentLocale(locale);
          return this;
      }
      addListener(eventName, callback) {
          Bus.subscribe(eventName, callback, BusListenersPool.external);
          return this;
      }
      removeListener(eventName, callback) {
          Bus.unsubscribe(eventName, callback, BusListenersPool.external);
          return this;
      }
      addFilter(filterName, handler) {
          Config.addFilter(filterName, handler);
          return this;
      }
      addRule(newRuleId, ruleConfiguration, validator, selector, ruleOptions) {
          const ruleId = newRuleId.trim();
          if (typeof newRuleId !== 'string' || ruleId.trim().length === 0) {
              throw new Error(`[App.addRule][${ruleId}] ruleId must be a non-empty string`);
          }
          if (ObjectUtility.isTypeOf(ruleConfiguration, 'object') === false) {
              throw new Error(`[App.addRule][${ruleId}] ruleConfig must me an object`);
          }
          const ruleConf = ObjectUtility.deepMerge(runnerSettings, ruleConfiguration);
          ruleConf.id = newRuleId;
          const categoryTypes = Object.values(CATEGORY_TYPE);
          if (categoryTypes.includes(ruleConf.type) === false) {
              throw new Error(`[App.addRule] [${ruleId}] Property type on ruleConfiguration must be one of the: ${categoryTypes.join(', ')}. Got ${typeof ruleConf.type}`);
          }
          const severities = Object.values($severity);
          if (severities.includes(ruleConf.severity) === false) {
              throw new Error(`[App.addRule] [${ruleId}] Property severity on ruleConfiguration must be one of the: ${severities.join(', ')}. Got ${ruleConf.severity}`);
          }
          if (Array.isArray(ruleConf.links) === false) {
              throw new Error(`[App.addRule] [${ruleId}] Property links on ruleConfiguration must be an array, but got ${typeof ruleConf.links}`);
          }
          if (Array.isArray(ruleConf.recommendations) === false) {
              throw new Error(`[App.addRule] [${ruleId}] ruleConfig.recommendations must be an array, but got ${typeof ruleConf.recommendations}`);
          }
          if (typeof validator !== 'function') {
              throw new Error(`[App.addRule] [${ruleId}] validator must be a function, but got ${typeof validator}`);
          }
          const ruleFactory = new RuleFactory(ruleConf, selector);
          ruleFactory.validate = validator.bind(ruleFactory);
          ruleFactory.registerValidator();
          if (typeof ruleOptions !== 'undefined') {
              this.configInstance.get($runnerSettings.rules)[ruleId] = ruleOptions;
          }
          return this;
      }
      setRule(ruleId, ruleOptions) {
          if (typeof ruleOptions !== 'undefined') {
              this.configInstance.get($runnerSettings.rules)[ruleId] = ruleOptions;
          }
          return this;
      }
      setRules(ruleNames, ruleOptions) {
          const setRule = (ruleName) => {
              this.setRule(ruleName, ruleOptions);
          };
          ruleNames.forEach(setRule);
          return this;
      }
      run(callback) {
          if (typeof callback !== 'undefined' && typeof callback !== 'function') {
              throw new Error(`[App.run] passed callback must be type of function, but got ${typeof callback}`);
          }
          this.config();
          const context = this.configInstance.get($runnerSettings.context);
          const contextElement = Validator.getContextElement(context);
          if (contextElement === null) {
              let contextError;
              if (typeof context === 'string' && TextUtility.safeTrim(context).length === 0) {
                  contextError = TranslateService.instant('context_unable_to_determine_empty_string');
              }
              else {
                  contextError = TranslateService.instant('context_unable_to_determine', [typeof context, String(context)]);
              }
              throw new Error(`[Validator.runTests] ${contextError}`);
          }
          this.loadRules.registerDefaultRulesForValidator();
          const initAndRun = () => {
              this.initEvents();
              if (this.configInstance.get($runnerSettings.watchDomChanges)) {
                  this.watchContextMutations(contextElement, this.runValidatorTests.bind(this, contextElement));
              }
              this.runValidatorTests(contextElement);
          };
          if (typeof callback === 'function') {
              this.configInstance.set($runnerSettings.resultsCallback, callback);
              initAndRun();
              return;
          }
          const initPromiseWrapper = (resolve, reject) => {
              const resultsCallback = (err, res) => {
                  if (err) {
                      reject(err);
                      return;
                  }
                  resolve(res);
              };
              this.configInstance.set($runnerSettings.resultsCallback, resultsCallback);
              initAndRun();
          };
          return new Promise(initPromiseWrapper);
      }
  }

  const configInstance = Config.getInstance();
  Global.context[configInstance.get($runnerSettings.namespace)] = new App();

}());
